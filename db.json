{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1579679632076},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1579679632077},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1579679632077},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1579679632077},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1579679632077},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1579679632086},{"_id":"source/_posts/hello-world.md","hash":"e6bcde22aba846b37ff2a881e8386a3e5eec2519","modified":1579934500587},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1579679632078},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1579679632078},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1579679632078},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1579679632079},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1579679632079},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1579679632079},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1579679632079},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1579679632080},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1579679632080},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1579679632080},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1579679632080},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1579679632081},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1579679632085},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1579679632085},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1579679632085},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1579679632085},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1579679632086},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1579679632086},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1579679632086},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1579679632114},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1579679632081},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1579679632081},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1579679632081},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1579679632082},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1579679632082},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1579679632082},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1579679632082},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1579679632082},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1579679632083},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1579679632083},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1579679632084},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1579679632084},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1579679632084},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1579679632085},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1579679632085},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1579679632085},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1579679632115},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1579679632118},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1579679632125},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1579679632126},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1579679632126},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1579679632126},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1579679632126},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1579679632127},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1579679632127},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1579679632129},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1579679632129},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1579679632130},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1579679632130},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1579679632083},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1579679632083},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1579679632084},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1579679632083},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1579679632084},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1579679632084},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1579679632115},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1579679632115},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1579679632116},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1579679632115},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1579679632116},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1579679632116},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1579679632117},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1579679632117},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1579679632117},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1579679632117},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1579679632118},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1579679632118},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1579679632119},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1579679632120},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1579679632123},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1579679632128},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1579679632128},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1579679632128},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1579679632128},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1579679632128},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1579679632129},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1579679632122},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1579679632121},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1579679632124},{"_id":"public/2020/01/22/hello-world/index.html","hash":"83258a107e04a80b894322f6d18b144e8a1d0cae","modified":1579684895259},{"_id":"public/archives/index.html","hash":"2f875a776851abaed0e90cf2cbc678b3f65749e6","modified":1660719386337},{"_id":"public/archives/2020/index.html","hash":"af5381a880852543f1f89c3e8b17818970645cc8","modified":1660719386337},{"_id":"public/archives/2020/01/index.html","hash":"05815317af5fea2dcbe4481e446c0f7673b451ad","modified":1660719386337},{"_id":"public/index.html","hash":"9b71985aa76e042943a7e09602f6c06ffa6ab60c","modified":1660719386337},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1579680567281},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1579680567281},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1579680567281},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1579680567281},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1579680567281},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1579680567281},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1579680567281},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1579680567281},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1579680567281},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1579680567281},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1579680567281},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1579680567281},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1579680567281},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1579680567281},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1579680567281},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1579680567281},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1579680567281},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1579680567281},{"_id":"public/css/style.css","hash":"d4cfa90089c78a8b791252afae9fafa3b5658900","modified":1579680567281},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1579680567281},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1579680567281},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1579680567281},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1579680567281},{"_id":"source/_posts/index-html.md","hash":"1e9cfc501eed4321a25d0a589046f147cae28adc","modified":1579680836445},{"_id":"public/2020/01/22/index-html/index.html","hash":"330a485d7c10c07af252acccd2238a513befe11d","modified":1579681617928},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1579681604077},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1579681604077},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1579681604078},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1579681604078},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1579681604079},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1579681604079},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1579681604079},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1579681604079},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1579681604079},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1579681604079},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1579681604079},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1579681604080},{"_id":"themes/next/_config.yml","hash":"2f398e39322da8e382a33c99fb78ae7071e0826d","modified":1580992277788},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1579681604080},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1579681604080},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1579681604095},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1579681604078},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1579681604078},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1579681604078},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1579681604078},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1579681604083},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1579681604095},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1579681604095},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1579681604095},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1579681604095},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1579681604095},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1579681604095},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1579681604095},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1579681604080},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1579681604081},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1579681604081},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1579681604081},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1579681604081},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1579681604081},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1579681604082},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1579681604082},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1579681604082},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1579681604082},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1579681604082},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1579681604082},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1579681604082},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1579681604083},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1579681604083},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1579681604083},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1579681604095},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1579681604096},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1579681604158},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1579681604158},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1579681604158},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604115},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1579681604083},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1579681604083},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1579681604086},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1579681604086},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1579681604086},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1579681604086},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1579681604086},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"20addd5c1f57fccb8b32cce913c7fabe07265bd8","modified":1582641121336},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1579681604087},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1579681604083},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1579681604084},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1579681604084},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1579681604084},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1579681604084},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1579681604085},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1579681604092},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1579681604092},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1579681604092},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1579681604094},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1579681604094},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1579681604094},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1579681604094},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1579681604088},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1579681604088},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1579681604089},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1579681604096},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1579681604096},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1579681604096},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1579681604096},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1579681604097},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1579681604097},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1579681604097},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1579681604097},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1579681604098},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1579681604115},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579681604115},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1579681604115},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1579681604115},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1579681604115},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1579681604116},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1579681604116},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1579681604116},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1579681604117},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1579681604117},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1579681604117},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579681604117},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579681604117},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1579681604117},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1579681604117},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1579681604117},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1579681604117},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1579681604118},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1579681604118},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604089},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604089},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604114},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604115},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604111},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604111},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604111},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1579681604086},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1579681604086},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1579681604087},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1579681604088},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1579681604088},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1579681604088},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1579681604088},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1579681604088},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1579681604088},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1579681604089},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1579681604089},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1579681604089},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1579681604089},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1579681604090},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1579681604090},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1579681604091},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1579681604090},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1579681604091},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1579681604091},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1579681604091},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1579681604091},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1579681604091},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1579681604091},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1579681604091},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1579681604092},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1579681604094},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1579681604094},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1579681604094},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1579681604094},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1579681604089},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1579681604089},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1579681604089},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1579681604110},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1579681604114},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1579681604114},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1579681604114},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1579681604114},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1579681604111},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1579681604111},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1579681604111},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1579681604118},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1579681604118},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1579681604118},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1579681604118},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1579681604118},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1579681604119},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1579681604121},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1579681604121},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1579681604121},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1579681604121},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1579681604121},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1579681604126},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1579681604126},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1579681604124},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1579681604126},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1579681604127},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1579681604132},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1579681604132},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1579681604132},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1579681604132},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1579681604133},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1579681604133},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1579681604133},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1579681604134},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1579681604134},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1579681604145},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1579681604146},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1579681604146},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1579681604146},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1579681604146},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1579681604146},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1579681604148},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1579681604148},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1579681604148},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1579681604149},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1579681604149},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1579681604149},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1579681604149},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1579681604149},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1579681604151},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1579681604151},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1579681604151},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1579681604151},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1579681604151},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1579681604152},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1579681604152},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1579681604155},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1579681604155},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1579681604157},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1579681604157},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1579681604158},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1579681604146},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1579681604094},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1579681604094},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1579681604098},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1579681604098},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1579681604098},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1579681604098},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1579681604098},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1579681604105},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1579681604109},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1579681604110},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1579681604110},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1579681604110},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1579681604110},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1579681604110},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1579681604110},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1579681604111},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1579681604111},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1579681604111},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1579681604111},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1579681604112},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1579681604112},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1579681604112},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1579681604112},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1579681604114},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1579681604114},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1579681604114},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1579681604114},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1579681604114},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1579681604121},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1579681604123},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1579681604123},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1579681604127},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1579681604127},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1579681604127},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1579681604127},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1579681604127},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1579681604128},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1579681604131},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1579681604131},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1579681604132},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1579681604133},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1579681604133},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1579681604134},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1579681604135},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1579681604134},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1579681604155},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1579681604155},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1579681604122},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1579681604123},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579681604144},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579681604145},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1579681604157},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1579681604099},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1579681604099},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1579681604099},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1579681604099},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1579681604099},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1579681604104},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1579681604104},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1579681604104},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1579681604104},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1579681604106},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1579681604109},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1579681604109},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1579681604109},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1579681604109},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1579681604109},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1579681604112},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1579681604113},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1579681604121},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1579681604121},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1579681604121},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1579681604122},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1579681604122},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1579681604128},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1579681604129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1579681604129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1579681604129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1579681604129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1579681604131},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1579681604137},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1579681604143},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579681604138},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1579681604126},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1579681604141},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1579681604155},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1582078894303},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1582078894303},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1582078894303},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1582078894303},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1582078894303},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1582078894303},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1582078894303},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1582078894303},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1582078894303},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1582078894303},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1582078894303},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1582078894303},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1582078894303},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1582078894303},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1582078894303},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1582078894303},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1582078894303},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1582078894303},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1582078894303},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1582078894303},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1582078894303},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1582078894303},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1582078894303},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1582078894303},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1582078894303},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1582078894303},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1582078894303},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1582078894303},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1582078894303},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1582078894303},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1582078894303},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1582078894303},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1582078894303},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1582078894303},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1582078894303},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1582078894303},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1582078894303},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1582078894303},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1582078894303},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1582078894303},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1582078894303},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1582078894303},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1582078894303},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1582078894303},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1582078894303},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1582078894303},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1582078894303},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1582078894303},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1582078894303},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1582078894303},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1582078894303},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1582078894303},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1582078894303},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1582078894303},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1582078894303},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1582078894303},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1582078894303},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1582078894303},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1582078894303},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1582078894303},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1582078894303},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1582078894303},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1582078894303},{"_id":"public/css/main.css","hash":"f39c0fad20190c8ce15b0cd212c5d319ea7ef1bf","modified":1582078894303},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1582078894303},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1582078894303},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1582078894303},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1582078894303},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1582078894303},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1582078894303},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1582078894303},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1582078894303},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1582078894303},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1582078894303},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1582078894303},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1582078894303},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1582078894303},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1582078894303},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1582078894303},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1582078894303},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1582078894303},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1582078894303},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1582078894303},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1582078894303},{"_id":"source/categories/index.md","hash":"f040b3df9f0b5f37c5476d5fbefba7a174d4f6d5","modified":1579686449280},{"_id":"source/about/index.md","hash":"daab37c8c28a09269c63265e4a47023b2dcea6b4","modified":1579788394574},{"_id":"source/tags/index.md","hash":"edb22a2630a350e29c8dc2b0fc0289ce3ab20fb8","modified":1579686449280},{"_id":"public/categories/index.html","hash":"1fc407283b1c11db2e3c9dd87b5882182cc6bf46","modified":1660719386337},{"_id":"public/about/index.html","hash":"bd94d433cb23203e104b51484b915483c53a04b9","modified":1660719386337},{"_id":"public/tags/index.html","hash":"6cda44f498f436c135634ad4b57556f7cf6c5808","modified":1660719386337},{"_id":"public/categories/技术/index.html","hash":"e50a1f55a65eb8e132ba7d91ab0af83d3e8008cc","modified":1579789225133},{"_id":"public/tags/编程/index.html","hash":"b25d5488bfb8952b7054e403aa8f489e0d96750a","modified":1579789225133},{"_id":"public/tags/感悟/index.html","hash":"44038dc8f87f87ec5e8930b0649b3d09b40077ff","modified":1579789225133},{"_id":"public/2020/01/23/hello-world/index.html","hash":"dbdcd2195276db87a5d6a98bb7c3c8e155aa084c","modified":1579789225133},{"_id":"public/tags/分享/index.html","hash":"06f6b1d6293d6cf51e7ea8dddae3f1a22ee30057","modified":1579789225133},{"_id":"source/_posts/miniprogrammanual.md","hash":"c28e0ad5e9a4fdcb600c0ed2f372da581e6bac89","modified":1660719345680},{"_id":"public/2020/01/25/miniprogrammanual/index.html","hash":"6f9668cde079ea531df200d481fb50217abfc497","modified":1660719386337},{"_id":"public/categories/小程序/index.html","hash":"94589141bf066ee6f1984996a091ccbfd75937db","modified":1660719386337},{"_id":"public/tags/小程序思维导图/index.html","hash":"d56acd0a542d274b163dd3a6ea0443e0b3b25efc","modified":1660719386337},{"_id":"source/_posts/C#grammar.md","hash":"dfe3439a9f60281f1454e38868bcaebeb77117c1","modified":1582079010852},{"_id":"source/_posts/miniprogrammanual - 副本.md","hash":"cb99f66b4dec96bf0bdb5ffcb8d3d7a3d00f51bd","modified":1582029929916},{"_id":"public/2020/02/19/C#grammar/index.html","hash":"369a25070dc32a8a00b4b12493689782f2ae00b4","modified":1582079026123},{"_id":"public/archives/2020/02/index.html","hash":"79d71c1293282edb900a2059bd0c11eb05226fd3","modified":1660719386337},{"_id":"public/categories/程序设计语言/index.html","hash":"c6a472e5a7613360a60bccb66f41c2de190df9ac","modified":1582102794220},{"_id":"public/tags/程序设计语言/index.html","hash":"f0a1781e4c099241b5c19cdd761ab2e98bbe3518","modified":1582102794220},{"_id":"source/_posts/Cgrammar.md","hash":"dfe3439a9f60281f1454e38868bcaebeb77117c1","modified":1582079084005},{"_id":"public/2020/02/19/Cgrammar/index.html","hash":"3bf683df008ad4b5ea35988da955b53ffe35f60f","modified":1582079095403},{"_id":"source/_posts/csharpgrammar.md","hash":"e8828255c9bd358bf1790bce5c5a505ba2eb01af","modified":1582101838015},{"_id":"public/2020/02/19/csharpgrammar/index.html","hash":"f501b90c38aefd1bc0f31e817b6f44c0568a5b35","modified":1582101851515},{"_id":"source/_posts/csharpgrammar-2.md","hash":"95641b1e541d7d50bb3c65e1a0a8c62d0c4a53a1","modified":1660719345676},{"_id":"source/_posts/csharpgrammar-1.md","hash":"23d1a047e2f24bb2c4576e4692fd11bac5293f99","modified":1660719345661},{"_id":"public/2020/02/19/csharpgrammar-2/index.html","hash":"36ad1623eb757f1967d3b2864900abee883c7eda","modified":1660719386337},{"_id":"public/2020/02/19/csharpgrammar-1/index.html","hash":"733878941a80c4482afa83c674b787ebcac8e94a","modified":1582120627744},{"_id":"public/tags/程序设计语言，C/index.html","hash":"9e28c6e575b8751d2292f910c8a820d002ccbbf6","modified":1660719386337},{"_id":"public/categories/C-程序设计语言/index.html","hash":"6a879f63818c20191c6ae42291ceef5a45fb296c","modified":1582114423665},{"_id":"public/categories/csharp程序设计语言/index.html","hash":"0f883af9800313cd557e06161262c17668376f30","modified":1660719386337},{"_id":"public/tags/程序设计语言，csharp/index.html","hash":"f1cd4fd358f4904a7ac41dec9d03de8a1c6c4949","modified":1582114545352},{"_id":"source/_posts/csharpgrammar-3.md","hash":"d8468b16754e7ca4a2e72ebcecd11ee688579819","modified":1660719345677},{"_id":"public/2020/02/20/csharpgrammar-3/index.html","hash":"a92f54757e4cdd65152fd58e70f063939f461c23","modified":1660719386337},{"_id":"public/2020/02/18/csharpgrammar-1/index.html","hash":"121b4dc143b45df14964c4e2ec517cb1c3cbf3c9","modified":1660719386337},{"_id":"source/_posts/csharpgrammar-4.md","hash":"b7c14844ac23c872c704ff7823c1e2ccd6a2034f","modified":1660719345677},{"_id":"public/2020/02/22/csharpgrammar-4/index.html","hash":"2cb51d163faa4a544c9236adfd410b7dc1a42699","modified":1660719386337},{"_id":"source/_posts/csharpgrammar-5.md","hash":"5c725e71c3c9dd264a4c0a788ab59fa202ee643d","modified":1660719345678},{"_id":"source/_posts/csharpgrammar-6.md","hash":"cd0bb0dddd168d2161a34a7ef3f8f283f871126d","modified":1660719345678},{"_id":"public/2020/02/25/csharpgrammar-6/index.html","hash":"cf540075fe19f70df61d4edce57031678532c358","modified":1660719386337},{"_id":"public/2020/02/24/csharpgrammar-5/index.html","hash":"c66c75ae356b1ed2bc80fe1d9be118f138954e84","modified":1660719386337},{"_id":"source/_posts/toolcollect.md","hash":"96f311e7e3e1aaf03940dc9525766763fe0d184e","modified":1660719345680},{"_id":"public/2020/02/17/toolcollect/index.html","hash":"c68c4f3b07f891a64a021d826cc423e8e068099e","modified":1660719386337},{"_id":"public/tags/工具/index.html","hash":"8b367ba5efce57dfbe75150720ad969dffefab3f","modified":1660719386337},{"_id":"public/categories/工具/index.html","hash":"b001e0cd20db718393523dacd014319c84be93c9","modified":1660719386337},{"_id":"source/_posts/csharpgrammar-7.md","hash":"524bc1b008fe3dee15a178a411bf95309d8ef2c3","modified":1660719345678},{"_id":"public/2020/02/26/csharpgrammar-7/index.html","hash":"363fbf544d20f5f7c44a90c8b376fe539c3ce017","modified":1660719386337},{"_id":"source/_posts/csharpgrammar-10.md","hash":"44072a08dee6c4b4ab4ee55cd2c8f7e4d02862f2","modified":1660719345676},{"_id":"source/_posts/csharpgrammar-8.md","hash":"6c485888690628bf590696c7e5f80257784f3c4c","modified":1660719345679},{"_id":"source/_posts/csharpgrammar-9.md","hash":"4b933a2aed284fb6dc91bbdd080619e40961e069","modified":1660719345679},{"_id":"public/2020/02/29/csharpgrammar-10/index.html","hash":"4996bf48f040db70056f6332f03e4887ca9809dc","modified":1660719386337},{"_id":"public/2020/02/28/csharpgrammar-9/index.html","hash":"4b9aa1d5e56355a34b4799ea37a68d1880d395fa","modified":1660719386337},{"_id":"public/2020/02/27/csharpgrammar-8/index.html","hash":"6f0e7ff78b98aa289dd5d014d3aaab554e47ea3a","modified":1660719386337},{"_id":"public/archives/page/2/index.html","hash":"fccc2672eac9de6e406c5f28dc8fdeb25ebbba81","modified":1660719386337},{"_id":"public/archives/2020/page/2/index.html","hash":"67a0815437775d83ce3fc85774ad24c3130997cc","modified":1660719386337},{"_id":"public/archives/2020/02/page/2/index.html","hash":"38bd1427a1994fe9fc18f5e1619fbb2cb23863b2","modified":1660719386337},{"_id":"public/page/2/index.html","hash":"87df1eb8133ac5a6409759161b563e85477213c7","modified":1660719386337},{"_id":"source/_posts/linux-install-1.md","hash":"8c9326a36704f0a453f835532d3ab4a204f7c459","modified":1660719345679},{"_id":"public/2020/03/29/linux-install-1/index.html","hash":"46f407ba2d4c62e96ef064e4357d8a9bf3cd9d16","modified":1660719386337},{"_id":"public/archives/2020/03/index.html","hash":"bc85ea3d5819f1632fbe66f00eccae1e04df35ef","modified":1660719386337},{"_id":"public/categories/linux/index.html","hash":"62a9713b9e5f44c4f2848baa17631c964f6461d0","modified":1660719386337},{"_id":"public/tags/linux/index.html","hash":"3a7985c6ba791f5ffb8c619eac74a4c39cf61228","modified":1660719386337},{"_id":"source/_posts/WPF-1.md","hash":"4777f69a01007638e54df7c95ba9c445c7ee0346","modified":1660719345660},{"_id":"source/_posts/WPF-2.md","hash":"f225680485a0dd499854c7ab2b7eb4b9355e2f71","modified":1660719345660},{"_id":"public/2020/04/18/WPF-1/index.html","hash":"24964174b0c3901118326c50dcac17870a933ad2","modified":1660719386337},{"_id":"public/categories/WPF/index.html","hash":"fd724d89633fd3d905765872629dcc5723e4171b","modified":1660719386337},{"_id":"public/archives/2020/04/index.html","hash":"4e32ea15ab0ee8935678afc30474680f82638701","modified":1660719386337},{"_id":"public/tags/WPF/index.html","hash":"b712cf2e5a7f803a5c9aa8fe4501e836418f112f","modified":1660719386337},{"_id":"public/2020/04/18/WPF-2/index.html","hash":"d8242aeb5b233492de3bcc6a0aa6bdafe686885d","modified":1587216531977},{"_id":"source/_posts/WPF-3.md","hash":"c5a6bf730aee1a4aa1d5e94e2ceb30131b93baf1","modified":1660719345661},{"_id":"public/archives/2020/07/index.html","hash":"35ec93b4e83f99bf8aacb228b9f11fb14b3d9fd1","modified":1660719386337},{"_id":"public/2020/07/19/WPF-3/index.html","hash":"fb5e0a592a761c6d4a56fd7599c6877cd9f296f7","modified":1660719386337},{"_id":"public/2020/04/19/WPF-2/index.html","hash":"b7c3d2ab4828e097bae4f8ba42fe87df0d6a5f4e","modified":1660719386337},{"_id":"source/_posts/WPF-4.md","hash":"cd6395e33792f442ff0c68d833450ab7e1df5eaf","modified":1660719345661},{"_id":"public/2020/07/25/WPF-4/index.html","hash":"2cff1da648f9641c2794234937783db03e25ef96","modified":1660719386337},{"_id":"source/_posts/WPF-5.md","hash":"e666b4a8347fae02b4d16c7083b0f87ddb5f5435","modified":1660719345661},{"_id":"public/2020/07/26/WPF-5/index.html","hash":"ed6f6e8ed2b70c7cdfbfdbe9d7635a642635c5d4","modified":1660719386337},{"_id":"source/_posts/math-1.md","hash":"af026e9242c936db2159bfe04b7476653b441920","modified":1660717466851},{"_id":"public/2022/08/17/math-1/index.html","hash":"d0283a0b5794fa7c592042283295d81b3af87b0a","modified":1660719386337},{"_id":"public/archives/2022/index.html","hash":"d3ecfac881e5a9e04c590a0eee4711421eb4fa8a","modified":1660719386337},{"_id":"public/archives/2022/08/index.html","hash":"dfa0f93005d15f40b902ff7a82df022ee883035a","modified":1660719386337},{"_id":"public/categories/数学趣味题/index.html","hash":"cda030d8ab99ae939f187c31ebb3929a30932663","modified":1660719386337},{"_id":"public/tags/数学趣味题/index.html","hash":"b7ac29072a37596cd29a05d3441fe1a4775186a9","modified":1660719386337}],"Category":[{"name":"技术","_id":"ck5p3b9qe00007svq7fuzbk4x"},{"name":"技术1","_id":"ck5qt1l4i0000zcri6xdkebil"},{"name":"小程序","_id":"ck5t88gqa0001rwribu4g3scw"},{"name":"开篇","_id":"ck5t88gzd0005rwrihqgc0z79"},{"name":"程序设计语言","_id":"ck6soixn60002d0ri1rk54uzy"},{"name":"C#程序设计语言","_id":"ck6ta05dn00048kri1yui7u0b"},{"name":"csharp程序设计语言","_id":"ck6ta3wza00003griag6r8b8x"},{"name":"工具","_id":"ck70h2q78000178ri4qhc2w4k"},{"name":"linux","_id":"ck8cogg4v0001dctx577k8vz7"},{"name":"WPF","_id":"ck94yu0ef00017wtxfa4q8usq"},{"name":"数学趣味题","_id":"cl6x9g2ql00017ovq9bjrdw4q"}],"Data":[],"Page":[{"title":"categories","date":"2020-01-22T08:54:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-01-22 16:54:04\ntype: \"categories\"\n---\n","updated":"2020-01-22T09:47:29.280Z","path":"categories/index.html","_id":"ck5p2mbvn00008cvq96h20t1a","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2020-01-22T09:01:17.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-01-22 17:01:17\ntype: \"about\"\n---\n","updated":"2020-01-23T14:06:34.574Z","path":"about/index.html","_id":"ck5p2w6mt0000y0vqgldp137i","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-01-22T09:01:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-01-22 17:01:25\ntype: \"tags\"\n---\n","updated":"2020-01-22T09:47:29.280Z","path":"tags/index.html","_id":"ck5p2w6my0001y0vqe18kfgn6","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"小程序思维导图","photos":["https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg"],"date":"2020-01-25T06:38:11.000Z","_content":"小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验\n主要介绍小程序开发的一些概念和基础知识，以思维导图的方式呈现。<!-- more -->\n## 起步\n![起步](https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg)\n## 组件\n![组件](https://pic1.zhimg.com/80/v2-dd875a506832356962356206bbca33fc_hd.jpg)\n## 模板和样式\n![模板和样式](https://pic4.zhimg.com/80/v2-a284f0e127881dfc99c4a812cd3455cb_hd.jpg)\n## 组件间通信与事件\n![组件间通信与事件](https://pic4.zhimg.com/80/v2-ef04fce11cac4efed60d7024c3eaf0ef_hd.jpg)\n## 组件生命周期\n![组件生命周期](https://pic1.zhimg.com/80/v2-4c0a75fbe17123068259613ee2decbc4_hd.jpg)\n## behaviors\n![behaviors](https://pic4.zhimg.com/80/v2-f41b0b47c609975d51b8afc888deb5c3_hd.jpg)\n## 组件间的关系\n![组件间的关系](https://pic2.zhimg.com/80/v2-a06d92b6e39b8ed74ef8fee0d6ff63e5_hd.jpg)\n## 数据监听器\n![数据监听器](https://pic1.zhimg.com/80/v2-11047cef626987a57aaaa4e51ab22ee8_hd.jpg)\n## 纯数据字段\n![纯数据字段](https://pic3.zhimg.com/80/v2-a455075b194d83ea80bc4193edc703b6_hd.jpg)\n## 抽象节点\n![纯数据字段](https://pic3.zhimg.com/80/v2-25fa42167805b7a6507250a43e8cdd9e_hd.jpg)\n## 组件扩展\n![组件扩展](https://pic4.zhimg.com/80/v2-b7d8f57aec1269fa233d02872ecf462f_hd.jpg)\n## 小技巧\n![小技巧](https://pic1.zhimg.com/80/v2-8bea8d746829de756bb5895ceb2a20ac_hd.jpg)\n## 插件\n![插件](https://pic1.zhimg.com/80/v2-6527291f3979667154bdd1100f77442c_hd.jpg)","source":"_posts/miniprogrammanual.md","raw":"---\ntitle: 小程序思维导图\nphotos: https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg\ndate: 2020-01-25 14:38:11\ntags: [小程序思维导图]\ncategories: 小程序\n---\n小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验\n主要介绍小程序开发的一些概念和基础知识，以思维导图的方式呈现。<!-- more -->\n## 起步\n![起步](https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg)\n## 组件\n![组件](https://pic1.zhimg.com/80/v2-dd875a506832356962356206bbca33fc_hd.jpg)\n## 模板和样式\n![模板和样式](https://pic4.zhimg.com/80/v2-a284f0e127881dfc99c4a812cd3455cb_hd.jpg)\n## 组件间通信与事件\n![组件间通信与事件](https://pic4.zhimg.com/80/v2-ef04fce11cac4efed60d7024c3eaf0ef_hd.jpg)\n## 组件生命周期\n![组件生命周期](https://pic1.zhimg.com/80/v2-4c0a75fbe17123068259613ee2decbc4_hd.jpg)\n## behaviors\n![behaviors](https://pic4.zhimg.com/80/v2-f41b0b47c609975d51b8afc888deb5c3_hd.jpg)\n## 组件间的关系\n![组件间的关系](https://pic2.zhimg.com/80/v2-a06d92b6e39b8ed74ef8fee0d6ff63e5_hd.jpg)\n## 数据监听器\n![数据监听器](https://pic1.zhimg.com/80/v2-11047cef626987a57aaaa4e51ab22ee8_hd.jpg)\n## 纯数据字段\n![纯数据字段](https://pic3.zhimg.com/80/v2-a455075b194d83ea80bc4193edc703b6_hd.jpg)\n## 抽象节点\n![纯数据字段](https://pic3.zhimg.com/80/v2-25fa42167805b7a6507250a43e8cdd9e_hd.jpg)\n## 组件扩展\n![组件扩展](https://pic4.zhimg.com/80/v2-b7d8f57aec1269fa233d02872ecf462f_hd.jpg)\n## 小技巧\n![小技巧](https://pic1.zhimg.com/80/v2-8bea8d746829de756bb5895ceb2a20ac_hd.jpg)\n## 插件\n![插件](https://pic1.zhimg.com/80/v2-6527291f3979667154bdd1100f77442c_hd.jpg)","slug":"miniprogrammanual","published":1,"updated":"2022-08-17T06:55:45.680Z","_id":"ck6soqjzl0000qkrifj0f8ar4","comments":1,"layout":"post","link":"","content":"<p>小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验<br>主要介绍小程序开发的一些概念和基础知识，以思维导图的方式呈现。<a id=\"more\"></a></p>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p><img src=\"https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg\" alt=\"起步\"></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p><img src=\"https://pic1.zhimg.com/80/v2-dd875a506832356962356206bbca33fc_hd.jpg\" alt=\"组件\"></p>\n<h2 id=\"模板和样式\"><a href=\"#模板和样式\" class=\"headerlink\" title=\"模板和样式\"></a>模板和样式</h2><p><img src=\"https://pic4.zhimg.com/80/v2-a284f0e127881dfc99c4a812cd3455cb_hd.jpg\" alt=\"模板和样式\"></p>\n<h2 id=\"组件间通信与事件\"><a href=\"#组件间通信与事件\" class=\"headerlink\" title=\"组件间通信与事件\"></a>组件间通信与事件</h2><p><img src=\"https://pic4.zhimg.com/80/v2-ef04fce11cac4efed60d7024c3eaf0ef_hd.jpg\" alt=\"组件间通信与事件\"></p>\n<h2 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h2><p><img src=\"https://pic1.zhimg.com/80/v2-4c0a75fbe17123068259613ee2decbc4_hd.jpg\" alt=\"组件生命周期\"></p>\n<h2 id=\"behaviors\"><a href=\"#behaviors\" class=\"headerlink\" title=\"behaviors\"></a>behaviors</h2><p><img src=\"https://pic4.zhimg.com/80/v2-f41b0b47c609975d51b8afc888deb5c3_hd.jpg\" alt=\"behaviors\"></p>\n<h2 id=\"组件间的关系\"><a href=\"#组件间的关系\" class=\"headerlink\" title=\"组件间的关系\"></a>组件间的关系</h2><p><img src=\"https://pic2.zhimg.com/80/v2-a06d92b6e39b8ed74ef8fee0d6ff63e5_hd.jpg\" alt=\"组件间的关系\"></p>\n<h2 id=\"数据监听器\"><a href=\"#数据监听器\" class=\"headerlink\" title=\"数据监听器\"></a>数据监听器</h2><p><img src=\"https://pic1.zhimg.com/80/v2-11047cef626987a57aaaa4e51ab22ee8_hd.jpg\" alt=\"数据监听器\"></p>\n<h2 id=\"纯数据字段\"><a href=\"#纯数据字段\" class=\"headerlink\" title=\"纯数据字段\"></a>纯数据字段</h2><p><img src=\"https://pic3.zhimg.com/80/v2-a455075b194d83ea80bc4193edc703b6_hd.jpg\" alt=\"纯数据字段\"></p>\n<h2 id=\"抽象节点\"><a href=\"#抽象节点\" class=\"headerlink\" title=\"抽象节点\"></a>抽象节点</h2><p><img src=\"https://pic3.zhimg.com/80/v2-25fa42167805b7a6507250a43e8cdd9e_hd.jpg\" alt=\"纯数据字段\"></p>\n<h2 id=\"组件扩展\"><a href=\"#组件扩展\" class=\"headerlink\" title=\"组件扩展\"></a>组件扩展</h2><p><img src=\"https://pic4.zhimg.com/80/v2-b7d8f57aec1269fa233d02872ecf462f_hd.jpg\" alt=\"组件扩展\"></p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><p><img src=\"https://pic1.zhimg.com/80/v2-8bea8d746829de756bb5895ceb2a20ac_hd.jpg\" alt=\"小技巧\"></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p><img src=\"https://pic1.zhimg.com/80/v2-6527291f3979667154bdd1100f77442c_hd.jpg\" alt=\"插件\"></p>\n","site":{"data":{}},"excerpt":"<p>小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验<br>主要介绍小程序开发的一些概念和基础知识，以思维导图的方式呈现。","more":"</p>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p><img src=\"https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg\" alt=\"起步\"></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p><img src=\"https://pic1.zhimg.com/80/v2-dd875a506832356962356206bbca33fc_hd.jpg\" alt=\"组件\"></p>\n<h2 id=\"模板和样式\"><a href=\"#模板和样式\" class=\"headerlink\" title=\"模板和样式\"></a>模板和样式</h2><p><img src=\"https://pic4.zhimg.com/80/v2-a284f0e127881dfc99c4a812cd3455cb_hd.jpg\" alt=\"模板和样式\"></p>\n<h2 id=\"组件间通信与事件\"><a href=\"#组件间通信与事件\" class=\"headerlink\" title=\"组件间通信与事件\"></a>组件间通信与事件</h2><p><img src=\"https://pic4.zhimg.com/80/v2-ef04fce11cac4efed60d7024c3eaf0ef_hd.jpg\" alt=\"组件间通信与事件\"></p>\n<h2 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h2><p><img src=\"https://pic1.zhimg.com/80/v2-4c0a75fbe17123068259613ee2decbc4_hd.jpg\" alt=\"组件生命周期\"></p>\n<h2 id=\"behaviors\"><a href=\"#behaviors\" class=\"headerlink\" title=\"behaviors\"></a>behaviors</h2><p><img src=\"https://pic4.zhimg.com/80/v2-f41b0b47c609975d51b8afc888deb5c3_hd.jpg\" alt=\"behaviors\"></p>\n<h2 id=\"组件间的关系\"><a href=\"#组件间的关系\" class=\"headerlink\" title=\"组件间的关系\"></a>组件间的关系</h2><p><img src=\"https://pic2.zhimg.com/80/v2-a06d92b6e39b8ed74ef8fee0d6ff63e5_hd.jpg\" alt=\"组件间的关系\"></p>\n<h2 id=\"数据监听器\"><a href=\"#数据监听器\" class=\"headerlink\" title=\"数据监听器\"></a>数据监听器</h2><p><img src=\"https://pic1.zhimg.com/80/v2-11047cef626987a57aaaa4e51ab22ee8_hd.jpg\" alt=\"数据监听器\"></p>\n<h2 id=\"纯数据字段\"><a href=\"#纯数据字段\" class=\"headerlink\" title=\"纯数据字段\"></a>纯数据字段</h2><p><img src=\"https://pic3.zhimg.com/80/v2-a455075b194d83ea80bc4193edc703b6_hd.jpg\" alt=\"纯数据字段\"></p>\n<h2 id=\"抽象节点\"><a href=\"#抽象节点\" class=\"headerlink\" title=\"抽象节点\"></a>抽象节点</h2><p><img src=\"https://pic3.zhimg.com/80/v2-25fa42167805b7a6507250a43e8cdd9e_hd.jpg\" alt=\"纯数据字段\"></p>\n<h2 id=\"组件扩展\"><a href=\"#组件扩展\" class=\"headerlink\" title=\"组件扩展\"></a>组件扩展</h2><p><img src=\"https://pic4.zhimg.com/80/v2-b7d8f57aec1269fa233d02872ecf462f_hd.jpg\" alt=\"组件扩展\"></p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><p><img src=\"https://pic1.zhimg.com/80/v2-8bea8d746829de756bb5895ceb2a20ac_hd.jpg\" alt=\"小技巧\"></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p><img src=\"https://pic1.zhimg.com/80/v2-6527291f3979667154bdd1100f77442c_hd.jpg\" alt=\"插件\"></p>"},{"title":"C#关键字","date":"2020-02-17T16:00:00.000Z","_content":"参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\nC#发布于2000年6月，（读作“See Sharp”）是一种简单易用的新式编程语言，不仅面向对象，还类型安全。 C#源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。<!-- more -->\n## <span style=\"color:#0366d6;\">关键字</span> \n\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">abstract</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">as</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">bool</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">break</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">byte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">case</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">catch</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">checked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">const</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">continue</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">decimal</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">default</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">delegate</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">do</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">double</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">else</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">enum</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">event</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">explicit</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">extern</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">finally</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">fixed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">float</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">for</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">foreach</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">goto</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">if</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">implicit</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">in</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">int</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">internal</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">is</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">lock</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">long</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">namespace</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">new</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">null</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">object</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">operator</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">out</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">override</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">params</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">private</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">readonly</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ref</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">return</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sbyte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sealed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">short</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sizeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">stackalloc</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">string</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">switch</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">this</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">throw</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">true</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">try</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">typeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">uint</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ulong</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unchecked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unsafe</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ushort</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">virtual</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">void</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">volatile</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">while</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">上下文关键字</span>  \n \n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">add</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">ascending</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">async</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">await</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">by</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">descending</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">dynamic</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">equals</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">from</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">get</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">global</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">group</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">into</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">join</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">let</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">nameof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">on</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">orderby</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">partial（类型）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">partial（方法）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">remove</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">select</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">set</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">unmanaged（泛型类型约束）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">value</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">var</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">when（筛选条件）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">where（泛型类型约束）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">\twhere（查询子句）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">yield</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">运算符</span> \n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">运算符</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别或名称</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x.y、x?.y、x?[y]、f(x)、a[i]、x++、x--、new、typeof、checked、unchecked、default、nameof、delegate、sizeof、stackalloc、x->y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">基本</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">+x、-x、!x、~x、++x、--x、^x、(T)x、await、&x、*x、true 和 false</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">一元</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x..y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">范围</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x * y、x / y、x % y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">乘法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x + y、x – y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">加法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x < y、x > y、x <= y、x >= y、is、as</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">关系和类型测试</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x == y、x != y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">相等</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x & y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 AND 或按位逻辑 AND</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x ^ y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 XOR 或按位逻辑 XOR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x | y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 OR 或按位逻辑 OR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x && y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“与”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x || y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“或”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">c ? t : f/td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件运算符</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x = y、x += y、x -= y、x *= y、x /= y、x %= y、x &= y、x |= y、x ^= y、x <<= y、x >>= y、x ??= y、=></td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">赋值和 lambda 声明</td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">语句</span>\n\n>程序执行的操作采用语句表达。 常见操作包括声明变量、赋值、调用方法、循环访问集合，以及根据给定条件分支到一个或另一个代码块。 语句在程序中的执行顺序称为“控制流”或“执行流”。 根据程序对运行时所收到的输入的响应，在程序每次运行时控制流可能有所不同。\n语句可以是以分号结尾的单行代码，也可以是语句块中的一系列单行语句。 语句块括在括号 {} 中，并且可以包含嵌套块。\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">C# 关键字/说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">声明语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">声明语句引入新的变量或常量。 变量声明可以选择为变量赋值。 在常量声明中必须赋值。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">表达式语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">用于计算值的表达式语句必须在变量中存储该值。 有关详细信息，请参阅表达式语句。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">选择语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">选择语句用于根据一个或多个指定条件分支到不同的代码段。 有关详细信息，请参阅下列主题：if else switch case</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">迭代语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代语句用于遍历集合（如数组），或重复执行同一组语句直到满足指定的条件。 有关详细信息，请参阅下列主题：do for foreach in while</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">跳转语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">跳转语句将控制转移给另一代码段。 有关详细信息，请参阅下列主题：break continue default goto return yield</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">异常处理语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">异常处理语句用于从运行时发生的异常情况正常恢复。 有关详细信息，请参阅下列主题：throw try-catch try-finally try-catch-finally</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">Checked 和 unchecked</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">Checked 和 unchecked 语句用于指定将结果存储在变量中、但该变量过小而不能容纳结果值时，是否允许数值运算导致溢出。 有关详细信息，请参阅 checked 和 unchecked。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">await 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">如果用 async 修饰符标记方法，则可以使用该方法中的 await 运算符。 在控制到达异步方法的 await 表达式时，控制将返回到调用方，该方法中的进程将挂起，直到等待的任务完成为止。 任务完成后，可以在方法中恢复执行。\n\n有关简单示例，请参阅方法的“异步方法”一节。 有关详细信息，请参阅 async 和 await 的异步编程</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">yield return 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代器对集合执行自定义迭代，如列表或数组。 迭代器使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器时，将从该位置重新开始执行。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">fixed 语句\t</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">fixed 语句禁止垃圾回收器重定位可移动的变量。 有关详细信息，请参阅 fixed。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">lock 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">lock 语句用于限制一次仅允许一个线程访问代码块。 有关详细信息，请参阅 lock。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">带标签的语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">可以为语句指定一个标签，然后使用 goto 关键字跳转到该带标签的语句。 （参见下一行中的示例。）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">空语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">空语句只含一个分号。 不执行任何操作，可以在需要语句但不需要执行任何操作的地方使用。</td>\n</tr>\n</table>\n<details>\n<summary>展开查看</summary>\n<pre><code>\n\n局部变量声明 \n```csharp\nstatic void Declarations(string[] args)\n{\n    int a;\n    int b = 2, c = 3;\n    a = 1;\n    Console.WriteLine(a + b + c);\n}\n```\n局部常量声明\n```csharp\nstatic void ConstantDeclarations(string[] args)\n{\n    const float pi = 3.1415927f;\n    const int r = 25;\n    Console.WriteLine(pi * r * r);\n}\n```\n表达式语句\n```csharp\nstatic void IfStatement(string[] args)\n{\n    if (args.Length == 0)\n    {\n        Console.WriteLine(\"No arguments\");\n    }\n    else \n    {\n        Console.WriteLine(\"One or more arguments\");\n    }\n}\n```\nif 语句\n```csharp\nstatic void ConstantDeclarations(string[] args)\n{\n    const float pi = 3.1415927f;\n    const int r = 25;\n    Console.WriteLine(pi * r * r);\n}\n```\nswitch 语句\n```csharp\nstatic void SwitchStatement(string[] args)\n{\n    int n = args.Length;\n    switch (n) \n    {\n        case 0:\n            Console.WriteLine(\"No arguments\");\n            break;\n        case 1:\n            Console.WriteLine(\"One argument\");\n            break;\n        default:\n            Console.WriteLine($\"{n} arguments\");\n            break;\n    }\n}\n```\nwhile 语句\n```csharp\nstatic void WhileStatement(string[] args)\n{\n    int i = 0;\n    while (i < args.Length) \n    {\n        Console.WriteLine(args[i]);\n        i++;\n    }\n}\n```\ndo 语句\n```csharp\nstatic void DoStatement(string[] args)\n{\n    string s;\n    do \n    {\n        s = Console.ReadLine();\n        Console.WriteLine(s);\n    } while (!string.IsNullOrEmpty(s));\n}\n```\nfor 语句\n```csharp\nstatic void ForStatement(string[] args)\n{\n    for (int i = 0; i < args.Length; i++) \n    {\n        Console.WriteLine(args[i]);\n    }\n}\n```\nforeach 语句\n```csharp\nstatic void ForEachStatement(string[] args)\n{\n    foreach (string s in args) \n    {\n        Console.WriteLine(s);\n    }\n}\n```\ncontinue 语句\n```csharp\nstatic void ContinueStatement(string[] args)\n{\n    for (int i = 0; i < args.Length; i++) \n    {\n        if (args[i].StartsWith(\"/\")) \n            continue;\n        Console.WriteLine(args[i]);\n    }\n}\n```\ngoto 语句\n```csharp\nstatic void GoToStatement(string[] args)\n{\n    int i = 0;\n    goto check;\n    loop:\n    Console.WriteLine(args[i++]);\n    check:\n    if (i < args.Length) \n        goto loop;\n}\n```\nreturn 语句\n```csharp\nstatic int Add(int a, int b) \n{\n    return a + b;\n}\nstatic void ReturnStatement(string[] args)\n{\n   Console.WriteLine(Add(1, 2));\n   return;\n}\n```\nyield 语句\n```csharp\nstatic System.Collections.Generic.IEnumerable<int> Range(int start, int end) \n{\n    for (int i = start; i < end; i++) \n    {\n        yield return i;\n    }\n    yield break;\n}\nstatic void YieldStatement(string[] args)\n{\n    foreach (int i in Range(-10,10)) \n    {\n        Console.WriteLine(i);\n    }\n}\n```\nthrow 和 try 语句\n```csharp\nstatic double Divide(double x, double y) \n{\n    if (y == 0) \n        throw new DivideByZeroException();\n    return x / y;\n}\nstatic void TryCatch(string[] args) \n{\n    try \n    {\n        if (args.Length != 2) \n        {\n            throw new InvalidOperationException(\"Two numbers required\");\n        }\n        double x = double.Parse(args[0]);\n        double y = double.Parse(args[1]);\n        Console.WriteLine(Divide(x, y));\n    }\n    catch (InvalidOperationException e) \n    {\n        Console.WriteLine(e.Message);\n    }\n    finally \n    {\n        Console.WriteLine(\"Good bye!\");\n    }\n}\n```\nchecked 和 unchecked 语句\n```csharp\nstatic void CheckedUnchecked(string[] args) \n{\n    int x = int.MaxValue;\n    unchecked \n    {\n        Console.WriteLine(x + 1);  // Overflow\n    }\n    checked \n    {\n        Console.WriteLine(x + 1);  // Exception\n    }     \n}\n```\nlock 语句\n```csharp\nclass Account\n{\n    decimal balance;\n    private readonly object sync = new object();\n    public void Withdraw(decimal amount) \n    {\n        lock (sync) \n        {\n            if (amount > balance) \n            {\n                throw new Exception(\n                    \"Insufficient funds\");\n            }\n            balance -= amount;\n        }\n    }\n}\n```\nusing 语句\n```csharp\nstatic void UsingStatement(string[] args) \n{\n    using (TextWriter w = File.CreateText(\"test.txt\")) \n    {\n        w.WriteLine(\"Line one\");\n        w.WriteLine(\"Line two\");\n        w.WriteLine(\"Line three\");\n    }\n}\n```\n</code></pre>\n</details>\n","source":"_posts/csharpgrammar-1.md","raw":"---\ntitle: C#关键字\ndate: 2020-02-18\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\nC#发布于2000年6月，（读作“See Sharp”）是一种简单易用的新式编程语言，不仅面向对象，还类型安全。 C#源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。<!-- more -->\n## <span style=\"color:#0366d6;\">关键字</span> \n\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">abstract</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">as</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">bool</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">break</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">byte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">case</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">catch</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">checked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">const</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">continue</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">decimal</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">default</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">delegate</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">do</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">double</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">else</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">enum</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">event</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">explicit</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">extern</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">finally</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">fixed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">float</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">for</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">foreach</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">goto</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">if</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">implicit</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">in</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">int</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">internal</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">is</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">lock</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">long</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">namespace</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">new</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">null</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">object</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">operator</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">out</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">override</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">params</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">private</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">readonly</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ref</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">return</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sbyte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sealed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">short</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sizeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">stackalloc</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">string</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">switch</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">this</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">throw</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">true</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">try</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">typeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">uint</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ulong</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unchecked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unsafe</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ushort</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">virtual</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">void</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">volatile</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">while</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">上下文关键字</span>  \n \n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">add</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">ascending</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">async</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">await</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">by</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">descending</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">dynamic</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">equals</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">from</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">get</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">global</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">group</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">into</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">join</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">let</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">nameof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">on</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">orderby</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">partial（类型）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">partial（方法）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">remove</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">select</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">set</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">unmanaged（泛型类型约束）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">value</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">var</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">when（筛选条件）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">where（泛型类型约束）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">\twhere（查询子句）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">yield</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">运算符</span> \n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">运算符</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别或名称</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x.y、x?.y、x?[y]、f(x)、a[i]、x++、x--、new、typeof、checked、unchecked、default、nameof、delegate、sizeof、stackalloc、x->y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">基本</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">+x、-x、!x、~x、++x、--x、^x、(T)x、await、&x、*x、true 和 false</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">一元</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x..y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">范围</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x * y、x / y、x % y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">乘法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x + y、x – y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">加法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x < y、x > y、x <= y、x >= y、is、as</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">关系和类型测试</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x == y、x != y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">相等</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x & y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 AND 或按位逻辑 AND</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x ^ y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 XOR 或按位逻辑 XOR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x | y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 OR 或按位逻辑 OR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x && y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“与”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x || y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“或”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">c ? t : f/td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件运算符</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x = y、x += y、x -= y、x *= y、x /= y、x %= y、x &= y、x |= y、x ^= y、x <<= y、x >>= y、x ??= y、=></td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">赋值和 lambda 声明</td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">语句</span>\n\n>程序执行的操作采用语句表达。 常见操作包括声明变量、赋值、调用方法、循环访问集合，以及根据给定条件分支到一个或另一个代码块。 语句在程序中的执行顺序称为“控制流”或“执行流”。 根据程序对运行时所收到的输入的响应，在程序每次运行时控制流可能有所不同。\n语句可以是以分号结尾的单行代码，也可以是语句块中的一系列单行语句。 语句块括在括号 {} 中，并且可以包含嵌套块。\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">C# 关键字/说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">声明语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">声明语句引入新的变量或常量。 变量声明可以选择为变量赋值。 在常量声明中必须赋值。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">表达式语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">用于计算值的表达式语句必须在变量中存储该值。 有关详细信息，请参阅表达式语句。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">选择语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">选择语句用于根据一个或多个指定条件分支到不同的代码段。 有关详细信息，请参阅下列主题：if else switch case</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">迭代语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代语句用于遍历集合（如数组），或重复执行同一组语句直到满足指定的条件。 有关详细信息，请参阅下列主题：do for foreach in while</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">跳转语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">跳转语句将控制转移给另一代码段。 有关详细信息，请参阅下列主题：break continue default goto return yield</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">异常处理语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">异常处理语句用于从运行时发生的异常情况正常恢复。 有关详细信息，请参阅下列主题：throw try-catch try-finally try-catch-finally</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">Checked 和 unchecked</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">Checked 和 unchecked 语句用于指定将结果存储在变量中、但该变量过小而不能容纳结果值时，是否允许数值运算导致溢出。 有关详细信息，请参阅 checked 和 unchecked。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">await 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">如果用 async 修饰符标记方法，则可以使用该方法中的 await 运算符。 在控制到达异步方法的 await 表达式时，控制将返回到调用方，该方法中的进程将挂起，直到等待的任务完成为止。 任务完成后，可以在方法中恢复执行。\n\n有关简单示例，请参阅方法的“异步方法”一节。 有关详细信息，请参阅 async 和 await 的异步编程</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">yield return 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代器对集合执行自定义迭代，如列表或数组。 迭代器使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器时，将从该位置重新开始执行。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">fixed 语句\t</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">fixed 语句禁止垃圾回收器重定位可移动的变量。 有关详细信息，请参阅 fixed。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">lock 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">lock 语句用于限制一次仅允许一个线程访问代码块。 有关详细信息，请参阅 lock。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">带标签的语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">可以为语句指定一个标签，然后使用 goto 关键字跳转到该带标签的语句。 （参见下一行中的示例。）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">空语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">空语句只含一个分号。 不执行任何操作，可以在需要语句但不需要执行任何操作的地方使用。</td>\n</tr>\n</table>\n<details>\n<summary>展开查看</summary>\n<pre><code>\n\n局部变量声明 \n```csharp\nstatic void Declarations(string[] args)\n{\n    int a;\n    int b = 2, c = 3;\n    a = 1;\n    Console.WriteLine(a + b + c);\n}\n```\n局部常量声明\n```csharp\nstatic void ConstantDeclarations(string[] args)\n{\n    const float pi = 3.1415927f;\n    const int r = 25;\n    Console.WriteLine(pi * r * r);\n}\n```\n表达式语句\n```csharp\nstatic void IfStatement(string[] args)\n{\n    if (args.Length == 0)\n    {\n        Console.WriteLine(\"No arguments\");\n    }\n    else \n    {\n        Console.WriteLine(\"One or more arguments\");\n    }\n}\n```\nif 语句\n```csharp\nstatic void ConstantDeclarations(string[] args)\n{\n    const float pi = 3.1415927f;\n    const int r = 25;\n    Console.WriteLine(pi * r * r);\n}\n```\nswitch 语句\n```csharp\nstatic void SwitchStatement(string[] args)\n{\n    int n = args.Length;\n    switch (n) \n    {\n        case 0:\n            Console.WriteLine(\"No arguments\");\n            break;\n        case 1:\n            Console.WriteLine(\"One argument\");\n            break;\n        default:\n            Console.WriteLine($\"{n} arguments\");\n            break;\n    }\n}\n```\nwhile 语句\n```csharp\nstatic void WhileStatement(string[] args)\n{\n    int i = 0;\n    while (i < args.Length) \n    {\n        Console.WriteLine(args[i]);\n        i++;\n    }\n}\n```\ndo 语句\n```csharp\nstatic void DoStatement(string[] args)\n{\n    string s;\n    do \n    {\n        s = Console.ReadLine();\n        Console.WriteLine(s);\n    } while (!string.IsNullOrEmpty(s));\n}\n```\nfor 语句\n```csharp\nstatic void ForStatement(string[] args)\n{\n    for (int i = 0; i < args.Length; i++) \n    {\n        Console.WriteLine(args[i]);\n    }\n}\n```\nforeach 语句\n```csharp\nstatic void ForEachStatement(string[] args)\n{\n    foreach (string s in args) \n    {\n        Console.WriteLine(s);\n    }\n}\n```\ncontinue 语句\n```csharp\nstatic void ContinueStatement(string[] args)\n{\n    for (int i = 0; i < args.Length; i++) \n    {\n        if (args[i].StartsWith(\"/\")) \n            continue;\n        Console.WriteLine(args[i]);\n    }\n}\n```\ngoto 语句\n```csharp\nstatic void GoToStatement(string[] args)\n{\n    int i = 0;\n    goto check;\n    loop:\n    Console.WriteLine(args[i++]);\n    check:\n    if (i < args.Length) \n        goto loop;\n}\n```\nreturn 语句\n```csharp\nstatic int Add(int a, int b) \n{\n    return a + b;\n}\nstatic void ReturnStatement(string[] args)\n{\n   Console.WriteLine(Add(1, 2));\n   return;\n}\n```\nyield 语句\n```csharp\nstatic System.Collections.Generic.IEnumerable<int> Range(int start, int end) \n{\n    for (int i = start; i < end; i++) \n    {\n        yield return i;\n    }\n    yield break;\n}\nstatic void YieldStatement(string[] args)\n{\n    foreach (int i in Range(-10,10)) \n    {\n        Console.WriteLine(i);\n    }\n}\n```\nthrow 和 try 语句\n```csharp\nstatic double Divide(double x, double y) \n{\n    if (y == 0) \n        throw new DivideByZeroException();\n    return x / y;\n}\nstatic void TryCatch(string[] args) \n{\n    try \n    {\n        if (args.Length != 2) \n        {\n            throw new InvalidOperationException(\"Two numbers required\");\n        }\n        double x = double.Parse(args[0]);\n        double y = double.Parse(args[1]);\n        Console.WriteLine(Divide(x, y));\n    }\n    catch (InvalidOperationException e) \n    {\n        Console.WriteLine(e.Message);\n    }\n    finally \n    {\n        Console.WriteLine(\"Good bye!\");\n    }\n}\n```\nchecked 和 unchecked 语句\n```csharp\nstatic void CheckedUnchecked(string[] args) \n{\n    int x = int.MaxValue;\n    unchecked \n    {\n        Console.WriteLine(x + 1);  // Overflow\n    }\n    checked \n    {\n        Console.WriteLine(x + 1);  // Exception\n    }     \n}\n```\nlock 语句\n```csharp\nclass Account\n{\n    decimal balance;\n    private readonly object sync = new object();\n    public void Withdraw(decimal amount) \n    {\n        lock (sync) \n        {\n            if (amount > balance) \n            {\n                throw new Exception(\n                    \"Insufficient funds\");\n            }\n            balance -= amount;\n        }\n    }\n}\n```\nusing 语句\n```csharp\nstatic void UsingStatement(string[] args) \n{\n    using (TextWriter w = File.CreateText(\"test.txt\")) \n    {\n        w.WriteLine(\"Line one\");\n        w.WriteLine(\"Line two\");\n        w.WriteLine(\"Line three\");\n    }\n}\n```\n</code></pre>\n</details>\n","slug":"csharpgrammar-1","published":1,"updated":"2022-08-17T06:55:45.661Z","_id":"ck6t31wmr0003j0rickq2cqvb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a><br>C#发布于2000年6月，（读作“See Sharp”）是一种简单易用的新式编程语言，不仅面向对象，还类型安全。 C#源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。<a id=\"more\"></a></p>\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a><span style=\"color:#0366d6;\">关键字</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">abstract</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">as</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">bool</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">break</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">byte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">case</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">catch</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">checked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">const</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">continue</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">decimal</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">default</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">delegate</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">do</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">double</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">else</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">enum</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">event</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">explicit</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">extern</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">finally</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">fixed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">float</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">for</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">foreach</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">goto</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">if</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">implicit</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">in</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">int</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">internal</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">is</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">lock</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">long</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">namespace</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">new</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">null</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">object</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">operator</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">out</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">override</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">params</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">private</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">readonly</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ref</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">return</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sbyte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sealed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">short</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sizeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">stackalloc</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">string</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">switch</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">this</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">throw</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">true</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">try</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">typeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">uint</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ulong</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unchecked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unsafe</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ushort</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">virtual</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">void</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">volatile</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">while</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n<h2 id=\"上下文关键字\"><a href=\"#上下文关键字\" class=\"headerlink\" title=\"上下文关键字\"></a><span style=\"color:#0366d6;\">上下文关键字</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">add</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">ascending</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">async</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">await</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">by</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">descending</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">dynamic</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">equals</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">from</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">get</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">global</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">group</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">into</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">join</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">let</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">nameof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">on</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">orderby</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">partial（类型）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">partial（方法）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">remove</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">select</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">set</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">unmanaged（泛型类型约束）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">value</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">var</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">when（筛选条件）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">where（泛型类型约束）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">    where（查询子句）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">yield</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a><span style=\"color:#0366d6;\">运算符</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">运算符</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别或名称</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x.y、x?.y、x?[y]、f(x)、a[i]、x++、x--、new、typeof、checked、unchecked、default、nameof、delegate、sizeof、stackalloc、x->y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">基本</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">+x、-x、!x、~x、++x、--x、^x、(T)x、await、&x、*x、true 和 false</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">一元</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x..y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">范围</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x * y、x / y、x % y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">乘法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x + y、x – y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">加法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x < y、x > y、x <= y、x >= y、is、as</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">关系和类型测试</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x == y、x != y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">相等</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x & y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 AND 或按位逻辑 AND</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x ^ y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 XOR 或按位逻辑 XOR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x | y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 OR 或按位逻辑 OR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x && y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“与”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x || y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“或”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">c ? t : f/td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件运算符</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x = y、x += y、x -= y、x *= y、x /= y、x %= y、x &= y、x |= y、x ^= y、x <<= y、x >>= y、x ??= y、=></td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">赋值和 lambda 声明</td>\n</tr>\n</table>\n\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a><span style=\"color:#0366d6;\">语句</span></h2><blockquote>\n<p>程序执行的操作采用语句表达。 常见操作包括声明变量、赋值、调用方法、循环访问集合，以及根据给定条件分支到一个或另一个代码块。 语句在程序中的执行顺序称为“控制流”或“执行流”。 根据程序对运行时所收到的输入的响应，在程序每次运行时控制流可能有所不同。<br>语句可以是以分号结尾的单行代码，也可以是语句块中的一系列单行语句。 语句块括在括号 {} 中，并且可以包含嵌套块。</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">C# 关键字/说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">声明语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">声明语句引入新的变量或常量。 变量声明可以选择为变量赋值。 在常量声明中必须赋值。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">表达式语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">用于计算值的表达式语句必须在变量中存储该值。 有关详细信息，请参阅表达式语句。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">选择语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">选择语句用于根据一个或多个指定条件分支到不同的代码段。 有关详细信息，请参阅下列主题：if else switch case</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">迭代语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代语句用于遍历集合（如数组），或重复执行同一组语句直到满足指定的条件。 有关详细信息，请参阅下列主题：do for foreach in while</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">跳转语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">跳转语句将控制转移给另一代码段。 有关详细信息，请参阅下列主题：break continue default goto return yield</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">异常处理语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">异常处理语句用于从运行时发生的异常情况正常恢复。 有关详细信息，请参阅下列主题：throw try-catch try-finally try-catch-finally</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">Checked 和 unchecked</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">Checked 和 unchecked 语句用于指定将结果存储在变量中、但该变量过小而不能容纳结果值时，是否允许数值运算导致溢出。 有关详细信息，请参阅 checked 和 unchecked。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">await 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">如果用 async 修饰符标记方法，则可以使用该方法中的 await 运算符。 在控制到达异步方法的 await 表达式时，控制将返回到调用方，该方法中的进程将挂起，直到等待的任务完成为止。 任务完成后，可以在方法中恢复执行。\n\n<p>有关简单示例，请参阅方法的“异步方法”一节。 有关详细信息，请参阅 async 和 await 的异步编程</td></p>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">yield return 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代器对集合执行自定义迭代，如列表或数组。 迭代器使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器时，将从该位置重新开始执行。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">fixed 语句    </td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">fixed 语句禁止垃圾回收器重定位可移动的变量。 有关详细信息，请参阅 fixed。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">lock 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">lock 语句用于限制一次仅允许一个线程访问代码块。 有关详细信息，请参阅 lock。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">带标签的语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">可以为语句指定一个标签，然后使用 goto 关键字跳转到该带标签的语句。 （参见下一行中的示例。）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">空语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">空语句只含一个分号。 不执行任何操作，可以在需要语句但不需要执行任何操作的地方使用。</td>\n</tr>\n</table>\n<details>\n<summary>展开查看</summary>\n<pre><code>\n\n<p>局部变量声明 </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Declarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br><span class=\"line\">    a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Console.WriteLine(a + b + c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>局部常量声明</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConstantDeclarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> pi = <span class=\"number\">3.1415927f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r = <span class=\"number\">25</span>;</span><br><span class=\"line\">    Console.WriteLine(pi * r * r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表达式语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">IfStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"No arguments\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"One or more arguments\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>if 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConstantDeclarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> pi = <span class=\"number\">3.1415927f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r = <span class=\"number\">25</span>;</span><br><span class=\"line\">    Console.WriteLine(pi * r * r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>switch 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SwitchStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = args.Length;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (n) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"No arguments\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"One argument\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;n&#125;</span> arguments\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>while 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WhileStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; args.Length) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>do 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DoStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s = Console.ReadLine();</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(s));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ForStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.Length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>foreach 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ForEachStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> s <span class=\"keyword\">in</span> args) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>continue 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ContinueStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.Length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args[i].StartsWith(<span class=\"string\">\"/\"</span>)) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>goto 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">GoToStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> check;</span><br><span class=\"line\">    loop:</span><br><span class=\"line\">    Console.WriteLine(args[i++]);</span><br><span class=\"line\">    check:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; args.Length) </span><br><span class=\"line\">        <span class=\"keyword\">goto</span> loop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>return 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ReturnStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   Console.WriteLine(Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>yield 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> System.Collections.Generic.<span class=\"function\">IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">Range</span>(<span class=\"params\"><span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">YieldStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> <span class=\"title\">Range</span>(<span class=\"params\"><span class=\"number\">-10</span>,<span class=\"number\">10</span></span>)) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Console.WriteLine(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>throw 和 try 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">Divide</span>(<span class=\"params\"><span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y == <span class=\"number\">0</span>) </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DivideByZeroException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TryCatch</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.Length != <span class=\"number\">2</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">\"Two numbers required\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> x = <span class=\"keyword\">double</span>.Parse(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">double</span> y = <span class=\"keyword\">double</span>.Parse(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        Console.WriteLine(Divide(x, y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (InvalidOperationException e) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(e.Message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"Good bye!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>checked 和 unchecked 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CheckedUnchecked</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"keyword\">int</span>.MaxValue;</span><br><span class=\"line\">    <span class=\"keyword\">unchecked</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(x + <span class=\"number\">1</span>);  <span class=\"comment\">// Overflow</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">checked</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(x + <span class=\"number\">1</span>);  <span class=\"comment\">// Exception</span></span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lock 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">decimal</span> balance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> sync = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Withdraw</span>(<span class=\"params\"><span class=\"keyword\">decimal</span> amount</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (sync) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (amount &gt; balance) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(</span><br><span class=\"line\">                    <span class=\"string\">\"Insufficient funds\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            balance -= amount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>using 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UsingStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (TextWriter w = File.CreateText(<span class=\"string\">\"test.txt\"</span>)) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line one\"</span>);</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line two\"</span>);</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line three\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p></code></pre></p>\n</details>\n","site":{"data":{}},"excerpt":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a><br>C#发布于2000年6月，（读作“See Sharp”）是一种简单易用的新式编程语言，不仅面向对象，还类型安全。 C#源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。","more":"</p>\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a><span style=\"color:#0366d6;\">关键字</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">abstract</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">as</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">bool</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">break</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">byte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">case</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">catch</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">checked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">const</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">continue</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">decimal</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">default</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">delegate</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">do</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">double</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">else</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">enum</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">event</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">explicit</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">extern</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">finally</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">fixed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">float</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">for</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">foreach</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">goto</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">if</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">implicit</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">in</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">int</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">internal</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">is</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">lock</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">long</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">namespace</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">new</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">null</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">object</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">operator</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">out</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">override</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">params</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">private</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">readonly</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ref</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">return</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sbyte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sealed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">short</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sizeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">stackalloc</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">string</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">switch</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">this</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">throw</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">true</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">try</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">typeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">uint</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ulong</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unchecked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unsafe</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ushort</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">virtual</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">void</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">volatile</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">while</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n<h2 id=\"上下文关键字\"><a href=\"#上下文关键字\" class=\"headerlink\" title=\"上下文关键字\"></a><span style=\"color:#0366d6;\">上下文关键字</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">add</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">ascending</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">async</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">await</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">by</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">descending</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">dynamic</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">equals</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">from</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">get</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">global</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">group</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">into</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">join</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">let</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">nameof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">on</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">orderby</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">partial（类型）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">partial（方法）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">remove</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">select</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">set</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">unmanaged（泛型类型约束）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">value</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">var</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">when（筛选条件）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">where（泛型类型约束）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">    where（查询子句）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">yield</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a><span style=\"color:#0366d6;\">运算符</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">运算符</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别或名称</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x.y、x?.y、x?[y]、f(x)、a[i]、x++、x--、new、typeof、checked、unchecked、default、nameof、delegate、sizeof、stackalloc、x->y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">基本</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">+x、-x、!x、~x、++x、--x、^x、(T)x、await、&x、*x、true 和 false</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">一元</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x..y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">范围</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x * y、x / y、x % y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">乘法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x + y、x – y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">加法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x < y、x > y、x <= y、x >= y、is、as</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">关系和类型测试</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x == y、x != y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">相等</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x & y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 AND 或按位逻辑 AND</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x ^ y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 XOR 或按位逻辑 XOR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x | y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 OR 或按位逻辑 OR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x && y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“与”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x || y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“或”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">c ? t : f/td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件运算符</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x = y、x += y、x -= y、x *= y、x /= y、x %= y、x &= y、x |= y、x ^= y、x <<= y、x >>= y、x ??= y、=></td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">赋值和 lambda 声明</td>\n</tr>\n</table>\n\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a><span style=\"color:#0366d6;\">语句</span></h2><blockquote>\n<p>程序执行的操作采用语句表达。 常见操作包括声明变量、赋值、调用方法、循环访问集合，以及根据给定条件分支到一个或另一个代码块。 语句在程序中的执行顺序称为“控制流”或“执行流”。 根据程序对运行时所收到的输入的响应，在程序每次运行时控制流可能有所不同。<br>语句可以是以分号结尾的单行代码，也可以是语句块中的一系列单行语句。 语句块括在括号 {} 中，并且可以包含嵌套块。</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">C# 关键字/说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">声明语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">声明语句引入新的变量或常量。 变量声明可以选择为变量赋值。 在常量声明中必须赋值。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">表达式语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">用于计算值的表达式语句必须在变量中存储该值。 有关详细信息，请参阅表达式语句。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">选择语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">选择语句用于根据一个或多个指定条件分支到不同的代码段。 有关详细信息，请参阅下列主题：if else switch case</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">迭代语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代语句用于遍历集合（如数组），或重复执行同一组语句直到满足指定的条件。 有关详细信息，请参阅下列主题：do for foreach in while</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">跳转语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">跳转语句将控制转移给另一代码段。 有关详细信息，请参阅下列主题：break continue default goto return yield</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">异常处理语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">异常处理语句用于从运行时发生的异常情况正常恢复。 有关详细信息，请参阅下列主题：throw try-catch try-finally try-catch-finally</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">Checked 和 unchecked</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">Checked 和 unchecked 语句用于指定将结果存储在变量中、但该变量过小而不能容纳结果值时，是否允许数值运算导致溢出。 有关详细信息，请参阅 checked 和 unchecked。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">await 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">如果用 async 修饰符标记方法，则可以使用该方法中的 await 运算符。 在控制到达异步方法的 await 表达式时，控制将返回到调用方，该方法中的进程将挂起，直到等待的任务完成为止。 任务完成后，可以在方法中恢复执行。\n\n<p>有关简单示例，请参阅方法的“异步方法”一节。 有关详细信息，请参阅 async 和 await 的异步编程</td></p>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">yield return 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代器对集合执行自定义迭代，如列表或数组。 迭代器使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器时，将从该位置重新开始执行。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">fixed 语句    </td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">fixed 语句禁止垃圾回收器重定位可移动的变量。 有关详细信息，请参阅 fixed。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">lock 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">lock 语句用于限制一次仅允许一个线程访问代码块。 有关详细信息，请参阅 lock。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">带标签的语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">可以为语句指定一个标签，然后使用 goto 关键字跳转到该带标签的语句。 （参见下一行中的示例。）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">空语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">空语句只含一个分号。 不执行任何操作，可以在需要语句但不需要执行任何操作的地方使用。</td>\n</tr>\n</table>\n<details>\n<summary>展开查看</summary>\n<pre><code>\n\n<p>局部变量声明 </p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Declarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br><span class=\"line\">    a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Console.WriteLine(a + b + c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>局部常量声明</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConstantDeclarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> pi = <span class=\"number\">3.1415927f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r = <span class=\"number\">25</span>;</span><br><span class=\"line\">    Console.WriteLine(pi * r * r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>表达式语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">IfStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"No arguments\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"One or more arguments\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>if 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConstantDeclarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> pi = <span class=\"number\">3.1415927f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r = <span class=\"number\">25</span>;</span><br><span class=\"line\">    Console.WriteLine(pi * r * r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>switch 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SwitchStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = args.Length;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (n) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"No arguments\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"One argument\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;n&#125;</span> arguments\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>while 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WhileStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; args.Length) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>do 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DoStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s = Console.ReadLine();</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(s));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ForStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.Length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>foreach 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ForEachStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> s <span class=\"keyword\">in</span> args) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>continue 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ContinueStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.Length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args[i].StartsWith(<span class=\"string\">\"/\"</span>)) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>goto 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">GoToStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> check;</span><br><span class=\"line\">    loop:</span><br><span class=\"line\">    Console.WriteLine(args[i++]);</span><br><span class=\"line\">    check:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; args.Length) </span><br><span class=\"line\">        <span class=\"keyword\">goto</span> loop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>return 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ReturnStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   Console.WriteLine(Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>yield 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> System.Collections.Generic.<span class=\"function\">IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">Range</span>(<span class=\"params\"><span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">YieldStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> <span class=\"title\">Range</span>(<span class=\"params\"><span class=\"number\">-10</span>,<span class=\"number\">10</span></span>)) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Console.WriteLine(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>throw 和 try 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">Divide</span>(<span class=\"params\"><span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y == <span class=\"number\">0</span>) </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DivideByZeroException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TryCatch</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.Length != <span class=\"number\">2</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">\"Two numbers required\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> x = <span class=\"keyword\">double</span>.Parse(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">double</span> y = <span class=\"keyword\">double</span>.Parse(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        Console.WriteLine(Divide(x, y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (InvalidOperationException e) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(e.Message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"Good bye!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>checked 和 unchecked 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CheckedUnchecked</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"keyword\">int</span>.MaxValue;</span><br><span class=\"line\">    <span class=\"keyword\">unchecked</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(x + <span class=\"number\">1</span>);  <span class=\"comment\">// Overflow</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">checked</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(x + <span class=\"number\">1</span>);  <span class=\"comment\">// Exception</span></span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>lock 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">decimal</span> balance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> sync = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Withdraw</span>(<span class=\"params\"><span class=\"keyword\">decimal</span> amount</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (sync) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (amount &gt; balance) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(</span><br><span class=\"line\">                    <span class=\"string\">\"Insufficient funds\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            balance -= amount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>using 语句</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UsingStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (TextWriter w = File.CreateText(<span class=\"string\">\"test.txt\"</span>)) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line one\"</span>);</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line two\"</span>);</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line three\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p></code></pre></p>\n</details>"},{"title":"C#1.0语法","date":"2020-02-19T16:00:00.000Z","_content":"C#1.0语法（发布于2000年6月,.NET Framework 1.0）\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C# 1.0</span>\n## <span style=\"color:#0366d6;\">数据类型</span>\n\n<details>\n<summary>展开查看</summary>\n\n* 值类型\n  * 简单类型\n    * 有符号的整型：sbyte、short、int、long\n    * 无符号的整型：byte、ushort、uint、ulong\n    * Unicode 字符：char\n    * IEEE 二进制浮点：float、double\n    * 高精度十进制浮点数：decimal\n    * 布尔：bool\n  * 枚举类型\n    * 格式为 enum E {...} 的用户定义类型\n  * 结构类型\n    * 格式为 struct S {...} 的用户定义类型\n  * 可以为 null 的值类型\n    * 值为 null 的其他所有值类型的扩展\n* 引用类型\n  * 类类型\n    * 其他所有类型的最终基类：object\n    * Unicode 字符串：string\n    * 格式为 class C {...} 的用户定义类型\n  * 接口类型\n    * 格式为 interface I {...} 的用户定义类型\n* 数组类型\n  * 一维和多维，例如 int[] 和 int[,]\n* 委托类型\n  * 格式为 delegate int D(...) 的用户定义类型\n</details> \n\n## <span style=\"color:#0366d6;\">语言元素</span>\n<details>\n<summary>展开查看</summary>\n\n* 程序结构\n  * 了解 C# 语言中的关键组织概念：程序、命名空间、类型、成员和程序集。\n* 类型和变量\n  * 了解 C# 语言中的值类型、引用类型和变量。\n* 表达式\n  * 表达式是在操作数和运算符的基础之上构造而成。 表达式生成的是值。\n* 语句\n  * 语句用于表示程序的操作。\n* 类和对象\n  * 类是最基本的 C# 类型。 对象是类实例。 类是使用成员生成的，此主题也对此进行了介绍。\n* 结构\n  * 与类不同，结构是属于值类型的数据结构。\n* 数组\n  * 数组是一种数据结构，其中包含许多通过计算索引访问的变量。\n* 接口\n  * 接口定义了可由类和结构实现的协定。 接口可以包含方法、属性、事件和索引器。 接口不提供所定义的成员的实现代码，仅指定必须由实现接口的类或结构提供的成员。\n* 委托\n  * 委托类型表示对具有特定参数列表和返回类型的方法的引用。 通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。 委托类似于其他一些语言中的函数指针概念，但与函数指针不同的是，委托不仅面向对象，还类型安全。\n* 特性\n  * 使用特性，程序可以指定关于类型、成员和其他实体的附加声明性信息。\n</details> \n\n## <span style=\"color:#0366d6;\">访问修饰符</span>\n<details>\n<summary>展开查看</summary>\n\n* public\n  * 访问不受限\n* protected\n  * 只能访问此类或派生自此类的类\n* internal\n  * 访问限于当前程序集（.exe、.dll 等）\n* protected internal\n  * 访问限于包含类、派生自包含类的类或同一程序集中的类\n* private\n  * 只能访问此类\n* private protected\n  * 访问限于同一程序集中的包含类或派生自包含类的类\n</details> \n\n## <span style=\"color:#0366d6;\">namespace</span>\n>namespace 关键字用于声明包含一组相关对象的作用域。 可以使用命名空间来组织代码元素并创建全局唯一类型。\n可包含：另一个命名空间，class，interface，struct，enum，delegate\n## <span style=\"color:#0366d6;\">using</span>\n>using 语句定义一个范围，在此范围的末尾将释放对象\n```csharp\nusing (var font1 = new Font(\"Arial\", 10.0f)) \n{\n    byte charset = font1.GdiCharSet;\n}\n```\n>using允许在命名空间中使用类型，这样无需在该命名空间中限定某个类型的使用\n```csharp\nusing System.Text;\n```\n>允许访问类型的静态成员和嵌套类型，而无需限定使用类型名称进行访问\n```csharp\nusing static System.Math;\n```\n>为命名空间或类型创建别名。 这称为 using 别名指令\n```csharp\nusing Project = PC.MyCompany.Project;\n```\n## <span style=\"color:#0366d6;\">方法相关</span>\n\n### 方法声明\n```csharp\n//public 访问修饰符\n//virtual 虚方法修饰符\n//int 返回值类型\n//Drive 方法名称\n//int miles, int speed 形参列表\n//{  return 1; } 方法体 \npublic virtual int Drive(int miles, int speed) {  return 1; }\n```\n### 无方法体\n```csharp\npublic abstract double GetTopSpeed();\n```\n### 参数修饰符\n```csharp\n* params 指定此参数采用可变数量的参数。\n  //params 关键字之后不允许有任何其他参数，并且在方法声明中只允许有一个\n  public static void UseParams(params int[] list){}\n```\n```csharp\n* ref 指定此参数由引用传递，可能由调用方法读取或写入。\n  //修饰在值类型前\n  //调用前必须赋值\n  public void SampleMethod(ref int i) { }\n\n  ```\n<details>\n<summary>ref 修饰在引用类型前</summary>\n\n```csharp\nclass Product\n{\n    public Product(string name, int newID)\n    {\n        ItemName = name;\n        ItemID = newID;\n    }\n\n    public string ItemName { get; set; }\n    public int ItemID { get; set; }\n}\n\nprivate static void ChangeByReference(ref Product itemRef)\n{\n    // Change the address that is stored in the itemRef parameter.   \n    itemRef = new Product(\"Stapler\", 99999);\n\n    // You can change the value of one of the properties of\n    // itemRef. The change happens to item in Main as well.\n    itemRef.ItemID = 12345;\n}\n\nprivate static void ModifyProductsByReference()\n{\n    // Declare an instance of Product and display its initial values.\n    Product item = new Product(\"Fasteners\", 54321);\n    System.Console.WriteLine(\"Original values in Main.  Name: {0}, ID: {1}\\n\",\n        item.ItemName, item.ItemID);\n\n    // Pass the product instance to ChangeByReference.\n    ChangeByReference(ref item);\n    System.Console.WriteLine(\"Back in Main.  Name: {0}, ID: {1}\\n\",\n        item.ItemName, item.ItemID);\n}\n\n// This method displays the following output:\n// Original values in Main.  Name: Fasteners, ID: 54321\n// Back in Main.  Name: Stapler, ID: 12345 \n\n```\n</details>   \n\n```csharp\n* out 指定此参数由引用传递，由调用方法写入。\n//调用返回前必须赋值\npublic void SampleMethod(out int i) {i=0; }\n```\n\n### 方法重载\n>方法重载指的就是方法名称相同，但是参数不同\n签名指的是方法名和参数列表\n```csharp\npublic static int AddNumber(int num1,int num2)\n{\n    return num1 + num2;\n}\n       \npublic static double AddNumber(int num1, int num2,int num3)\n{\n    return num1 + num2;\n}\n\npublic static double AddNumber(double num1, int num2)\n{\n    return num1 + num2;\n}\n\n```\n### 方法重写\n>重写基方法必须具有与 override 方法相同的签名,override 声明不能更改 virtual 方法的可访问性。 override 方法和 virtual 方法必须具有相同级别访问修饰符。override可以扩展或修改继承的<span style=\"color:#0065b3;\">方法、属性、索引器或事件</span>的抽象或虚拟实现\n\n```csharp\npublic class BaseC\n{\n    public int x;\n    public virtual void Invoke() { }\n}\npublic class DerivedC : BaseC\n{\n    override public void Invoke() { }\n}\n```\n### 覆盖方法\n>在用作声明修饰符时，new 关键字可以显式隐藏从基类继承的成员。 隐藏继承的成员时，该成员的派生版本将替换基类版本。 虽然可以不使用 new 修饰符来隐藏成员，但将收到编译器警告。 如果使用 new 来显式隐藏成员，将禁止此警告。\n```csharp\npublic class BaseC\n{\n    public int x;\n    public virtual void Invoke() { }\n}\npublic class DerivedC : BaseC\n{\n    new public void Invoke() { }\n}\n```\n## <span style=\"color:#0366d6;\">类</span>\n类的成员有：<span style=\"color:#0366d6;\">字段，常量，属性，方法，事件，运算符，索引器，构造函数，终结器，嵌套类型</span>\n```csharp\n    //委托\n    public delegate void MyEventHandler();\n```\n\n<details>\n<summary>展开查看</summary>\n\n```csharp\n    public class Customer\n    {\n        //构造函数\n        public Customer()\n        {\n            SomeEvent += Handler;\n        }       \n\n        //终结器\n        ~Customer()\n        {\n            SomeEvent -= Handler;\n        }\n\n        //字段\n        private string username;\n\n        //数组\n        string[] days = { \"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\" };\n\n        //事件\n        public event MyEventHandler SomeEvent;\n\n        //常量\n        public const string COUNTRYNAME = \"china\";\n\n        //属性\n        public string UserName\n        {\n            get { return username; }\n            set { username = value; }\n        }\n\n        //方法\n        public void Handler()\n        {\n\n        }\n\n        //方法\n        private int GetDay(string testDay)\n        {\n\n            for (int j = 0; j < days.Length; j++)\n            {\n                if (days[j] == testDay)\n                {\n                    return j;\n                }\n            }\n\n            throw new System.ArgumentOutOfRangeException(testDay, \"testDay must be in the form \\\"Sun\\\", \\\"Mon\\\", etc\");\n        }\n        \n        //方法\n        public void OnSomeEvent()\n        {\n            if (SomeEvent != null)\n            {\n                SomeEvent();\n            }\n        }\n\n        //索引\n        public int this[string day]\n        {\n            get\n            {\n                return (GetDay(day));\n            }\n        }\n    }\n```\n</details>\n\n### 创建对象\n```csharp\nCustomer object1 = new Customer();\n```\n### 类继承\n```csharp\npublic class Manager : Employee\n{\n    // Employee fields, properties, methods and events are inherited\n    // New Manager fields, properties, methods and events go here...\n}\n```\n### 抽象类\n```csharp\n//至少包含一个抽象方法\nabstract class Motorcycle\n{\n   // Anyone can call this.\n   public void StartEngine() {/* Method statements here */ }\n\n   // Only derived classes can call this.\n   protected void AddGas(int gallons) { /* Method statements here */ }\n\n   // Derived classes can override the base class implementation.\n   public virtual int Drive(int miles, int speed) { /* Method statements here */ return 1; }\n\n   // Derived classes can override the base class implementation.\n   public virtual int Drive(TimeSpan time, int speed) { /* Method statements here */ return 0; }\n\n   // Derived classes must implement this.\n   public abstract double GetTopSpeed(); \n}\n```\n\n```csharp\npublic class Constant: Expression\n{\n    double value;\n    public Constant(double value) \n    {\n        this.value = value;\n    }\n    public override double Evaluate(Dictionary<string,object> vars) \n    {\n        return value;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">结构</span>\n```csharp\npublic struct PostalAddress\n{\n    // Fields, properties, methods and events go here...\n}\n```\n## <span style=\"color:#0366d6;\">接口</span>\n### 定义\n```csharp\ninterface IEquatable<T>\n{\n    bool Equals(T obj);\n}\n```\n### 实现\n```csharp\ninterface IEquatable<T>\npublic class Car : IEquatable<Car>\n{\n    public string Make {get; set;}\n    public string Model { get; set; }\n    public string Year { get; set; }\n\n    // Implementation of IEquatable<T> interface\n    public bool Equals(Car car)\n    {\n        return this.Make == car.Make &&\n               this.Model == car.Model &&\n               this.Year == car.Year;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">委托</span>\n>如类Customer中的委托\n\n## <span style=\"color:#0366d6;\">事件</span>\n>如类Customer中的事件\n\n## <span style=\"color:#0366d6;\">特性</span>\n### 使用\n```csharp\n[Serializable]\npublic class SampleClass\n{\n    // Objects of this type can be serialized.\n}\n```\n\n### 创建\n```csharp\n[System.AttributeUsage(System.AttributeTargets.Class |  \n                       System.AttributeTargets.Struct)  \n]  \npublic class Author : System.Attribute  \n{  \n    private string name;  \n    public double version;  \n  \n    public Author(string name)  \n    {  \n        this.name = name;  \n        version = 1.0;  \n    }  \n} \n```\n```csharp\n[Author(\"P. Ackerman\", version = 1.1)]  \nclass SampleClass  \n{  \n    // P. Ackerman's code goes here...  \n}\n```\n## <span style=\"color:#0366d6;\">C#1.2</span> \n>随 Visual Studio .NET 2003 一起提供的 C# 版本 1.2（.NET Framework 1.1）。 它对语言做了一些小改进。 最值得注意的是，从此版本开始，当 IEnumerator 实现 IDisposable 时，foreach 循环中生成的代码会在 IEnumerator 上调用 Dispose。\n\n","source":"_posts/csharpgrammar-3.md","raw":"---\ntitle: C#1.0语法\ndate: 2020-02-20\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#1.0语法（发布于2000年6月,.NET Framework 1.0）\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C# 1.0</span>\n## <span style=\"color:#0366d6;\">数据类型</span>\n\n<details>\n<summary>展开查看</summary>\n\n* 值类型\n  * 简单类型\n    * 有符号的整型：sbyte、short、int、long\n    * 无符号的整型：byte、ushort、uint、ulong\n    * Unicode 字符：char\n    * IEEE 二进制浮点：float、double\n    * 高精度十进制浮点数：decimal\n    * 布尔：bool\n  * 枚举类型\n    * 格式为 enum E {...} 的用户定义类型\n  * 结构类型\n    * 格式为 struct S {...} 的用户定义类型\n  * 可以为 null 的值类型\n    * 值为 null 的其他所有值类型的扩展\n* 引用类型\n  * 类类型\n    * 其他所有类型的最终基类：object\n    * Unicode 字符串：string\n    * 格式为 class C {...} 的用户定义类型\n  * 接口类型\n    * 格式为 interface I {...} 的用户定义类型\n* 数组类型\n  * 一维和多维，例如 int[] 和 int[,]\n* 委托类型\n  * 格式为 delegate int D(...) 的用户定义类型\n</details> \n\n## <span style=\"color:#0366d6;\">语言元素</span>\n<details>\n<summary>展开查看</summary>\n\n* 程序结构\n  * 了解 C# 语言中的关键组织概念：程序、命名空间、类型、成员和程序集。\n* 类型和变量\n  * 了解 C# 语言中的值类型、引用类型和变量。\n* 表达式\n  * 表达式是在操作数和运算符的基础之上构造而成。 表达式生成的是值。\n* 语句\n  * 语句用于表示程序的操作。\n* 类和对象\n  * 类是最基本的 C# 类型。 对象是类实例。 类是使用成员生成的，此主题也对此进行了介绍。\n* 结构\n  * 与类不同，结构是属于值类型的数据结构。\n* 数组\n  * 数组是一种数据结构，其中包含许多通过计算索引访问的变量。\n* 接口\n  * 接口定义了可由类和结构实现的协定。 接口可以包含方法、属性、事件和索引器。 接口不提供所定义的成员的实现代码，仅指定必须由实现接口的类或结构提供的成员。\n* 委托\n  * 委托类型表示对具有特定参数列表和返回类型的方法的引用。 通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。 委托类似于其他一些语言中的函数指针概念，但与函数指针不同的是，委托不仅面向对象，还类型安全。\n* 特性\n  * 使用特性，程序可以指定关于类型、成员和其他实体的附加声明性信息。\n</details> \n\n## <span style=\"color:#0366d6;\">访问修饰符</span>\n<details>\n<summary>展开查看</summary>\n\n* public\n  * 访问不受限\n* protected\n  * 只能访问此类或派生自此类的类\n* internal\n  * 访问限于当前程序集（.exe、.dll 等）\n* protected internal\n  * 访问限于包含类、派生自包含类的类或同一程序集中的类\n* private\n  * 只能访问此类\n* private protected\n  * 访问限于同一程序集中的包含类或派生自包含类的类\n</details> \n\n## <span style=\"color:#0366d6;\">namespace</span>\n>namespace 关键字用于声明包含一组相关对象的作用域。 可以使用命名空间来组织代码元素并创建全局唯一类型。\n可包含：另一个命名空间，class，interface，struct，enum，delegate\n## <span style=\"color:#0366d6;\">using</span>\n>using 语句定义一个范围，在此范围的末尾将释放对象\n```csharp\nusing (var font1 = new Font(\"Arial\", 10.0f)) \n{\n    byte charset = font1.GdiCharSet;\n}\n```\n>using允许在命名空间中使用类型，这样无需在该命名空间中限定某个类型的使用\n```csharp\nusing System.Text;\n```\n>允许访问类型的静态成员和嵌套类型，而无需限定使用类型名称进行访问\n```csharp\nusing static System.Math;\n```\n>为命名空间或类型创建别名。 这称为 using 别名指令\n```csharp\nusing Project = PC.MyCompany.Project;\n```\n## <span style=\"color:#0366d6;\">方法相关</span>\n\n### 方法声明\n```csharp\n//public 访问修饰符\n//virtual 虚方法修饰符\n//int 返回值类型\n//Drive 方法名称\n//int miles, int speed 形参列表\n//{  return 1; } 方法体 \npublic virtual int Drive(int miles, int speed) {  return 1; }\n```\n### 无方法体\n```csharp\npublic abstract double GetTopSpeed();\n```\n### 参数修饰符\n```csharp\n* params 指定此参数采用可变数量的参数。\n  //params 关键字之后不允许有任何其他参数，并且在方法声明中只允许有一个\n  public static void UseParams(params int[] list){}\n```\n```csharp\n* ref 指定此参数由引用传递，可能由调用方法读取或写入。\n  //修饰在值类型前\n  //调用前必须赋值\n  public void SampleMethod(ref int i) { }\n\n  ```\n<details>\n<summary>ref 修饰在引用类型前</summary>\n\n```csharp\nclass Product\n{\n    public Product(string name, int newID)\n    {\n        ItemName = name;\n        ItemID = newID;\n    }\n\n    public string ItemName { get; set; }\n    public int ItemID { get; set; }\n}\n\nprivate static void ChangeByReference(ref Product itemRef)\n{\n    // Change the address that is stored in the itemRef parameter.   \n    itemRef = new Product(\"Stapler\", 99999);\n\n    // You can change the value of one of the properties of\n    // itemRef. The change happens to item in Main as well.\n    itemRef.ItemID = 12345;\n}\n\nprivate static void ModifyProductsByReference()\n{\n    // Declare an instance of Product and display its initial values.\n    Product item = new Product(\"Fasteners\", 54321);\n    System.Console.WriteLine(\"Original values in Main.  Name: {0}, ID: {1}\\n\",\n        item.ItemName, item.ItemID);\n\n    // Pass the product instance to ChangeByReference.\n    ChangeByReference(ref item);\n    System.Console.WriteLine(\"Back in Main.  Name: {0}, ID: {1}\\n\",\n        item.ItemName, item.ItemID);\n}\n\n// This method displays the following output:\n// Original values in Main.  Name: Fasteners, ID: 54321\n// Back in Main.  Name: Stapler, ID: 12345 \n\n```\n</details>   \n\n```csharp\n* out 指定此参数由引用传递，由调用方法写入。\n//调用返回前必须赋值\npublic void SampleMethod(out int i) {i=0; }\n```\n\n### 方法重载\n>方法重载指的就是方法名称相同，但是参数不同\n签名指的是方法名和参数列表\n```csharp\npublic static int AddNumber(int num1,int num2)\n{\n    return num1 + num2;\n}\n       \npublic static double AddNumber(int num1, int num2,int num3)\n{\n    return num1 + num2;\n}\n\npublic static double AddNumber(double num1, int num2)\n{\n    return num1 + num2;\n}\n\n```\n### 方法重写\n>重写基方法必须具有与 override 方法相同的签名,override 声明不能更改 virtual 方法的可访问性。 override 方法和 virtual 方法必须具有相同级别访问修饰符。override可以扩展或修改继承的<span style=\"color:#0065b3;\">方法、属性、索引器或事件</span>的抽象或虚拟实现\n\n```csharp\npublic class BaseC\n{\n    public int x;\n    public virtual void Invoke() { }\n}\npublic class DerivedC : BaseC\n{\n    override public void Invoke() { }\n}\n```\n### 覆盖方法\n>在用作声明修饰符时，new 关键字可以显式隐藏从基类继承的成员。 隐藏继承的成员时，该成员的派生版本将替换基类版本。 虽然可以不使用 new 修饰符来隐藏成员，但将收到编译器警告。 如果使用 new 来显式隐藏成员，将禁止此警告。\n```csharp\npublic class BaseC\n{\n    public int x;\n    public virtual void Invoke() { }\n}\npublic class DerivedC : BaseC\n{\n    new public void Invoke() { }\n}\n```\n## <span style=\"color:#0366d6;\">类</span>\n类的成员有：<span style=\"color:#0366d6;\">字段，常量，属性，方法，事件，运算符，索引器，构造函数，终结器，嵌套类型</span>\n```csharp\n    //委托\n    public delegate void MyEventHandler();\n```\n\n<details>\n<summary>展开查看</summary>\n\n```csharp\n    public class Customer\n    {\n        //构造函数\n        public Customer()\n        {\n            SomeEvent += Handler;\n        }       \n\n        //终结器\n        ~Customer()\n        {\n            SomeEvent -= Handler;\n        }\n\n        //字段\n        private string username;\n\n        //数组\n        string[] days = { \"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\" };\n\n        //事件\n        public event MyEventHandler SomeEvent;\n\n        //常量\n        public const string COUNTRYNAME = \"china\";\n\n        //属性\n        public string UserName\n        {\n            get { return username; }\n            set { username = value; }\n        }\n\n        //方法\n        public void Handler()\n        {\n\n        }\n\n        //方法\n        private int GetDay(string testDay)\n        {\n\n            for (int j = 0; j < days.Length; j++)\n            {\n                if (days[j] == testDay)\n                {\n                    return j;\n                }\n            }\n\n            throw new System.ArgumentOutOfRangeException(testDay, \"testDay must be in the form \\\"Sun\\\", \\\"Mon\\\", etc\");\n        }\n        \n        //方法\n        public void OnSomeEvent()\n        {\n            if (SomeEvent != null)\n            {\n                SomeEvent();\n            }\n        }\n\n        //索引\n        public int this[string day]\n        {\n            get\n            {\n                return (GetDay(day));\n            }\n        }\n    }\n```\n</details>\n\n### 创建对象\n```csharp\nCustomer object1 = new Customer();\n```\n### 类继承\n```csharp\npublic class Manager : Employee\n{\n    // Employee fields, properties, methods and events are inherited\n    // New Manager fields, properties, methods and events go here...\n}\n```\n### 抽象类\n```csharp\n//至少包含一个抽象方法\nabstract class Motorcycle\n{\n   // Anyone can call this.\n   public void StartEngine() {/* Method statements here */ }\n\n   // Only derived classes can call this.\n   protected void AddGas(int gallons) { /* Method statements here */ }\n\n   // Derived classes can override the base class implementation.\n   public virtual int Drive(int miles, int speed) { /* Method statements here */ return 1; }\n\n   // Derived classes can override the base class implementation.\n   public virtual int Drive(TimeSpan time, int speed) { /* Method statements here */ return 0; }\n\n   // Derived classes must implement this.\n   public abstract double GetTopSpeed(); \n}\n```\n\n```csharp\npublic class Constant: Expression\n{\n    double value;\n    public Constant(double value) \n    {\n        this.value = value;\n    }\n    public override double Evaluate(Dictionary<string,object> vars) \n    {\n        return value;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">结构</span>\n```csharp\npublic struct PostalAddress\n{\n    // Fields, properties, methods and events go here...\n}\n```\n## <span style=\"color:#0366d6;\">接口</span>\n### 定义\n```csharp\ninterface IEquatable<T>\n{\n    bool Equals(T obj);\n}\n```\n### 实现\n```csharp\ninterface IEquatable<T>\npublic class Car : IEquatable<Car>\n{\n    public string Make {get; set;}\n    public string Model { get; set; }\n    public string Year { get; set; }\n\n    // Implementation of IEquatable<T> interface\n    public bool Equals(Car car)\n    {\n        return this.Make == car.Make &&\n               this.Model == car.Model &&\n               this.Year == car.Year;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">委托</span>\n>如类Customer中的委托\n\n## <span style=\"color:#0366d6;\">事件</span>\n>如类Customer中的事件\n\n## <span style=\"color:#0366d6;\">特性</span>\n### 使用\n```csharp\n[Serializable]\npublic class SampleClass\n{\n    // Objects of this type can be serialized.\n}\n```\n\n### 创建\n```csharp\n[System.AttributeUsage(System.AttributeTargets.Class |  \n                       System.AttributeTargets.Struct)  \n]  \npublic class Author : System.Attribute  \n{  \n    private string name;  \n    public double version;  \n  \n    public Author(string name)  \n    {  \n        this.name = name;  \n        version = 1.0;  \n    }  \n} \n```\n```csharp\n[Author(\"P. Ackerman\", version = 1.1)]  \nclass SampleClass  \n{  \n    // P. Ackerman's code goes here...  \n}\n```\n## <span style=\"color:#0366d6;\">C#1.2</span> \n>随 Visual Studio .NET 2003 一起提供的 C# 版本 1.2（.NET Framework 1.1）。 它对语言做了一些小改进。 最值得注意的是，从此版本开始，当 IEnumerator 实现 IDisposable 时，foreach 循环中生成的代码会在 IEnumerator 上调用 Dispose。\n\n","slug":"csharpgrammar-3","published":1,"updated":"2022-08-17T06:55:45.677Z","_id":"ck6ugfar9001yqcrich0a556t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#1.0语法（发布于2000年6月,.NET Framework 1.0）</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-1-0\"><a href=\"#C-1-0\" class=\"headerlink\" title=\"C# 1.0\"></a><span style=\"color:#0366d6;\">C# 1.0</span></h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a><span style=\"color:#0366d6;\">数据类型</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>值类型<ul>\n<li>简单类型<ul>\n<li>有符号的整型：sbyte、short、int、long</li>\n<li>无符号的整型：byte、ushort、uint、ulong</li>\n<li>Unicode 字符：char</li>\n<li>IEEE 二进制浮点：float、double</li>\n<li>高精度十进制浮点数：decimal</li>\n<li>布尔：bool</li>\n</ul>\n</li>\n<li>枚举类型<ul>\n<li>格式为 enum E {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>结构类型<ul>\n<li>格式为 struct S {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>可以为 null 的值类型<ul>\n<li>值为 null 的其他所有值类型的扩展</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>引用类型<ul>\n<li>类类型<ul>\n<li>其他所有类型的最终基类：object</li>\n<li>Unicode 字符串：string</li>\n<li>格式为 class C {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>接口类型<ul>\n<li>格式为 interface I {…} 的用户定义类型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数组类型<ul>\n<li>一维和多维，例如 int[] 和 int[,]</li>\n</ul>\n</li>\n<li>委托类型<ul>\n<li>格式为 delegate int D(…) 的用户定义类型</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语言元素\"><a href=\"#语言元素\" class=\"headerlink\" title=\"语言元素\"></a><span style=\"color:#0366d6;\">语言元素</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>程序结构<ul>\n<li>了解 C# 语言中的关键组织概念：程序、命名空间、类型、成员和程序集。</li>\n</ul>\n</li>\n<li>类型和变量<ul>\n<li>了解 C# 语言中的值类型、引用类型和变量。</li>\n</ul>\n</li>\n<li>表达式<ul>\n<li>表达式是在操作数和运算符的基础之上构造而成。 表达式生成的是值。</li>\n</ul>\n</li>\n<li>语句<ul>\n<li>语句用于表示程序的操作。</li>\n</ul>\n</li>\n<li>类和对象<ul>\n<li>类是最基本的 C# 类型。 对象是类实例。 类是使用成员生成的，此主题也对此进行了介绍。</li>\n</ul>\n</li>\n<li>结构<ul>\n<li>与类不同，结构是属于值类型的数据结构。</li>\n</ul>\n</li>\n<li>数组<ul>\n<li>数组是一种数据结构，其中包含许多通过计算索引访问的变量。</li>\n</ul>\n</li>\n<li>接口<ul>\n<li>接口定义了可由类和结构实现的协定。 接口可以包含方法、属性、事件和索引器。 接口不提供所定义的成员的实现代码，仅指定必须由实现接口的类或结构提供的成员。</li>\n</ul>\n</li>\n<li>委托<ul>\n<li>委托类型表示对具有特定参数列表和返回类型的方法的引用。 通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。 委托类似于其他一些语言中的函数指针概念，但与函数指针不同的是，委托不仅面向对象，还类型安全。</li>\n</ul>\n</li>\n<li>特性<ul>\n<li>使用特性，程序可以指定关于类型、成员和其他实体的附加声明性信息。</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a><span style=\"color:#0366d6;\">访问修饰符</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>public<ul>\n<li>访问不受限</li>\n</ul>\n</li>\n<li>protected<ul>\n<li>只能访问此类或派生自此类的类</li>\n</ul>\n</li>\n<li>internal<ul>\n<li>访问限于当前程序集（.exe、.dll 等）</li>\n</ul>\n</li>\n<li>protected internal<ul>\n<li>访问限于包含类、派生自包含类的类或同一程序集中的类</li>\n</ul>\n</li>\n<li>private<ul>\n<li>只能访问此类</li>\n</ul>\n</li>\n<li>private protected<ul>\n<li>访问限于同一程序集中的包含类或派生自包含类的类</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"namespace\"><a href=\"#namespace\" class=\"headerlink\" title=\"namespace\"></a><span style=\"color:#0366d6;\">namespace</span></h2><blockquote>\n<p>namespace 关键字用于声明包含一组相关对象的作用域。 可以使用命名空间来组织代码元素并创建全局唯一类型。<br>可包含：另一个命名空间，class，interface，struct，enum，delegate</p>\n</blockquote>\n<h2 id=\"using\"><a href=\"#using\" class=\"headerlink\" title=\"using\"></a><span style=\"color:#0366d6;\">using</span></h2><blockquote>\n<p>using 语句定义一个范围，在此范围的末尾将释放对象</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> font1 = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"Arial\"</span>, <span class=\"number\">10.0f</span>)) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span> charset = font1.GdiCharSet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>using允许在命名空间中使用类型，这样无需在该命名空间中限定某个类型的使用</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>允许访问类型的静态成员和嵌套类型，而无需限定使用类型名称进行访问</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.Math;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为命名空间或类型创建别名。 这称为 using 别名指令</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Project = PC.MyCompany.Project;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法相关\"><a href=\"#方法相关\" class=\"headerlink\" title=\"方法相关\"></a><span style=\"color:#0366d6;\">方法相关</span></h2><h3 id=\"方法声明\"><a href=\"#方法声明\" class=\"headerlink\" title=\"方法声明\"></a>方法声明</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//public 访问修饰符</span></span><br><span class=\"line\"><span class=\"comment\">//virtual 虚方法修饰符</span></span><br><span class=\"line\"><span class=\"comment\">//int 返回值类型</span></span><br><span class=\"line\"><span class=\"comment\">//Drive 方法名称</span></span><br><span class=\"line\"><span class=\"comment\">//int miles, int speed 形参列表</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;  return 1; &#125; 方法体 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\"><span class=\"keyword\">int</span> miles, <span class=\"keyword\">int</span> speed</span>)</span> &#123;  <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"无方法体\"><a href=\"#无方法体\" class=\"headerlink\" title=\"无方法体\"></a>无方法体</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">GetTopSpeed</span>(<span class=\"params\"></span>)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数修饰符\"><a href=\"#参数修饰符\" class=\"headerlink\" title=\"参数修饰符\"></a>参数修饰符</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">params</span> 指定此参数采用可变数量的参数。</span><br><span class=\"line\">  <span class=\"comment\">//params 关键字之后不允许有任何其他参数，并且在方法声明中只允许有一个</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UseParams</span>(<span class=\"params\"><span class=\"keyword\">params</span> <span class=\"keyword\">int</span>[] list</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">ref</span> 指定此参数由引用传递，可能由调用方法读取或写入。</span><br><span class=\"line\">  <span class=\"comment\">//修饰在值类型前</span></span><br><span class=\"line\">  <span class=\"comment\">//调用前必须赋值</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SampleMethod</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"keyword\">int</span> i</span>)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<details>\n<summary>ref 修饰在引用类型前</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Product</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, <span class=\"keyword\">int</span> newID</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ItemName = name;</span><br><span class=\"line\">        ItemID = newID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ItemName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ItemID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ChangeByReference</span>(<span class=\"params\"><span class=\"keyword\">ref</span> Product itemRef</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Change the address that is stored in the itemRef parameter.   </span></span><br><span class=\"line\">    itemRef = <span class=\"keyword\">new</span> Product(<span class=\"string\">\"Stapler\"</span>, <span class=\"number\">99999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// You can change the value of one of the properties of</span></span><br><span class=\"line\">    <span class=\"comment\">// itemRef. The change happens to item in Main as well.</span></span><br><span class=\"line\">    itemRef.ItemID = <span class=\"number\">12345</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ModifyProductsByReference</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Declare an instance of Product and display its initial values.</span></span><br><span class=\"line\">    Product item = <span class=\"keyword\">new</span> Product(<span class=\"string\">\"Fasteners\"</span>, <span class=\"number\">54321</span>);</span><br><span class=\"line\">    System.Console.WriteLine(<span class=\"string\">\"Original values in Main.  Name: &#123;0&#125;, ID: &#123;1&#125;\\n\"</span>,</span><br><span class=\"line\">        item.ItemName, item.ItemID);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Pass the product instance to ChangeByReference.</span></span><br><span class=\"line\">    ChangeByReference(<span class=\"keyword\">ref</span> item);</span><br><span class=\"line\">    System.Console.WriteLine(<span class=\"string\">\"Back in Main.  Name: &#123;0&#125;, ID: &#123;1&#125;\\n\"</span>,</span><br><span class=\"line\">        item.ItemName, item.ItemID);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This method displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">// Original values in Main.  Name: Fasteners, ID: 54321</span></span><br><span class=\"line\"><span class=\"comment\">// Back in Main.  Name: Stapler, ID: 12345</span></span><br></pre></td></tr></table></figure>\n</details>   \n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">out</span> 指定此参数由引用传递，由调用方法写入。</span><br><span class=\"line\"><span class=\"comment\">//调用返回前必须赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SampleMethod</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">int</span> i</span>)</span> &#123;i=<span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h3><blockquote>\n<p>方法重载指的就是方法名称相同，但是参数不同<br>签名指的是方法名和参数列表</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2,<span class=\"keyword\">int</span> num3</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">double</span> num1, <span class=\"keyword\">int</span> num2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><blockquote>\n<p>重写基方法必须具有与 override 方法相同的签名,override 声明不能更改 virtual 方法的可访问性。 override 方法和 virtual 方法必须具有相同级别访问修饰符。override可以扩展或修改继承的<span style=\"color:#0065b3;\">方法、属性、索引器或事件</span>的抽象或虚拟实现</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedC</span> : <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">override</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"覆盖方法\"><a href=\"#覆盖方法\" class=\"headerlink\" title=\"覆盖方法\"></a>覆盖方法</h3><blockquote>\n<p>在用作声明修饰符时，new 关键字可以显式隐藏从基类继承的成员。 隐藏继承的成员时，该成员的派生版本将替换基类版本。 虽然可以不使用 new 修饰符来隐藏成员，但将收到编译器警告。 如果使用 new 来显式隐藏成员，将禁止此警告。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedC</span> : <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a><span style=\"color:#0366d6;\">类</span></h2><p>类的成员有：<span style=\"color:#0366d6;\">字段，常量，属性，方法，事件，运算符，索引器，构造函数，终结器，嵌套类型</span></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//委托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">MyEventHandler</span>(<span class=\"params\"></span>)</span>;</span><br></pre></td></tr></table></figure>\n\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Customer</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        SomeEvent += Handler;</span><br><span class=\"line\">    &#125;       </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//终结器</span></span><br><span class=\"line\">    ~Customer()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SomeEvent -= Handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数组</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span>[] days = &#123; <span class=\"string\">\"Sun\"</span>, <span class=\"string\">\"Mon\"</span>, <span class=\"string\">\"Tues\"</span>, <span class=\"string\">\"Wed\"</span>, <span class=\"string\">\"Thurs\"</span>, <span class=\"string\">\"Fri\"</span>, <span class=\"string\">\"Sat\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//事件</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> MyEventHandler SomeEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//常量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">string</span> COUNTRYNAME = <span class=\"string\">\"china\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//属性</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> username; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123; username = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Handler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">GetDay</span>(<span class=\"params\"><span class=\"keyword\">string</span> testDay</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; days.Length; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (days[j] == testDay)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.ArgumentOutOfRangeException(testDay, <span class=\"string\">\"testDay must be in the form \\\"Sun\\\", \\\"Mon\\\", etc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnSomeEvent</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SomeEvent != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SomeEvent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//索引</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"keyword\">this</span>[<span class=\"keyword\">string</span> day]</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (GetDay(day));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer object1 = <span class=\"keyword\">new</span> Customer();</span><br></pre></td></tr></table></figure>\n<h3 id=\"类继承\"><a href=\"#类继承\" class=\"headerlink\" title=\"类继承\"></a>类继承</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Manager</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Employee fields, properties, methods and events are inherited</span></span><br><span class=\"line\">    <span class=\"comment\">// New Manager fields, properties, methods and events go here...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//至少包含一个抽象方法</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Motorcycle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// Anyone can call this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">StartEngine</span>(<span class=\"params\"></span>)</span> &#123;<span class=\"comment\">/* Method statements here */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Only derived classes can call this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">AddGas</span>(<span class=\"params\"><span class=\"keyword\">int</span> gallons</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes can override the base class implementation.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\"><span class=\"keyword\">int</span> miles, <span class=\"keyword\">int</span> speed</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes can override the base class implementation.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\">TimeSpan time, <span class=\"keyword\">int</span> speed</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes must implement this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">GetTopSpeed</span>(<span class=\"params\"></span>)</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Constant</span>: <span class=\"title\">Expression</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Constant</span>(<span class=\"params\"><span class=\"keyword\">double</span> <span class=\"keyword\">value</span></span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">value</span> = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> <span class=\"title\">Evaluate</span>(<span class=\"params\">Dictionary&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">object</span>&gt; vars</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a><span style=\"color:#0366d6;\">结构</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> PostalAddress</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Fields, properties, methods and events go here...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a><span style=\"color:#0366d6;\">接口</span></h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IEquatable&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">T obj</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IEquatable&lt;T&gt;</span><br><span class=\"line\">public class Car : IEquatable&lt;Car&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Make &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Model &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Year &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Implementation of IEquatable&lt;T&gt; interface</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">Car car</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Make == car.Make &amp;&amp;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.Model == car.Model &amp;&amp;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.Year == car.Year;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a><span style=\"color:#0366d6;\">委托</span></h2><blockquote>\n<p>如类Customer中的委托</p>\n</blockquote>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a><span style=\"color:#0366d6;\">事件</span></h2><blockquote>\n<p>如类Customer中的事件</p>\n</blockquote>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a><span style=\"color:#0366d6;\">特性</span></h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Serializable</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Objects of this type can be serialized.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">System.AttributeUsage(System.AttributeTargets.Class |  </span></span><br><span class=\"line\"><span class=\"meta\">                       System.AttributeTargets.Struct)  </span></span><br><span class=\"line\"><span class=\"meta\"></span>]  </span><br><span class=\"line\">public class Author : System.Attribute  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> name;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> version;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Author</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">        version = <span class=\"number\">1.0</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Author(<span class=\"meta-string\">\"P. Ackerman\"</span>, version = 1.1)</span>]  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// P. Ackerman's code goes here...  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-1-2\"><a href=\"#C-1-2\" class=\"headerlink\" title=\"C#1.2\"></a><span style=\"color:#0366d6;\">C#1.2</span></h2><blockquote>\n<p>随 Visual Studio .NET 2003 一起提供的 C# 版本 1.2（.NET Framework 1.1）。 它对语言做了一些小改进。 最值得注意的是，从此版本开始，当 IEnumerator 实现 IDisposable 时，foreach 循环中生成的代码会在 IEnumerator 上调用 Dispose。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>C#1.0语法（发布于2000年6月,.NET Framework 1.0）</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-1-0\"><a href=\"#C-1-0\" class=\"headerlink\" title=\"C# 1.0\"></a><span style=\"color:#0366d6;\">C# 1.0</span></h1><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a><span style=\"color:#0366d6;\">数据类型</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>值类型<ul>\n<li>简单类型<ul>\n<li>有符号的整型：sbyte、short、int、long</li>\n<li>无符号的整型：byte、ushort、uint、ulong</li>\n<li>Unicode 字符：char</li>\n<li>IEEE 二进制浮点：float、double</li>\n<li>高精度十进制浮点数：decimal</li>\n<li>布尔：bool</li>\n</ul>\n</li>\n<li>枚举类型<ul>\n<li>格式为 enum E {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>结构类型<ul>\n<li>格式为 struct S {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>可以为 null 的值类型<ul>\n<li>值为 null 的其他所有值类型的扩展</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>引用类型<ul>\n<li>类类型<ul>\n<li>其他所有类型的最终基类：object</li>\n<li>Unicode 字符串：string</li>\n<li>格式为 class C {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>接口类型<ul>\n<li>格式为 interface I {…} 的用户定义类型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数组类型<ul>\n<li>一维和多维，例如 int[] 和 int[,]</li>\n</ul>\n</li>\n<li>委托类型<ul>\n<li>格式为 delegate int D(…) 的用户定义类型</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语言元素\"><a href=\"#语言元素\" class=\"headerlink\" title=\"语言元素\"></a><span style=\"color:#0366d6;\">语言元素</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>程序结构<ul>\n<li>了解 C# 语言中的关键组织概念：程序、命名空间、类型、成员和程序集。</li>\n</ul>\n</li>\n<li>类型和变量<ul>\n<li>了解 C# 语言中的值类型、引用类型和变量。</li>\n</ul>\n</li>\n<li>表达式<ul>\n<li>表达式是在操作数和运算符的基础之上构造而成。 表达式生成的是值。</li>\n</ul>\n</li>\n<li>语句<ul>\n<li>语句用于表示程序的操作。</li>\n</ul>\n</li>\n<li>类和对象<ul>\n<li>类是最基本的 C# 类型。 对象是类实例。 类是使用成员生成的，此主题也对此进行了介绍。</li>\n</ul>\n</li>\n<li>结构<ul>\n<li>与类不同，结构是属于值类型的数据结构。</li>\n</ul>\n</li>\n<li>数组<ul>\n<li>数组是一种数据结构，其中包含许多通过计算索引访问的变量。</li>\n</ul>\n</li>\n<li>接口<ul>\n<li>接口定义了可由类和结构实现的协定。 接口可以包含方法、属性、事件和索引器。 接口不提供所定义的成员的实现代码，仅指定必须由实现接口的类或结构提供的成员。</li>\n</ul>\n</li>\n<li>委托<ul>\n<li>委托类型表示对具有特定参数列表和返回类型的方法的引用。 通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。 委托类似于其他一些语言中的函数指针概念，但与函数指针不同的是，委托不仅面向对象，还类型安全。</li>\n</ul>\n</li>\n<li>特性<ul>\n<li>使用特性，程序可以指定关于类型、成员和其他实体的附加声明性信息。</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a><span style=\"color:#0366d6;\">访问修饰符</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>public<ul>\n<li>访问不受限</li>\n</ul>\n</li>\n<li>protected<ul>\n<li>只能访问此类或派生自此类的类</li>\n</ul>\n</li>\n<li>internal<ul>\n<li>访问限于当前程序集（.exe、.dll 等）</li>\n</ul>\n</li>\n<li>protected internal<ul>\n<li>访问限于包含类、派生自包含类的类或同一程序集中的类</li>\n</ul>\n</li>\n<li>private<ul>\n<li>只能访问此类</li>\n</ul>\n</li>\n<li>private protected<ul>\n<li>访问限于同一程序集中的包含类或派生自包含类的类</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"namespace\"><a href=\"#namespace\" class=\"headerlink\" title=\"namespace\"></a><span style=\"color:#0366d6;\">namespace</span></h2><blockquote>\n<p>namespace 关键字用于声明包含一组相关对象的作用域。 可以使用命名空间来组织代码元素并创建全局唯一类型。<br>可包含：另一个命名空间，class，interface，struct，enum，delegate</p>\n</blockquote>\n<h2 id=\"using\"><a href=\"#using\" class=\"headerlink\" title=\"using\"></a><span style=\"color:#0366d6;\">using</span></h2><blockquote>\n<p>using 语句定义一个范围，在此范围的末尾将释放对象</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> font1 = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"Arial\"</span>, <span class=\"number\">10.0f</span>)) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span> charset = font1.GdiCharSet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>using允许在命名空间中使用类型，这样无需在该命名空间中限定某个类型的使用</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>允许访问类型的静态成员和嵌套类型，而无需限定使用类型名称进行访问</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.Math;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为命名空间或类型创建别名。 这称为 using 别名指令</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Project = PC.MyCompany.Project;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法相关\"><a href=\"#方法相关\" class=\"headerlink\" title=\"方法相关\"></a><span style=\"color:#0366d6;\">方法相关</span></h2><h3 id=\"方法声明\"><a href=\"#方法声明\" class=\"headerlink\" title=\"方法声明\"></a>方法声明</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//public 访问修饰符</span></span><br><span class=\"line\"><span class=\"comment\">//virtual 虚方法修饰符</span></span><br><span class=\"line\"><span class=\"comment\">//int 返回值类型</span></span><br><span class=\"line\"><span class=\"comment\">//Drive 方法名称</span></span><br><span class=\"line\"><span class=\"comment\">//int miles, int speed 形参列表</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;  return 1; &#125; 方法体 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\"><span class=\"keyword\">int</span> miles, <span class=\"keyword\">int</span> speed</span>)</span> &#123;  <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"无方法体\"><a href=\"#无方法体\" class=\"headerlink\" title=\"无方法体\"></a>无方法体</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">GetTopSpeed</span>(<span class=\"params\"></span>)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数修饰符\"><a href=\"#参数修饰符\" class=\"headerlink\" title=\"参数修饰符\"></a>参数修饰符</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">params</span> 指定此参数采用可变数量的参数。</span><br><span class=\"line\">  <span class=\"comment\">//params 关键字之后不允许有任何其他参数，并且在方法声明中只允许有一个</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UseParams</span>(<span class=\"params\"><span class=\"keyword\">params</span> <span class=\"keyword\">int</span>[] list</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">ref</span> 指定此参数由引用传递，可能由调用方法读取或写入。</span><br><span class=\"line\">  <span class=\"comment\">//修饰在值类型前</span></span><br><span class=\"line\">  <span class=\"comment\">//调用前必须赋值</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SampleMethod</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"keyword\">int</span> i</span>)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<details>\n<summary>ref 修饰在引用类型前</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Product</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, <span class=\"keyword\">int</span> newID</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ItemName = name;</span><br><span class=\"line\">        ItemID = newID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ItemName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ItemID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ChangeByReference</span>(<span class=\"params\"><span class=\"keyword\">ref</span> Product itemRef</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Change the address that is stored in the itemRef parameter.   </span></span><br><span class=\"line\">    itemRef = <span class=\"keyword\">new</span> Product(<span class=\"string\">\"Stapler\"</span>, <span class=\"number\">99999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// You can change the value of one of the properties of</span></span><br><span class=\"line\">    <span class=\"comment\">// itemRef. The change happens to item in Main as well.</span></span><br><span class=\"line\">    itemRef.ItemID = <span class=\"number\">12345</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ModifyProductsByReference</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Declare an instance of Product and display its initial values.</span></span><br><span class=\"line\">    Product item = <span class=\"keyword\">new</span> Product(<span class=\"string\">\"Fasteners\"</span>, <span class=\"number\">54321</span>);</span><br><span class=\"line\">    System.Console.WriteLine(<span class=\"string\">\"Original values in Main.  Name: &#123;0&#125;, ID: &#123;1&#125;\\n\"</span>,</span><br><span class=\"line\">        item.ItemName, item.ItemID);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Pass the product instance to ChangeByReference.</span></span><br><span class=\"line\">    ChangeByReference(<span class=\"keyword\">ref</span> item);</span><br><span class=\"line\">    System.Console.WriteLine(<span class=\"string\">\"Back in Main.  Name: &#123;0&#125;, ID: &#123;1&#125;\\n\"</span>,</span><br><span class=\"line\">        item.ItemName, item.ItemID);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This method displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">// Original values in Main.  Name: Fasteners, ID: 54321</span></span><br><span class=\"line\"><span class=\"comment\">// Back in Main.  Name: Stapler, ID: 12345</span></span><br></pre></td></tr></table></figure>\n</details>   \n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">out</span> 指定此参数由引用传递，由调用方法写入。</span><br><span class=\"line\"><span class=\"comment\">//调用返回前必须赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SampleMethod</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">int</span> i</span>)</span> &#123;i=<span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h3><blockquote>\n<p>方法重载指的就是方法名称相同，但是参数不同<br>签名指的是方法名和参数列表</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2,<span class=\"keyword\">int</span> num3</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">double</span> num1, <span class=\"keyword\">int</span> num2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><blockquote>\n<p>重写基方法必须具有与 override 方法相同的签名,override 声明不能更改 virtual 方法的可访问性。 override 方法和 virtual 方法必须具有相同级别访问修饰符。override可以扩展或修改继承的<span style=\"color:#0065b3;\">方法、属性、索引器或事件</span>的抽象或虚拟实现</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedC</span> : <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">override</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"覆盖方法\"><a href=\"#覆盖方法\" class=\"headerlink\" title=\"覆盖方法\"></a>覆盖方法</h3><blockquote>\n<p>在用作声明修饰符时，new 关键字可以显式隐藏从基类继承的成员。 隐藏继承的成员时，该成员的派生版本将替换基类版本。 虽然可以不使用 new 修饰符来隐藏成员，但将收到编译器警告。 如果使用 new 来显式隐藏成员，将禁止此警告。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedC</span> : <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a><span style=\"color:#0366d6;\">类</span></h2><p>类的成员有：<span style=\"color:#0366d6;\">字段，常量，属性，方法，事件，运算符，索引器，构造函数，终结器，嵌套类型</span></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//委托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">MyEventHandler</span>(<span class=\"params\"></span>)</span>;</span><br></pre></td></tr></table></figure>\n\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Customer</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        SomeEvent += Handler;</span><br><span class=\"line\">    &#125;       </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//终结器</span></span><br><span class=\"line\">    ~Customer()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SomeEvent -= Handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数组</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span>[] days = &#123; <span class=\"string\">\"Sun\"</span>, <span class=\"string\">\"Mon\"</span>, <span class=\"string\">\"Tues\"</span>, <span class=\"string\">\"Wed\"</span>, <span class=\"string\">\"Thurs\"</span>, <span class=\"string\">\"Fri\"</span>, <span class=\"string\">\"Sat\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//事件</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> MyEventHandler SomeEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//常量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">string</span> COUNTRYNAME = <span class=\"string\">\"china\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//属性</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> username; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123; username = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Handler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">GetDay</span>(<span class=\"params\"><span class=\"keyword\">string</span> testDay</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; days.Length; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (days[j] == testDay)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.ArgumentOutOfRangeException(testDay, <span class=\"string\">\"testDay must be in the form \\\"Sun\\\", \\\"Mon\\\", etc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnSomeEvent</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SomeEvent != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SomeEvent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//索引</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"keyword\">this</span>[<span class=\"keyword\">string</span> day]</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (GetDay(day));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer object1 = <span class=\"keyword\">new</span> Customer();</span><br></pre></td></tr></table></figure>\n<h3 id=\"类继承\"><a href=\"#类继承\" class=\"headerlink\" title=\"类继承\"></a>类继承</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Manager</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Employee fields, properties, methods and events are inherited</span></span><br><span class=\"line\">    <span class=\"comment\">// New Manager fields, properties, methods and events go here...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//至少包含一个抽象方法</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Motorcycle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// Anyone can call this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">StartEngine</span>(<span class=\"params\"></span>)</span> &#123;<span class=\"comment\">/* Method statements here */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Only derived classes can call this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">AddGas</span>(<span class=\"params\"><span class=\"keyword\">int</span> gallons</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes can override the base class implementation.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\"><span class=\"keyword\">int</span> miles, <span class=\"keyword\">int</span> speed</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes can override the base class implementation.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\">TimeSpan time, <span class=\"keyword\">int</span> speed</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes must implement this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">GetTopSpeed</span>(<span class=\"params\"></span>)</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Constant</span>: <span class=\"title\">Expression</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Constant</span>(<span class=\"params\"><span class=\"keyword\">double</span> <span class=\"keyword\">value</span></span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">value</span> = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> <span class=\"title\">Evaluate</span>(<span class=\"params\">Dictionary&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">object</span>&gt; vars</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a><span style=\"color:#0366d6;\">结构</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> PostalAddress</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Fields, properties, methods and events go here...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a><span style=\"color:#0366d6;\">接口</span></h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IEquatable&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">T obj</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IEquatable&lt;T&gt;</span><br><span class=\"line\">public class Car : IEquatable&lt;Car&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Make &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Model &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Year &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Implementation of IEquatable&lt;T&gt; interface</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">Car car</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Make == car.Make &amp;&amp;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.Model == car.Model &amp;&amp;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.Year == car.Year;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a><span style=\"color:#0366d6;\">委托</span></h2><blockquote>\n<p>如类Customer中的委托</p>\n</blockquote>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a><span style=\"color:#0366d6;\">事件</span></h2><blockquote>\n<p>如类Customer中的事件</p>\n</blockquote>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a><span style=\"color:#0366d6;\">特性</span></h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Serializable</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Objects of this type can be serialized.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">System.AttributeUsage(System.AttributeTargets.Class |  </span></span><br><span class=\"line\"><span class=\"meta\">                       System.AttributeTargets.Struct)  </span></span><br><span class=\"line\"><span class=\"meta\"></span>]  </span><br><span class=\"line\">public class Author : System.Attribute  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> name;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> version;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Author</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">        version = <span class=\"number\">1.0</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Author(<span class=\"meta-string\">\"P. Ackerman\"</span>, version = 1.1)</span>]  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// P. Ackerman's code goes here...  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C-1-2\"><a href=\"#C-1-2\" class=\"headerlink\" title=\"C#1.2\"></a><span style=\"color:#0366d6;\">C#1.2</span></h2><blockquote>\n<p>随 Visual Studio .NET 2003 一起提供的 C# 版本 1.2（.NET Framework 1.1）。 它对语言做了一些小改进。 最值得注意的是，从此版本开始，当 IEnumerator 实现 IDisposable 时，foreach 循环中生成的代码会在 IEnumerator 上调用 Dispose。</p>\n</blockquote>"},{"title":"C#拾遗","date":"2020-02-18T16:00:00.000Z","_content":"C#常见知识点整理\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n\n## <span style=\"color:#0366d6;\">类型的默认值</span>\n\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认值</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何引用类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">null</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置整数数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置浮点型数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">bool</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">'\\0' (U + 0000)</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">表达式 (E)0 生成的值，其中 E 是枚举标识符。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">通过如下设置生成的值：将所有值类型的字段设置为其默认值，将所有引用类型的字段设置为 null。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何可以为 null 的值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">HasValue 属性为 false 且 Value 属性未定义的实例。 该默认值也称为可以为 null 的值类型的“null” 值。</td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">强制转换和类型转换</span>\n### 隐式转换\n>对于内置数值类型，如果要存储的值无需截断或四舍五入即可适应变量，则可以进行隐式转换。 对于整型类型，这意味着源类型的范围是目标类型范围的正确子集。例如，long 类型的变量（64 位整数）能够存储 int（32 位整数）可存储的任何值。 在下面的示例中，编译器先将右侧的 num 值隐式转换为 long 类型，再将它赋给 bigNum。\n```csharp\n// Implicit conversion. A long can\n// hold any value an int can hold, and more!\nint num = 2147483647;\nlong bigNum = num;\n```\n### 强制转换\n>但是，如果进行转换可能会导致信息丢失，则编译器会要求执行显式转换，显式转换也称为强制转换。强制转换是显式告知编译器你打算进行转换且你知道可能会发生数据丢失的一种方式。若要执行强制转换，请在要转换的值或变量前面的括号中指定要强制转换到的类型。下面的程序将 double 强制转换为 int。如不强制转换则该程序不会进行编译。\n```csharp\n double x = 1234.7;\n int a;\n // Cast double to int.\n a = (int)x;\n```\n### 用户定义转换运算符\n>operator和implicit(隐式)或explicit(显示)关键字分别用于定义隐式转换或显式转换。\n<details>\n<summary>展开查看</summary>\n\n```csharp\nusing System;\n\npublic readonly struct Digit\n{\n    private readonly byte digit;\n\n    public Digit(byte digit)\n    {\n        if (digit > 9)\n        {\n            throw new ArgumentOutOfRangeException(nameof(digit), \"Digit cannot be greater than nine.\");\n        }\n        this.digit = digit;\n    }\n\n    public static implicit operator byte(Digit d) => d.digit;\n    public static explicit operator Digit(byte b) => new Digit(b);\n\n    public override string ToString() => $\"{digit}\";\n}\n\npublic static class UserDefinedConversions\n{\n    public static void Main()\n    {\n        var d = new Digit(7);\n        \n        byte number = d;\n        Console.WriteLine(number);  // output: 7\n\n        Digit digit = (Digit)number;\n        Console.WriteLine(digit);  // output: 7\n    }\n}\n```\n</details>\n\n### 使用帮助程序类进行转换\n\n```csharp\n System.BitConverter,System.Convert,Int32.Parse\n ```\n\n ## <span style=\"color:#0366d6;\">装箱和取消装箱</span>\n\n ### 装箱\n >装箱是值类型到 object 类型或到此值类型所实现的任何接口类型的隐式转换。对值类型装箱会在堆中分配一个对象实例，并将该值复制到新的对象中。\n ```csharp\n int i = 123;\n // Boxing copies the value of i into object o.\nobject o = i; \n ```\n ### 拆箱\n >取消装箱是从 object 类型到值类型或从接口类型到实现该接口的值类型的显式转换。取消装箱操作包括：\n1.检查对象实例，以确保它是给定值类型的装箱值。\n2.将该值从实例复制到值类型变量中。\n```csharp\nint i = 123;      // a value type\nobject o = i;     // boxing\nint j = (int)o;   // unboxing\n```\n ## <span style=\"color:#0366d6;\">访问修饰符</span>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">声明的可访问性</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">含义</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any other code in the same assembly or another assembly that references it.Access is not restricted</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only by code in the same class, or in a class that is derived from that class.Access is limited to the containing class or types derived from the containing class.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">internal</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any code in the same assembly, but not from another assembly.Access is limited to the current assembly.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">protected internal</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any code in the assembly in which it's declared, or from within a derived class in another assembly.Access is limited to the current assembly or types derived from the containing class.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only by code in the same class or struct.Access is limited to the containing type.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">private protected</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only within its declaring assembly, by code in the same class or in a type that is derived from that class.Access is limited to the containing class or types derived from the containing class within the current assembly.</td>\n</tr>\n</table>\n\n>未嵌套在其他类型中的顶级类型只能具有 internal 或 public 可访问性。 这些类型的默认可访问性为 internal。\n作为其他类型的成员的嵌套类型可以具有如下表所示的声明的可访问性。\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">成员</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认成员可访问性</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">允许的成员的声明的可访问性</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">None</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">public,protected,internal,private,protected internal,private protected</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">None</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">public internal private</td>\n</tr>\n</table>","source":"_posts/csharpgrammar-2.md","raw":"---\ntitle: C#拾遗\ndate: 2020-02-19\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#常见知识点整理\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n\n## <span style=\"color:#0366d6;\">类型的默认值</span>\n\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认值</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何引用类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">null</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置整数数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置浮点型数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">bool</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">'\\0' (U + 0000)</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">表达式 (E)0 生成的值，其中 E 是枚举标识符。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">通过如下设置生成的值：将所有值类型的字段设置为其默认值，将所有引用类型的字段设置为 null。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何可以为 null 的值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">HasValue 属性为 false 且 Value 属性未定义的实例。 该默认值也称为可以为 null 的值类型的“null” 值。</td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">强制转换和类型转换</span>\n### 隐式转换\n>对于内置数值类型，如果要存储的值无需截断或四舍五入即可适应变量，则可以进行隐式转换。 对于整型类型，这意味着源类型的范围是目标类型范围的正确子集。例如，long 类型的变量（64 位整数）能够存储 int（32 位整数）可存储的任何值。 在下面的示例中，编译器先将右侧的 num 值隐式转换为 long 类型，再将它赋给 bigNum。\n```csharp\n// Implicit conversion. A long can\n// hold any value an int can hold, and more!\nint num = 2147483647;\nlong bigNum = num;\n```\n### 强制转换\n>但是，如果进行转换可能会导致信息丢失，则编译器会要求执行显式转换，显式转换也称为强制转换。强制转换是显式告知编译器你打算进行转换且你知道可能会发生数据丢失的一种方式。若要执行强制转换，请在要转换的值或变量前面的括号中指定要强制转换到的类型。下面的程序将 double 强制转换为 int。如不强制转换则该程序不会进行编译。\n```csharp\n double x = 1234.7;\n int a;\n // Cast double to int.\n a = (int)x;\n```\n### 用户定义转换运算符\n>operator和implicit(隐式)或explicit(显示)关键字分别用于定义隐式转换或显式转换。\n<details>\n<summary>展开查看</summary>\n\n```csharp\nusing System;\n\npublic readonly struct Digit\n{\n    private readonly byte digit;\n\n    public Digit(byte digit)\n    {\n        if (digit > 9)\n        {\n            throw new ArgumentOutOfRangeException(nameof(digit), \"Digit cannot be greater than nine.\");\n        }\n        this.digit = digit;\n    }\n\n    public static implicit operator byte(Digit d) => d.digit;\n    public static explicit operator Digit(byte b) => new Digit(b);\n\n    public override string ToString() => $\"{digit}\";\n}\n\npublic static class UserDefinedConversions\n{\n    public static void Main()\n    {\n        var d = new Digit(7);\n        \n        byte number = d;\n        Console.WriteLine(number);  // output: 7\n\n        Digit digit = (Digit)number;\n        Console.WriteLine(digit);  // output: 7\n    }\n}\n```\n</details>\n\n### 使用帮助程序类进行转换\n\n```csharp\n System.BitConverter,System.Convert,Int32.Parse\n ```\n\n ## <span style=\"color:#0366d6;\">装箱和取消装箱</span>\n\n ### 装箱\n >装箱是值类型到 object 类型或到此值类型所实现的任何接口类型的隐式转换。对值类型装箱会在堆中分配一个对象实例，并将该值复制到新的对象中。\n ```csharp\n int i = 123;\n // Boxing copies the value of i into object o.\nobject o = i; \n ```\n ### 拆箱\n >取消装箱是从 object 类型到值类型或从接口类型到实现该接口的值类型的显式转换。取消装箱操作包括：\n1.检查对象实例，以确保它是给定值类型的装箱值。\n2.将该值从实例复制到值类型变量中。\n```csharp\nint i = 123;      // a value type\nobject o = i;     // boxing\nint j = (int)o;   // unboxing\n```\n ## <span style=\"color:#0366d6;\">访问修饰符</span>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">声明的可访问性</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">含义</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any other code in the same assembly or another assembly that references it.Access is not restricted</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only by code in the same class, or in a class that is derived from that class.Access is limited to the containing class or types derived from the containing class.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">internal</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any code in the same assembly, but not from another assembly.Access is limited to the current assembly.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">protected internal</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any code in the assembly in which it's declared, or from within a derived class in another assembly.Access is limited to the current assembly or types derived from the containing class.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only by code in the same class or struct.Access is limited to the containing type.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">private protected</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only within its declaring assembly, by code in the same class or in a type that is derived from that class.Access is limited to the containing class or types derived from the containing class within the current assembly.</td>\n</tr>\n</table>\n\n>未嵌套在其他类型中的顶级类型只能具有 internal 或 public 可访问性。 这些类型的默认可访问性为 internal。\n作为其他类型的成员的嵌套类型可以具有如下表所示的声明的可访问性。\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">成员</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认成员可访问性</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">允许的成员的声明的可访问性</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">None</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">public,protected,internal,private,protected internal,private protected</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">None</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">public internal private</td>\n</tr>\n</table>","slug":"csharpgrammar-2","published":1,"updated":"2022-08-17T06:55:45.676Z","_id":"ck6ugfc310021qcri8rg42c23","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#常见知识点整理</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h2 id=\"类型的默认值\"><a href=\"#类型的默认值\" class=\"headerlink\" title=\"类型的默认值\"></a><span style=\"color:#0366d6;\">类型的默认值</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认值</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何引用类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">null</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置整数数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置浮点型数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">bool</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">'\\0' (U + 0000)</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">表达式 (E)0 生成的值，其中 E 是枚举标识符。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">通过如下设置生成的值：将所有值类型的字段设置为其默认值，将所有引用类型的字段设置为 null。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何可以为 null 的值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">HasValue 属性为 false 且 Value 属性未定义的实例。 该默认值也称为可以为 null 的值类型的“null” 值。</td>\n</tr>\n</table>\n\n<h2 id=\"强制转换和类型转换\"><a href=\"#强制转换和类型转换\" class=\"headerlink\" title=\"强制转换和类型转换\"></a><span style=\"color:#0366d6;\">强制转换和类型转换</span></h2><h3 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h3><blockquote>\n<p>对于内置数值类型，如果要存储的值无需截断或四舍五入即可适应变量，则可以进行隐式转换。 对于整型类型，这意味着源类型的范围是目标类型范围的正确子集。例如，long 类型的变量（64 位整数）能够存储 int（32 位整数）可存储的任何值。 在下面的示例中，编译器先将右侧的 num 值隐式转换为 long 类型，再将它赋给 bigNum。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Implicit conversion. A long can</span></span><br><span class=\"line\"><span class=\"comment\">// hold any value an int can hold, and more!</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> bigNum = num;</span><br></pre></td></tr></table></figure>\n<h3 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h3><blockquote>\n<p>但是，如果进行转换可能会导致信息丢失，则编译器会要求执行显式转换，显式转换也称为强制转换。强制转换是显式告知编译器你打算进行转换且你知道可能会发生数据丢失的一种方式。若要执行强制转换，请在要转换的值或变量前面的括号中指定要强制转换到的类型。下面的程序将 double 强制转换为 int。如不强制转换则该程序不会进行编译。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> x = <span class=\"number\">1234.7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"comment\">// Cast double to int.</span></span><br><span class=\"line\">a = (<span class=\"keyword\">int</span>)x;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户定义转换运算符\"><a href=\"#用户定义转换运算符\" class=\"headerlink\" title=\"用户定义转换运算符\"></a>用户定义转换运算符</h3><blockquote>\n<p>operator和implicit(隐式)或explicit(显示)关键字分别用于定义隐式转换或显式转换。</p>\n</blockquote>\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">struct</span> Digit</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">byte</span> digit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Digit</span>(<span class=\"params\"><span class=\"keyword\">byte</span> digit</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (digit &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(digit), <span class=\"string\">\"Digit cannot be greater than nine.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.digit = digit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">implicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">byte</span>(<span class=\"params\">Digit d</span>)</span> =&gt; d.digit;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">Digit</span>(<span class=\"params\"><span class=\"keyword\">byte</span> b</span>)</span> =&gt; <span class=\"keyword\">new</span> Digit(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span> =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;digit&#125;</span>\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">UserDefinedConversions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Digit(<span class=\"number\">7</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">byte</span> number = d;</span><br><span class=\"line\">        Console.WriteLine(number);  <span class=\"comment\">// output: 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Digit digit = (Digit)number;</span><br><span class=\"line\">        Console.WriteLine(digit);  <span class=\"comment\">// output: 7</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"使用帮助程序类进行转换\"><a href=\"#使用帮助程序类进行转换\" class=\"headerlink\" title=\"使用帮助程序类进行转换\"></a>使用帮助程序类进行转换</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.BitConverter,System.Convert,Int32.Parse</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"装箱和取消装箱\"><a href=\"#装箱和取消装箱\" class=\"headerlink\" title=\"装箱和取消装箱\"></a><span style=\"color:#0366d6;\">装箱和取消装箱</span></h2><h3 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h3><blockquote>\n<p>装箱是值类型到 object 类型或到此值类型所实现的任何接口类型的隐式转换。对值类型装箱会在堆中分配一个对象实例，并将该值复制到新的对象中。<br> <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">int</span> i = <span class=\"number\">123</span>;</span><br><span class=\"line\"> <span class=\"comment\">// Boxing copies the value of i into object o.</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> o = i;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h3><blockquote>\n<p>取消装箱是从 object 类型到值类型或从接口类型到实现该接口的值类型的显式转换。取消装箱操作包括：<br>1.检查对象实例，以确保它是给定值类型的装箱值。<br>2.将该值从实例复制到值类型变量中。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">123</span>;      <span class=\"comment\">// a value type</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> o = i;     <span class=\"comment\">// boxing</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> j = (<span class=\"keyword\">int</span>)o;   <span class=\"comment\">// unboxing</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a><span style=\"color:#0366d6;\">访问修饰符</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">声明的可访问性</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">含义</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any other code in the same assembly or another assembly that references it.Access is not restricted</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only by code in the same class, or in a class that is derived from that class.Access is limited to the containing class or types derived from the containing class.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">internal</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any code in the same assembly, but not from another assembly.Access is limited to the current assembly.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">protected internal</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any code in the assembly in which it's declared, or from within a derived class in another assembly.Access is limited to the current assembly or types derived from the containing class.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only by code in the same class or struct.Access is limited to the containing type.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">private protected</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only within its declaring assembly, by code in the same class or in a type that is derived from that class.Access is limited to the containing class or types derived from the containing class within the current assembly.</td>\n</tr>\n</table>\n\n<blockquote>\n<p>未嵌套在其他类型中的顶级类型只能具有 internal 或 public 可访问性。 这些类型的默认可访问性为 internal。<br>作为其他类型的成员的嵌套类型可以具有如下表所示的声明的可访问性。</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">成员</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认成员可访问性</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">允许的成员的声明的可访问性</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">None</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">public,protected,internal,private,protected internal,private protected</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">None</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">public internal private</td>\n</tr>\n</table>","site":{"data":{}},"excerpt":"<p>C#常见知识点整理</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h2 id=\"类型的默认值\"><a href=\"#类型的默认值\" class=\"headerlink\" title=\"类型的默认值\"></a><span style=\"color:#0366d6;\">类型的默认值</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认值</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何引用类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">null</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置整数数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置浮点型数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">bool</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">'\\0' (U + 0000)</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">表达式 (E)0 生成的值，其中 E 是枚举标识符。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">通过如下设置生成的值：将所有值类型的字段设置为其默认值，将所有引用类型的字段设置为 null。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何可以为 null 的值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">HasValue 属性为 false 且 Value 属性未定义的实例。 该默认值也称为可以为 null 的值类型的“null” 值。</td>\n</tr>\n</table>\n\n<h2 id=\"强制转换和类型转换\"><a href=\"#强制转换和类型转换\" class=\"headerlink\" title=\"强制转换和类型转换\"></a><span style=\"color:#0366d6;\">强制转换和类型转换</span></h2><h3 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h3><blockquote>\n<p>对于内置数值类型，如果要存储的值无需截断或四舍五入即可适应变量，则可以进行隐式转换。 对于整型类型，这意味着源类型的范围是目标类型范围的正确子集。例如，long 类型的变量（64 位整数）能够存储 int（32 位整数）可存储的任何值。 在下面的示例中，编译器先将右侧的 num 值隐式转换为 long 类型，再将它赋给 bigNum。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Implicit conversion. A long can</span></span><br><span class=\"line\"><span class=\"comment\">// hold any value an int can hold, and more!</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> bigNum = num;</span><br></pre></td></tr></table></figure>\n<h3 id=\"强制转换\"><a href=\"#强制转换\" class=\"headerlink\" title=\"强制转换\"></a>强制转换</h3><blockquote>\n<p>但是，如果进行转换可能会导致信息丢失，则编译器会要求执行显式转换，显式转换也称为强制转换。强制转换是显式告知编译器你打算进行转换且你知道可能会发生数据丢失的一种方式。若要执行强制转换，请在要转换的值或变量前面的括号中指定要强制转换到的类型。下面的程序将 double 强制转换为 int。如不强制转换则该程序不会进行编译。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> x = <span class=\"number\">1234.7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"comment\">// Cast double to int.</span></span><br><span class=\"line\">a = (<span class=\"keyword\">int</span>)x;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户定义转换运算符\"><a href=\"#用户定义转换运算符\" class=\"headerlink\" title=\"用户定义转换运算符\"></a>用户定义转换运算符</h3><blockquote>\n<p>operator和implicit(隐式)或explicit(显示)关键字分别用于定义隐式转换或显式转换。</p>\n</blockquote>\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">struct</span> Digit</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">byte</span> digit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Digit</span>(<span class=\"params\"><span class=\"keyword\">byte</span> digit</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (digit &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(digit), <span class=\"string\">\"Digit cannot be greater than nine.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.digit = digit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">implicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">byte</span>(<span class=\"params\">Digit d</span>)</span> =&gt; d.digit;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">Digit</span>(<span class=\"params\"><span class=\"keyword\">byte</span> b</span>)</span> =&gt; <span class=\"keyword\">new</span> Digit(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span> =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;digit&#125;</span>\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">UserDefinedConversions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Digit(<span class=\"number\">7</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">byte</span> number = d;</span><br><span class=\"line\">        Console.WriteLine(number);  <span class=\"comment\">// output: 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Digit digit = (Digit)number;</span><br><span class=\"line\">        Console.WriteLine(digit);  <span class=\"comment\">// output: 7</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"使用帮助程序类进行转换\"><a href=\"#使用帮助程序类进行转换\" class=\"headerlink\" title=\"使用帮助程序类进行转换\"></a>使用帮助程序类进行转换</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.BitConverter,System.Convert,Int32.Parse</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"装箱和取消装箱\"><a href=\"#装箱和取消装箱\" class=\"headerlink\" title=\"装箱和取消装箱\"></a><span style=\"color:#0366d6;\">装箱和取消装箱</span></h2><h3 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h3><blockquote>\n<p>装箱是值类型到 object 类型或到此值类型所实现的任何接口类型的隐式转换。对值类型装箱会在堆中分配一个对象实例，并将该值复制到新的对象中。<br> <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">int</span> i = <span class=\"number\">123</span>;</span><br><span class=\"line\"> <span class=\"comment\">// Boxing copies the value of i into object o.</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> o = i;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h3><blockquote>\n<p>取消装箱是从 object 类型到值类型或从接口类型到实现该接口的值类型的显式转换。取消装箱操作包括：<br>1.检查对象实例，以确保它是给定值类型的装箱值。<br>2.将该值从实例复制到值类型变量中。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">123</span>;      <span class=\"comment\">// a value type</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> o = i;     <span class=\"comment\">// boxing</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> j = (<span class=\"keyword\">int</span>)o;   <span class=\"comment\">// unboxing</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a><span style=\"color:#0366d6;\">访问修饰符</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">声明的可访问性</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">含义</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any other code in the same assembly or another assembly that references it.Access is not restricted</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only by code in the same class, or in a class that is derived from that class.Access is limited to the containing class or types derived from the containing class.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">internal</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any code in the same assembly, but not from another assembly.Access is limited to the current assembly.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">protected internal</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed by any code in the assembly in which it's declared, or from within a derived class in another assembly.Access is limited to the current assembly or types derived from the containing class.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only by code in the same class or struct.Access is limited to the containing type.</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">private protected</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">The type or member can be accessed only within its declaring assembly, by code in the same class or in a type that is derived from that class.Access is limited to the containing class or types derived from the containing class within the current assembly.</td>\n</tr>\n</table>\n\n<blockquote>\n<p>未嵌套在其他类型中的顶级类型只能具有 internal 或 public 可访问性。 这些类型的默认可访问性为 internal。<br>作为其他类型的成员的嵌套类型可以具有如下表所示的声明的可访问性。</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">成员</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认成员可访问性</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">允许的成员的声明的可访问性</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">None</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">public,protected,internal,private,protected internal,private protected</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">None</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">private</td>\n<td style=\"width:55%;border-left:0px;border-right:0px;\">public internal private</td>\n</tr>\n</table>"},{"title":"C#2.0语法","date":"2020-02-21T16:00:00.000Z","_content":"C#2.0语法（发布于2005，.NET Framework 2.0 .NET Framework 3.0）\n\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C# 2.0</span>\n## <span style=\"color:#0366d6;\">:: 运算符</span>\n>使用命名空间别名限定符 :: 访问已设置别名的命名空间的成员。\n>使用 using 别名指令创建的命名空间别名\n```csharp\nusing forwinforms = System.Drawing;\nusing forwpf = System.Windows;\n\npublic class Converters\n{\n    public static forwpf::Point Convert(forwinforms::Point point) => new forwpf::Point(point.X, point.Y);\n}\n```\n>外部别名,有时你可能不得不引用具有相同的完全限定类型名称的程序集的两个版本\nGridV1::Grid 是 grid.dll 中的网格控件，GridV2::Grid 是 grid20.dll 中的网格控件\n```csharp\n/r:GridV1=grid.dll\n\n/r:GridV2=grid20.dll\n\nextern alias GridV1;\n\nextern alias GridV2;\n```\n>global 别名，该别名是全局命名空间别名。与 :: 限定符一起使用时，global 别名始终引用全局命名空间，即使存在用户定义的 global 命名空间别名也是如此\n以下示例使用 global 别名访问 .NET System 命名空间，该命名空间是全局命名空间的成员。如果没有 global 别名，则将访问用户定义的 System 命名空间（该命名空间是 MyCompany.MyProduct 命名空间的成员）\n```csharp\nnamespace MyCompany.MyProduct.System\n{\n    class Program\n    {\n        static void Main() => global::System.Console.WriteLine(\"Using global alias\");\n    }\n\n    class Console\n    {\n        string Suggestion => \"Consider renaming this class\";\n    }\n}\n```\n## <span style=\"color:#0366d6;\">getter/setter 单独可访问性</span>\n>就是在get或者set前面可以加访问修饰符\n```csharp\npublic class User\n{\n    public User(int age)\n    {\n      this.age=age;\n    }\n    public int age;\n    public Age {\n      get {return age;}\n      private set{age=value;}\n    }\n}\n```\n## <span style=\"color:#0366d6;\">静态类</span>\n>以下列表提供静态类的主要功能：\n1.只包含静态成员。\n2.无法进行实例化。\n3.会进行密封。\n4.不能包含实例构造函数。\n静态类会进行密封，因此不能继承。 它们不能继承自任何类（除了 Object）。 静态类不能包含实例构造函数；但是，它们可以包含静态构造函数。\n```csharp\npublic static class TemperatureConverter\n{\n    public static double CelsiusToFahrenheit(string temperatureCelsius)\n    {\n        // Convert argument to double for calculations.\n        double celsius = Double.Parse(temperatureCelsius);\n\n        // Convert Celsius to Fahrenheit.\n        double fahrenheit = (celsius * 9 / 5) + 32;\n\n        return fahrenheit;\n    }\n\n    public static double FahrenheitToCelsius(string temperatureFahrenheit)\n    {\n        // Convert argument to double for calculations.\n        double fahrenheit = Double.Parse(temperatureFahrenheit);\n\n        // Convert Fahrenheit to Celsius.\n        double celsius = (fahrenheit - 32) * 5 / 9;\n\n        return celsius;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">协变和逆变</span>\n>协变和逆变能够实现数组类型、委托类型和泛型类型参数的隐式引用转换。协变保留分配兼容性，逆变则与之相反。\n>数组协变和逆变\n```csharp\npublic class First { }  \npublic class Second : First { }  \npublic delegate First SampleDelegate(Second a);  \n```\n>委托协变和逆变\n```csharp\n// Matching signature.  \npublic static First ASecondRFirst(Second second)  \n{ return new First(); }  \n  \n// The return type is more derived.  \npublic static Second ASecondRSecond(Second second)  \n{ return new Second(); }  \n  \n// The argument type is less derived.  \npublic static First AFirstRFirst(First first)  \n{ return new First(); }  \n  \n// The return type is more derived   \n// and the argument type is less derived.  \npublic static Second AFirstRSecond(First first)  \n{ return new Second(); }   \n```\n\n```csharp\n// Assigning a method with a matching signature   \n// to a non-generic delegate. No conversion is necessary.  \nSampleDelegate dNonGeneric = ASecondRFirst;  \n// Assigning a method with a more derived return type   \n// and less derived argument type to a non-generic delegate.  \n// The implicit conversion is used.  \nSampleDelegate dNonGenericConversion = AFirstRSecond;  \n```\n## <span style=\"color:#0366d6;\">可为空的值类型</span>\n### 声明和赋值\n>由于值类型可隐式转换为相应的可为空的值类型，因此可以像向其基础值类型赋值一样，向可为空值类型的变量赋值。 还可分配 null 值。\n```csharp\ndouble? pi = 3.14;\nchar? letter = 'a';\n\nint m2 = 10;\nint? m = m2;\n\nbool? flag = null;\n\n// An array of a nullable type:\nint?[] arr = new int?[10];\n```\n### 提升的运算符\n>预定义的一元运算符和二元运算符或值类型 T 支持的任何重载运算符也受相应的可为空值类型 T? 支持。 如果一个或全部两个操作数为 null ，则这些运算符（也称为提升的运算符）将生成 null；否则，运算符使用其操作数所包含的值来计算结果。\n```csharp\nint? a = 10;\nint? b = null;\nint? c = 10;\n\na++;        // a is 11\na = a * c;  // a is 110\na = a + b;  // a is null\n```\n>对于比较运算符 <、>、<= 和 >=，如果一个或全部两个操作数都为 null，则结果为 false；否则，将比较操作数的包含值。 请勿作出如下假定：由于某个特定的比较（例如 <=）返回 false，则相反的比较 (>) 返回 true\n```csharp\nint? a = 10;\nConsole.WriteLine($\"{a} >= null is {a >= null}\");\nConsole.WriteLine($\"{a} < null is {a < null}\");\nConsole.WriteLine($\"{a} == null is {a == null}\");\n// Output:\n// 10 >= null is False\n// 10 < null is False\n// 10 == null is False\n```\n>对于相等运算符 ==，如果两个操作数都为 null，则结果为 true；如果只有一个操作数为 null，则结果为 false；否则，将比较操作数的包含值。\n对于不等运算符 !=，如果两个操作数都为 null，则结果为 false；如果只有一个操作数为 null，则结果为 true；否则，将比较操作数的包含值。\n```csharp\nint? b = null;\nint? c = null;\nConsole.WriteLine($\"null >= null is {b >= c}\");\nConsole.WriteLine($\"null == null is {b == c}\");\n// Output:\n// null >= null is False\n// null == null is True\n```\n### 装箱和取消装箱\n>可为空值类型的实例 T?已装箱，如下所示\n1.如果 HasValue 返回 false，则生成空引用\n2.如果 HasValue 返回 true，则基础值类型 T 的对应值将装箱，而不对 Nullable \\<T\\> 的实例进行装箱\n可将值类型 T 的已装箱值取消装箱到相应的可为空值类型 T?\n```csharp\nint a = 41;\nobject aBoxed = a;\nint? aNullable = (int?)aBoxed;\nConsole.WriteLine($\"Value of aNullable: {aNullable}\");\n\nobject aNullableBoxed = aNullable;\nif (aNullableBoxed is int valueOfA)\n{\n    Console.WriteLine($\"aNullableBoxed is boxed int: {valueOfA}\");\n}\n// Output:\n// Value of aNullable: 41\n// aNullableBoxed is boxed int: 41\n```\n## <span style=\"color:#0366d6;\">部分类型</span>\n>拆分<span style=\"color:#0065b3;\">类、结构、接口、方法</span>的定义到两个或更多的文件中是可能的\npartial 修饰符不可用于委托或枚举声明中\n```csharp\npublic partial class Employee\n{\n    public void DoWork()\n    {\n    }\n}\n\npublic partial class Employee\n{\n    public void GoToLunch()\n    {\n    }\n}\n```\n## <span style=\"color:#0366d6;\">匿名方法</span>\n>delegate 运算符创建一个可以转换为委托类型的匿名方法\n```csharp\nFunc<int, int, int> sum = delegate (int a, int b) { return a + b; };\nConsole.WriteLine(sum(3, 4));  // output: 7\n```\n## <span style=\"color:#0366d6;\">迭代器</span>\n>yield不是保留字，只有在 return 或 break 关键字之前使用时才有特殊含义\n迭代器 可用于逐步迭代集合，例如列表和数组。迭代器方法或 get 访问器可对集合执行自定义迭代。 迭代器方法使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器函数时，将从该位置重新开始执行\n```csharp\nstatic void Main()\n{\n    foreach (int number in SomeNumbers())\n    {\n        Console.Write(number.ToString() + \" \");\n    }\n    // Output: 3 5 8\n    Console.ReadKey();\n}\n\npublic static System.Collections.IEnumerable SomeNumbers()\n{\n    yield return 3;\n    yield return 5;\n    yield return 8;\n}\n```\n>迭代器方法或 get 访问器的返回类型可以是IEnumerable、IEnumerable\\<T\\>、IEnumerator或IEnumerator\\<T\\>可以使用 yield break 语句来终止迭代\n迭代器可用作一种方法，或一个 get 访问器。不能在<span style=\"color:#0065b3;\">事件、实例构造函数、静态构造函数或静态终结器</span>中使用迭代器。\n必须存在从 yield return 语句中的表达式类型到迭代器返回的 IEnumerable<T\\> 类型参数的隐式转换。\n即使将迭代器编写成方法，编译器也会将其转换为实际上是状态机的嵌套类。可使用 Ildasm.exe 工具查看\n<details>\n<summary>点开查看</summary>\n\n```csharp\n\npublic class Zoo : IEnumerable\n{\n    // Private members.\n    private List<Animal> animals = new List<Animal>();\n\n    // Public methods.\n    public void AddMammal(string name)\n    {\n        animals.Add(new Animal { Name = name, Type = Animal.TypeEnum.Mammal });\n    }\n\n    public void AddBird(string name)\n    {\n        animals.Add(new Animal { Name = name, Type = Animal.TypeEnum.Bird });\n    }\n\n    public IEnumerator GetEnumerator()\n    {\n        foreach (Animal theAnimal in animals)\n        {\n            yield return theAnimal.Name;\n        }\n    }\n\n    // Public members.\n    public IEnumerable Mammals\n    {\n        get { return AnimalsForType(Animal.TypeEnum.Mammal); }\n    }\n\n    public IEnumerable Birds\n    {\n        get { return AnimalsForType(Animal.TypeEnum.Bird); }\n    }\n\n    // Private methods.\n    private IEnumerable AnimalsForType(Animal.TypeEnum type)\n    {\n        foreach (Animal theAnimal in animals)\n        {\n            if (theAnimal.Type == type)\n            {\n                yield return theAnimal.Name;\n            }\n        }\n    }\n\n    // Private class.\n    private class Animal\n    {\n        public enum TypeEnum { Bird, Mammal }\n\n        public string Name { get; set; }\n        public TypeEnum Type { get; set; }\n    }\n}\n```\n</details>\n\n>引用类实例 (theZoo) 的 foreach 语句隐式调用 GetEnumerator 方法。 引用 Birds 和 Mammals 属性的 foreach 语句使用 AnimalsForType 命名迭代器方法。\n<details>\n<summary>点开查看</summary>\n\n```csharp\nstatic void Main()\n{\n    Zoo theZoo = new Zoo();\n\n    theZoo.AddMammal(\"Whale\");\n    theZoo.AddMammal(\"Rhinoceros\");\n    theZoo.AddBird(\"Penguin\");\n    theZoo.AddBird(\"Warbler\");\n\n    foreach (string name in theZoo)\n    {\n        Console.Write(name + \" \");\n    }\n    Console.WriteLine();\n    // Output: Whale Rhinoceros Penguin Warbler\n\n    foreach (string name in theZoo.Birds)\n    {\n        Console.Write(name + \" \");\n    }\n    Console.WriteLine();\n    // Output: Penguin Warbler\n\n    foreach (string name in theZoo.Mammals)\n    {\n        Console.Write(name + \" \");\n    }\n    Console.WriteLine();\n    // Output: Whale Rhinoceros\n\n    Console.ReadKey();\n}\n```\n</details>\n\n## <span style=\"color:#0366d6;\">泛型</span>\n### 泛型类\n>泛型类封装不特定于特定数据类型的操作。泛型类最常见用法是用于链接列表、哈希表、堆栈、队列和树等集合。 无论存储数据的类型如何，添加项和从集合删除项等操作的执行方式基本相同。\n```csharp\nclass BaseNode { }\nclass BaseNodeGeneric<T> { }\n\n// concrete type\nclass NodeConcrete<T> : BaseNode { }\n```\n>继承封闭类型\n```csharp\n//closed constructed type\nclass NodeClosed<T> : BaseNodeGeneric<int> { }\n```\n>继承开放类型\n```csharp\n//open constructed type \nclass NodeOpen<T> : BaseNodeGeneric<T> { }\n```\n>泛型类可继承自具体的封闭式构造或开放式构造基类\n```csharp\n//No error\nclass Node1 : BaseNodeGeneric<int> { }\n\n//Generates an error\n//class Node2 : BaseNodeGeneric<T> {}\n\n//Generates an error\n//class Node3 : T {}\n```\n>继承自开放式的泛型类必须对非此继承任何基类类型参数提供类型参数\n```csharp\nclass BaseNodeMultiple<T, U> { }\n\n//No error\nclass Node4<T> : BaseNodeMultiple<T, int> { }\n\n//No error\nclass Node5<T, U> : BaseNodeMultiple<T, U> { }\n\n//Generates an error\n//class Node6<T> : BaseNodeMultiple<T, U> {} \n```\n>继承自开放式构造类型的泛型类必须指定作为基类型上约束\n```csharp\nclass NodeItem<T> where T : System.IComparable<T>, new() { }\nclass SpecialNodeItem<T> : NodeItem<T> where T : System.IComparable<T>, new() { }\n```\n>开放式构造和封闭式构造类型可用作方法参数\n```csharp\nvoid Swap<T>(List<T> list1, List<T> list2)\n{\n    //code to swap items\n}\n\nvoid Swap(List<int> list1, List<int> list2)\n{\n    //code to swap items\n}\n```\n>派生类可以扩展基类类型的个数\n```csharp\nclass BaseNodeMultiple<T> { }\n\n//No error\nclass Node4<T,U> : BaseNodeMultiple<T> { }\n\n```\n### 泛型接口\n>接口被指定为类型参数上的约束时，仅可使用实现接口的类型\n<details>\n<summary>展开查看</summary>\n\n```csharp\n//Type parameter T in angle brackets.\npublic class GenericList<T> : System.Collections.Generic.IEnumerable<T>\n{\n    protected Node head;\n    protected Node current = null;\n\n    // Nested class is also generic on T\n    protected class Node\n    {\n        public Node next;\n        private T data;  //T as private member datatype\n\n        public Node(T t)  //T used in non-generic constructor\n        {\n            next = null;\n            data = t;\n        }\n\n        public Node Next\n        {\n            get { return next; }\n            set { next = value; }\n        }\n\n        public T Data  //T as return type of property\n        {\n            get { return data; }\n            set { data = value; }\n        }\n    }\n\n    public GenericList()  //constructor\n    {\n        head = null;\n    }\n\n    public void AddHead(T t)  //T as method parameter type\n    {\n        Node n = new Node(t);\n        n.Next = head;\n        head = n;\n    }\n\n    // Implementation of the iterator\n    public System.Collections.Generic.IEnumerator<T> GetEnumerator()\n    {\n        Node current = head;\n        while (current != null)\n        {\n            yield return current.Data;\n            current = current.Next;\n        }\n    }\n\n    // IEnumerable<T> inherits from IEnumerable, therefore this class \n    // must implement both the generic and non-generic versions of \n    // GetEnumerator. In most cases, the non-generic method can \n    // simply call the generic method.\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator();\n    }\n}\n\npublic class SortedList<T> : GenericList<T> where T : System.IComparable<T>\n{\n    // A simple, unoptimized sort algorithm that \n    // orders list elements from lowest to highest:\n\n    public void BubbleSort()\n    {\n        if (null == head || null == head.Next)\n        {\n            return;\n        }\n        bool swapped;\n\n        do\n        {\n            Node previous = null;\n            Node current = head;\n            swapped = false;\n\n            while (current.next != null)\n            {\n                //  Because we need to call this method, the SortedList\n                //  class is constrained on IEnumerable<T>\n                if (current.Data.CompareTo(current.next.Data) > 0)\n                {\n                    Node tmp = current.next;\n                    current.next = current.next.next;\n                    tmp.next = current;\n\n                    if (previous == null)\n                    {\n                        head = tmp;\n                    }\n                    else\n                    {\n                        previous.next = tmp;\n                    }\n                    previous = tmp;\n                    swapped = true;\n                }\n                else\n                {\n                    previous = current;\n                    current = current.next;\n                }\n            }\n        } while (swapped);\n    }\n}\n\n// A simple class that implements IComparable<T> using itself as the \n// type argument. This is a common design pattern in objects that \n// are stored in generic lists.\npublic class Person : System.IComparable<Person>\n{\n    string name;\n    int age;\n\n    public Person(string s, int i)\n    {\n        name = s;\n        age = i;\n    }\n\n    // This will cause list elements to be sorted on age values.\n    public int CompareTo(Person p)\n    {\n        return age - p.age;\n    }\n\n    public override string ToString()\n    {\n        return name + \":\" + age;\n    }\n\n    // Must implement Equals.\n    public bool Equals(Person p)\n    {\n        return (this.age == p.age);\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        //Declare and instantiate a new generic SortedList class.\n        //Person is the type argument.\n        SortedList<Person> list = new SortedList<Person>();\n\n        //Create name and age values to initialize Person objects.\n        string[] names = new string[] \n        { \n            \"Franscoise\", \n            \"Bill\", \n            \"Li\", \n            \"Sandra\", \n            \"Gunnar\", \n            \"Alok\", \n            \"Hiroyuki\", \n            \"Maria\", \n            \"Alessandro\", \n            \"Raul\" \n        };\n\n        int[] ages = new int[] { 45, 19, 28, 23, 18, 9, 108, 72, 30, 35 };\n\n        //Populate the list.\n        for (int x = 0; x < 10; x++)\n        {\n            list.AddHead(new Person(names[x], ages[x]));\n        }\n\n        //Print out unsorted list.\n        foreach (Person p in list)\n        {\n            System.Console.WriteLine(p.ToString());\n        }\n        System.Console.WriteLine(\"Done with unsorted list\");\n\n        //Sort the list.\n        list.BubbleSort();\n\n        //Print out sorted list.\n        foreach (Person p in list)\n        {\n            System.Console.WriteLine(p.ToString());\n        }\n        System.Console.WriteLine(\"Done with sorted list\");\n    }\n}\n```\n</details>\n\n>适用于类的继承规则也适用于接口\n\n```csharp\ninterface IMonth<T> { }\n\ninterface IJanuary     : IMonth<int> { }  //No error\ninterface IFebruary<T> : IMonth<int> { }  //No error\ninterface IMarch<T>    : IMonth<T> { }    //No error\n//interface IApril<T>  : IMonth<T, U> {}  //Error\n```\n>具体类可实现封闭式构造接口\n```csharp\ninterface IBaseInterface<T> { }\n\nclass SampleClass : IBaseInterface<string> { }\n```\n>只要类形参列表提供接口所需的所有实参，泛型类即可实现泛型接口或封闭式构造接口\n```csharp\ninterface IBaseInterface1<T> { }\ninterface IBaseInterface2<T, U> { }\n\nclass SampleClass1<T> : IBaseInterface1<T> { }          //No error\nclass SampleClass2<T> : IBaseInterface2<T, string> { }  //No error\n```\n### 泛型委托\n>委托可以定义它自己的类型参数。引用泛型委托的代码可以指定类型参数以创建封闭式构造类型，就像实例化泛型类或调用泛型方法一样\n\n```csharp\npublic delegate void Del<T>(T item);\npublic static void Notify(int i) { }\n\nDel<int> m1 = new Del<int>(Notify);\n```\n## <span style=\"color:#0366d6;\">方法组转换</span>\n>它允许我们简单的为委托指定方法名称，而不需要使用关键字new或者显示调用委托的构造函数\n```csharp\nDel<int> m2 = Notify;\n```\n>根据典型设计模式定义事件时，泛型委托特别有用，因为发件人参数可以为强类型，无需在它和 Object 之间强制转换。\n```csharp\ndelegate void StackEventHandler<T, U>(T sender, U eventArgs);\n\nclass Stack<T>\n{\n    public class StackEventArgs : System.EventArgs { }\n    public event StackEventHandler<Stack<T>, StackEventArgs> stackEvent;\n\n    protected virtual void OnStackChanged(StackEventArgs a)\n    {\n        stackEvent(this, a);\n    }\n}\n\nclass SampleClass\n{\n    public void HandleStackChange<T>(Stack<T> stack, Stack<T>.StackEventArgs args) { }\n}\n\npublic static void Test()\n{\n    Stack<double> s = new Stack<double>();\n    SampleClass o = new SampleClass();\n    s.stackEvent += o.HandleStackChange;\n}\n```\n### 泛型方法\n>如泛型类中的泛型方法\n\n### 泛型结构\n>类似泛型类\n\n### 泛型和特性\n>仅允许自定义属性引用开放式泛型类型（即未向其提供任何类型参数的泛型类型）和封闭式构造泛型类型（即向所有类型参数提供参数的泛型类型）\n```csharp\nclass CustomAttribute : System.Attribute\n{\n    public System.Object info;\n}\n```\n>属性可引用开放式泛型类型\n```csharp\npublic class GenericClass1<T> { }\n\n[CustomAttribute(info = typeof(GenericClass1<>))]\nclass ClassA { }\n```\n>通过使用适当数量的逗号指定多个类型参数\n```csharp\npublic class GenericClass2<T, U> { }\n\n[CustomAttribute(info = typeof(GenericClass2<,>))]\nclass ClassB { }\n```\n>属性可引用封闭式构造泛型类型\n```csharp\npublic class GenericClass3<T, U, V> { }\n\n[CustomAttribute(info = typeof(GenericClass3<int, double, string>))]\nclass ClassC { }\n```\n>引用泛型类型参数的属性会导致编译时错误\n```csharp\n//[CustomAttribute(info = typeof(GenericClass3<int, T, string>))]  //Error\nclass ClassD<T> { }\n```\n>不能从Attribute继承泛型类型\n```csharp\n//public class CustomAtt<T> : System.Attribute {}  //Error\n```\n### 泛型约束\n>约束告知编译器类型参数必须具备的功能\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">约束</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">描述</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : struct</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的值类型。 有关可为 null 的值类型的信息，请参阅可为 null 的值类型。 由于所有值类型都具有可访问的无参数构造函数，因此 struct 约束表示 new() 约束，并且不能与 new() 约束结合使用。 此外，struct 约束也不能与 unmanaged 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : class</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是引用类型。 此约束还应用于任何类、接口、委托或数组类型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : notnull</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的类型。 参数可以是 C# 8.0 或更高版本中的不可为 null 的引用类型，也可以是不可为 null 的值类型。 此约束还应用于任何类、接口、委托或数组类型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : unmanaged</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的非托管类型。 unmanaged 约束表示 struct 约束，且不能与 struct 约束或 new() 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : new()</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须具有公共无参数构造函数。 与其他约束一起使用时，new() 约束必须最后指定。 new() 约束不能与 struct 和 unmanaged 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : <基类名></td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是指定的基类或派生自指定的基类。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : <接口名称></td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是指定的接口或实现指定的接口。 可指定多个接口约束。 约束接口也可以是泛型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : U</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">为 T 提供的类型参数必须是为 U 提供的参数或派生自为 U 提供的参数。</td>\n</tr>\n</table>\n\n\n\n\n\n","source":"_posts/csharpgrammar-4.md","raw":"---\ntitle: C#2.0语法\ndate: 2020-02-22\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#2.0语法（发布于2005，.NET Framework 2.0 .NET Framework 3.0）\n\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C# 2.0</span>\n## <span style=\"color:#0366d6;\">:: 运算符</span>\n>使用命名空间别名限定符 :: 访问已设置别名的命名空间的成员。\n>使用 using 别名指令创建的命名空间别名\n```csharp\nusing forwinforms = System.Drawing;\nusing forwpf = System.Windows;\n\npublic class Converters\n{\n    public static forwpf::Point Convert(forwinforms::Point point) => new forwpf::Point(point.X, point.Y);\n}\n```\n>外部别名,有时你可能不得不引用具有相同的完全限定类型名称的程序集的两个版本\nGridV1::Grid 是 grid.dll 中的网格控件，GridV2::Grid 是 grid20.dll 中的网格控件\n```csharp\n/r:GridV1=grid.dll\n\n/r:GridV2=grid20.dll\n\nextern alias GridV1;\n\nextern alias GridV2;\n```\n>global 别名，该别名是全局命名空间别名。与 :: 限定符一起使用时，global 别名始终引用全局命名空间，即使存在用户定义的 global 命名空间别名也是如此\n以下示例使用 global 别名访问 .NET System 命名空间，该命名空间是全局命名空间的成员。如果没有 global 别名，则将访问用户定义的 System 命名空间（该命名空间是 MyCompany.MyProduct 命名空间的成员）\n```csharp\nnamespace MyCompany.MyProduct.System\n{\n    class Program\n    {\n        static void Main() => global::System.Console.WriteLine(\"Using global alias\");\n    }\n\n    class Console\n    {\n        string Suggestion => \"Consider renaming this class\";\n    }\n}\n```\n## <span style=\"color:#0366d6;\">getter/setter 单独可访问性</span>\n>就是在get或者set前面可以加访问修饰符\n```csharp\npublic class User\n{\n    public User(int age)\n    {\n      this.age=age;\n    }\n    public int age;\n    public Age {\n      get {return age;}\n      private set{age=value;}\n    }\n}\n```\n## <span style=\"color:#0366d6;\">静态类</span>\n>以下列表提供静态类的主要功能：\n1.只包含静态成员。\n2.无法进行实例化。\n3.会进行密封。\n4.不能包含实例构造函数。\n静态类会进行密封，因此不能继承。 它们不能继承自任何类（除了 Object）。 静态类不能包含实例构造函数；但是，它们可以包含静态构造函数。\n```csharp\npublic static class TemperatureConverter\n{\n    public static double CelsiusToFahrenheit(string temperatureCelsius)\n    {\n        // Convert argument to double for calculations.\n        double celsius = Double.Parse(temperatureCelsius);\n\n        // Convert Celsius to Fahrenheit.\n        double fahrenheit = (celsius * 9 / 5) + 32;\n\n        return fahrenheit;\n    }\n\n    public static double FahrenheitToCelsius(string temperatureFahrenheit)\n    {\n        // Convert argument to double for calculations.\n        double fahrenheit = Double.Parse(temperatureFahrenheit);\n\n        // Convert Fahrenheit to Celsius.\n        double celsius = (fahrenheit - 32) * 5 / 9;\n\n        return celsius;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">协变和逆变</span>\n>协变和逆变能够实现数组类型、委托类型和泛型类型参数的隐式引用转换。协变保留分配兼容性，逆变则与之相反。\n>数组协变和逆变\n```csharp\npublic class First { }  \npublic class Second : First { }  \npublic delegate First SampleDelegate(Second a);  \n```\n>委托协变和逆变\n```csharp\n// Matching signature.  \npublic static First ASecondRFirst(Second second)  \n{ return new First(); }  \n  \n// The return type is more derived.  \npublic static Second ASecondRSecond(Second second)  \n{ return new Second(); }  \n  \n// The argument type is less derived.  \npublic static First AFirstRFirst(First first)  \n{ return new First(); }  \n  \n// The return type is more derived   \n// and the argument type is less derived.  \npublic static Second AFirstRSecond(First first)  \n{ return new Second(); }   \n```\n\n```csharp\n// Assigning a method with a matching signature   \n// to a non-generic delegate. No conversion is necessary.  \nSampleDelegate dNonGeneric = ASecondRFirst;  \n// Assigning a method with a more derived return type   \n// and less derived argument type to a non-generic delegate.  \n// The implicit conversion is used.  \nSampleDelegate dNonGenericConversion = AFirstRSecond;  \n```\n## <span style=\"color:#0366d6;\">可为空的值类型</span>\n### 声明和赋值\n>由于值类型可隐式转换为相应的可为空的值类型，因此可以像向其基础值类型赋值一样，向可为空值类型的变量赋值。 还可分配 null 值。\n```csharp\ndouble? pi = 3.14;\nchar? letter = 'a';\n\nint m2 = 10;\nint? m = m2;\n\nbool? flag = null;\n\n// An array of a nullable type:\nint?[] arr = new int?[10];\n```\n### 提升的运算符\n>预定义的一元运算符和二元运算符或值类型 T 支持的任何重载运算符也受相应的可为空值类型 T? 支持。 如果一个或全部两个操作数为 null ，则这些运算符（也称为提升的运算符）将生成 null；否则，运算符使用其操作数所包含的值来计算结果。\n```csharp\nint? a = 10;\nint? b = null;\nint? c = 10;\n\na++;        // a is 11\na = a * c;  // a is 110\na = a + b;  // a is null\n```\n>对于比较运算符 <、>、<= 和 >=，如果一个或全部两个操作数都为 null，则结果为 false；否则，将比较操作数的包含值。 请勿作出如下假定：由于某个特定的比较（例如 <=）返回 false，则相反的比较 (>) 返回 true\n```csharp\nint? a = 10;\nConsole.WriteLine($\"{a} >= null is {a >= null}\");\nConsole.WriteLine($\"{a} < null is {a < null}\");\nConsole.WriteLine($\"{a} == null is {a == null}\");\n// Output:\n// 10 >= null is False\n// 10 < null is False\n// 10 == null is False\n```\n>对于相等运算符 ==，如果两个操作数都为 null，则结果为 true；如果只有一个操作数为 null，则结果为 false；否则，将比较操作数的包含值。\n对于不等运算符 !=，如果两个操作数都为 null，则结果为 false；如果只有一个操作数为 null，则结果为 true；否则，将比较操作数的包含值。\n```csharp\nint? b = null;\nint? c = null;\nConsole.WriteLine($\"null >= null is {b >= c}\");\nConsole.WriteLine($\"null == null is {b == c}\");\n// Output:\n// null >= null is False\n// null == null is True\n```\n### 装箱和取消装箱\n>可为空值类型的实例 T?已装箱，如下所示\n1.如果 HasValue 返回 false，则生成空引用\n2.如果 HasValue 返回 true，则基础值类型 T 的对应值将装箱，而不对 Nullable \\<T\\> 的实例进行装箱\n可将值类型 T 的已装箱值取消装箱到相应的可为空值类型 T?\n```csharp\nint a = 41;\nobject aBoxed = a;\nint? aNullable = (int?)aBoxed;\nConsole.WriteLine($\"Value of aNullable: {aNullable}\");\n\nobject aNullableBoxed = aNullable;\nif (aNullableBoxed is int valueOfA)\n{\n    Console.WriteLine($\"aNullableBoxed is boxed int: {valueOfA}\");\n}\n// Output:\n// Value of aNullable: 41\n// aNullableBoxed is boxed int: 41\n```\n## <span style=\"color:#0366d6;\">部分类型</span>\n>拆分<span style=\"color:#0065b3;\">类、结构、接口、方法</span>的定义到两个或更多的文件中是可能的\npartial 修饰符不可用于委托或枚举声明中\n```csharp\npublic partial class Employee\n{\n    public void DoWork()\n    {\n    }\n}\n\npublic partial class Employee\n{\n    public void GoToLunch()\n    {\n    }\n}\n```\n## <span style=\"color:#0366d6;\">匿名方法</span>\n>delegate 运算符创建一个可以转换为委托类型的匿名方法\n```csharp\nFunc<int, int, int> sum = delegate (int a, int b) { return a + b; };\nConsole.WriteLine(sum(3, 4));  // output: 7\n```\n## <span style=\"color:#0366d6;\">迭代器</span>\n>yield不是保留字，只有在 return 或 break 关键字之前使用时才有特殊含义\n迭代器 可用于逐步迭代集合，例如列表和数组。迭代器方法或 get 访问器可对集合执行自定义迭代。 迭代器方法使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器函数时，将从该位置重新开始执行\n```csharp\nstatic void Main()\n{\n    foreach (int number in SomeNumbers())\n    {\n        Console.Write(number.ToString() + \" \");\n    }\n    // Output: 3 5 8\n    Console.ReadKey();\n}\n\npublic static System.Collections.IEnumerable SomeNumbers()\n{\n    yield return 3;\n    yield return 5;\n    yield return 8;\n}\n```\n>迭代器方法或 get 访问器的返回类型可以是IEnumerable、IEnumerable\\<T\\>、IEnumerator或IEnumerator\\<T\\>可以使用 yield break 语句来终止迭代\n迭代器可用作一种方法，或一个 get 访问器。不能在<span style=\"color:#0065b3;\">事件、实例构造函数、静态构造函数或静态终结器</span>中使用迭代器。\n必须存在从 yield return 语句中的表达式类型到迭代器返回的 IEnumerable<T\\> 类型参数的隐式转换。\n即使将迭代器编写成方法，编译器也会将其转换为实际上是状态机的嵌套类。可使用 Ildasm.exe 工具查看\n<details>\n<summary>点开查看</summary>\n\n```csharp\n\npublic class Zoo : IEnumerable\n{\n    // Private members.\n    private List<Animal> animals = new List<Animal>();\n\n    // Public methods.\n    public void AddMammal(string name)\n    {\n        animals.Add(new Animal { Name = name, Type = Animal.TypeEnum.Mammal });\n    }\n\n    public void AddBird(string name)\n    {\n        animals.Add(new Animal { Name = name, Type = Animal.TypeEnum.Bird });\n    }\n\n    public IEnumerator GetEnumerator()\n    {\n        foreach (Animal theAnimal in animals)\n        {\n            yield return theAnimal.Name;\n        }\n    }\n\n    // Public members.\n    public IEnumerable Mammals\n    {\n        get { return AnimalsForType(Animal.TypeEnum.Mammal); }\n    }\n\n    public IEnumerable Birds\n    {\n        get { return AnimalsForType(Animal.TypeEnum.Bird); }\n    }\n\n    // Private methods.\n    private IEnumerable AnimalsForType(Animal.TypeEnum type)\n    {\n        foreach (Animal theAnimal in animals)\n        {\n            if (theAnimal.Type == type)\n            {\n                yield return theAnimal.Name;\n            }\n        }\n    }\n\n    // Private class.\n    private class Animal\n    {\n        public enum TypeEnum { Bird, Mammal }\n\n        public string Name { get; set; }\n        public TypeEnum Type { get; set; }\n    }\n}\n```\n</details>\n\n>引用类实例 (theZoo) 的 foreach 语句隐式调用 GetEnumerator 方法。 引用 Birds 和 Mammals 属性的 foreach 语句使用 AnimalsForType 命名迭代器方法。\n<details>\n<summary>点开查看</summary>\n\n```csharp\nstatic void Main()\n{\n    Zoo theZoo = new Zoo();\n\n    theZoo.AddMammal(\"Whale\");\n    theZoo.AddMammal(\"Rhinoceros\");\n    theZoo.AddBird(\"Penguin\");\n    theZoo.AddBird(\"Warbler\");\n\n    foreach (string name in theZoo)\n    {\n        Console.Write(name + \" \");\n    }\n    Console.WriteLine();\n    // Output: Whale Rhinoceros Penguin Warbler\n\n    foreach (string name in theZoo.Birds)\n    {\n        Console.Write(name + \" \");\n    }\n    Console.WriteLine();\n    // Output: Penguin Warbler\n\n    foreach (string name in theZoo.Mammals)\n    {\n        Console.Write(name + \" \");\n    }\n    Console.WriteLine();\n    // Output: Whale Rhinoceros\n\n    Console.ReadKey();\n}\n```\n</details>\n\n## <span style=\"color:#0366d6;\">泛型</span>\n### 泛型类\n>泛型类封装不特定于特定数据类型的操作。泛型类最常见用法是用于链接列表、哈希表、堆栈、队列和树等集合。 无论存储数据的类型如何，添加项和从集合删除项等操作的执行方式基本相同。\n```csharp\nclass BaseNode { }\nclass BaseNodeGeneric<T> { }\n\n// concrete type\nclass NodeConcrete<T> : BaseNode { }\n```\n>继承封闭类型\n```csharp\n//closed constructed type\nclass NodeClosed<T> : BaseNodeGeneric<int> { }\n```\n>继承开放类型\n```csharp\n//open constructed type \nclass NodeOpen<T> : BaseNodeGeneric<T> { }\n```\n>泛型类可继承自具体的封闭式构造或开放式构造基类\n```csharp\n//No error\nclass Node1 : BaseNodeGeneric<int> { }\n\n//Generates an error\n//class Node2 : BaseNodeGeneric<T> {}\n\n//Generates an error\n//class Node3 : T {}\n```\n>继承自开放式的泛型类必须对非此继承任何基类类型参数提供类型参数\n```csharp\nclass BaseNodeMultiple<T, U> { }\n\n//No error\nclass Node4<T> : BaseNodeMultiple<T, int> { }\n\n//No error\nclass Node5<T, U> : BaseNodeMultiple<T, U> { }\n\n//Generates an error\n//class Node6<T> : BaseNodeMultiple<T, U> {} \n```\n>继承自开放式构造类型的泛型类必须指定作为基类型上约束\n```csharp\nclass NodeItem<T> where T : System.IComparable<T>, new() { }\nclass SpecialNodeItem<T> : NodeItem<T> where T : System.IComparable<T>, new() { }\n```\n>开放式构造和封闭式构造类型可用作方法参数\n```csharp\nvoid Swap<T>(List<T> list1, List<T> list2)\n{\n    //code to swap items\n}\n\nvoid Swap(List<int> list1, List<int> list2)\n{\n    //code to swap items\n}\n```\n>派生类可以扩展基类类型的个数\n```csharp\nclass BaseNodeMultiple<T> { }\n\n//No error\nclass Node4<T,U> : BaseNodeMultiple<T> { }\n\n```\n### 泛型接口\n>接口被指定为类型参数上的约束时，仅可使用实现接口的类型\n<details>\n<summary>展开查看</summary>\n\n```csharp\n//Type parameter T in angle brackets.\npublic class GenericList<T> : System.Collections.Generic.IEnumerable<T>\n{\n    protected Node head;\n    protected Node current = null;\n\n    // Nested class is also generic on T\n    protected class Node\n    {\n        public Node next;\n        private T data;  //T as private member datatype\n\n        public Node(T t)  //T used in non-generic constructor\n        {\n            next = null;\n            data = t;\n        }\n\n        public Node Next\n        {\n            get { return next; }\n            set { next = value; }\n        }\n\n        public T Data  //T as return type of property\n        {\n            get { return data; }\n            set { data = value; }\n        }\n    }\n\n    public GenericList()  //constructor\n    {\n        head = null;\n    }\n\n    public void AddHead(T t)  //T as method parameter type\n    {\n        Node n = new Node(t);\n        n.Next = head;\n        head = n;\n    }\n\n    // Implementation of the iterator\n    public System.Collections.Generic.IEnumerator<T> GetEnumerator()\n    {\n        Node current = head;\n        while (current != null)\n        {\n            yield return current.Data;\n            current = current.Next;\n        }\n    }\n\n    // IEnumerable<T> inherits from IEnumerable, therefore this class \n    // must implement both the generic and non-generic versions of \n    // GetEnumerator. In most cases, the non-generic method can \n    // simply call the generic method.\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator();\n    }\n}\n\npublic class SortedList<T> : GenericList<T> where T : System.IComparable<T>\n{\n    // A simple, unoptimized sort algorithm that \n    // orders list elements from lowest to highest:\n\n    public void BubbleSort()\n    {\n        if (null == head || null == head.Next)\n        {\n            return;\n        }\n        bool swapped;\n\n        do\n        {\n            Node previous = null;\n            Node current = head;\n            swapped = false;\n\n            while (current.next != null)\n            {\n                //  Because we need to call this method, the SortedList\n                //  class is constrained on IEnumerable<T>\n                if (current.Data.CompareTo(current.next.Data) > 0)\n                {\n                    Node tmp = current.next;\n                    current.next = current.next.next;\n                    tmp.next = current;\n\n                    if (previous == null)\n                    {\n                        head = tmp;\n                    }\n                    else\n                    {\n                        previous.next = tmp;\n                    }\n                    previous = tmp;\n                    swapped = true;\n                }\n                else\n                {\n                    previous = current;\n                    current = current.next;\n                }\n            }\n        } while (swapped);\n    }\n}\n\n// A simple class that implements IComparable<T> using itself as the \n// type argument. This is a common design pattern in objects that \n// are stored in generic lists.\npublic class Person : System.IComparable<Person>\n{\n    string name;\n    int age;\n\n    public Person(string s, int i)\n    {\n        name = s;\n        age = i;\n    }\n\n    // This will cause list elements to be sorted on age values.\n    public int CompareTo(Person p)\n    {\n        return age - p.age;\n    }\n\n    public override string ToString()\n    {\n        return name + \":\" + age;\n    }\n\n    // Must implement Equals.\n    public bool Equals(Person p)\n    {\n        return (this.age == p.age);\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        //Declare and instantiate a new generic SortedList class.\n        //Person is the type argument.\n        SortedList<Person> list = new SortedList<Person>();\n\n        //Create name and age values to initialize Person objects.\n        string[] names = new string[] \n        { \n            \"Franscoise\", \n            \"Bill\", \n            \"Li\", \n            \"Sandra\", \n            \"Gunnar\", \n            \"Alok\", \n            \"Hiroyuki\", \n            \"Maria\", \n            \"Alessandro\", \n            \"Raul\" \n        };\n\n        int[] ages = new int[] { 45, 19, 28, 23, 18, 9, 108, 72, 30, 35 };\n\n        //Populate the list.\n        for (int x = 0; x < 10; x++)\n        {\n            list.AddHead(new Person(names[x], ages[x]));\n        }\n\n        //Print out unsorted list.\n        foreach (Person p in list)\n        {\n            System.Console.WriteLine(p.ToString());\n        }\n        System.Console.WriteLine(\"Done with unsorted list\");\n\n        //Sort the list.\n        list.BubbleSort();\n\n        //Print out sorted list.\n        foreach (Person p in list)\n        {\n            System.Console.WriteLine(p.ToString());\n        }\n        System.Console.WriteLine(\"Done with sorted list\");\n    }\n}\n```\n</details>\n\n>适用于类的继承规则也适用于接口\n\n```csharp\ninterface IMonth<T> { }\n\ninterface IJanuary     : IMonth<int> { }  //No error\ninterface IFebruary<T> : IMonth<int> { }  //No error\ninterface IMarch<T>    : IMonth<T> { }    //No error\n//interface IApril<T>  : IMonth<T, U> {}  //Error\n```\n>具体类可实现封闭式构造接口\n```csharp\ninterface IBaseInterface<T> { }\n\nclass SampleClass : IBaseInterface<string> { }\n```\n>只要类形参列表提供接口所需的所有实参，泛型类即可实现泛型接口或封闭式构造接口\n```csharp\ninterface IBaseInterface1<T> { }\ninterface IBaseInterface2<T, U> { }\n\nclass SampleClass1<T> : IBaseInterface1<T> { }          //No error\nclass SampleClass2<T> : IBaseInterface2<T, string> { }  //No error\n```\n### 泛型委托\n>委托可以定义它自己的类型参数。引用泛型委托的代码可以指定类型参数以创建封闭式构造类型，就像实例化泛型类或调用泛型方法一样\n\n```csharp\npublic delegate void Del<T>(T item);\npublic static void Notify(int i) { }\n\nDel<int> m1 = new Del<int>(Notify);\n```\n## <span style=\"color:#0366d6;\">方法组转换</span>\n>它允许我们简单的为委托指定方法名称，而不需要使用关键字new或者显示调用委托的构造函数\n```csharp\nDel<int> m2 = Notify;\n```\n>根据典型设计模式定义事件时，泛型委托特别有用，因为发件人参数可以为强类型，无需在它和 Object 之间强制转换。\n```csharp\ndelegate void StackEventHandler<T, U>(T sender, U eventArgs);\n\nclass Stack<T>\n{\n    public class StackEventArgs : System.EventArgs { }\n    public event StackEventHandler<Stack<T>, StackEventArgs> stackEvent;\n\n    protected virtual void OnStackChanged(StackEventArgs a)\n    {\n        stackEvent(this, a);\n    }\n}\n\nclass SampleClass\n{\n    public void HandleStackChange<T>(Stack<T> stack, Stack<T>.StackEventArgs args) { }\n}\n\npublic static void Test()\n{\n    Stack<double> s = new Stack<double>();\n    SampleClass o = new SampleClass();\n    s.stackEvent += o.HandleStackChange;\n}\n```\n### 泛型方法\n>如泛型类中的泛型方法\n\n### 泛型结构\n>类似泛型类\n\n### 泛型和特性\n>仅允许自定义属性引用开放式泛型类型（即未向其提供任何类型参数的泛型类型）和封闭式构造泛型类型（即向所有类型参数提供参数的泛型类型）\n```csharp\nclass CustomAttribute : System.Attribute\n{\n    public System.Object info;\n}\n```\n>属性可引用开放式泛型类型\n```csharp\npublic class GenericClass1<T> { }\n\n[CustomAttribute(info = typeof(GenericClass1<>))]\nclass ClassA { }\n```\n>通过使用适当数量的逗号指定多个类型参数\n```csharp\npublic class GenericClass2<T, U> { }\n\n[CustomAttribute(info = typeof(GenericClass2<,>))]\nclass ClassB { }\n```\n>属性可引用封闭式构造泛型类型\n```csharp\npublic class GenericClass3<T, U, V> { }\n\n[CustomAttribute(info = typeof(GenericClass3<int, double, string>))]\nclass ClassC { }\n```\n>引用泛型类型参数的属性会导致编译时错误\n```csharp\n//[CustomAttribute(info = typeof(GenericClass3<int, T, string>))]  //Error\nclass ClassD<T> { }\n```\n>不能从Attribute继承泛型类型\n```csharp\n//public class CustomAtt<T> : System.Attribute {}  //Error\n```\n### 泛型约束\n>约束告知编译器类型参数必须具备的功能\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">约束</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">描述</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : struct</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的值类型。 有关可为 null 的值类型的信息，请参阅可为 null 的值类型。 由于所有值类型都具有可访问的无参数构造函数，因此 struct 约束表示 new() 约束，并且不能与 new() 约束结合使用。 此外，struct 约束也不能与 unmanaged 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : class</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是引用类型。 此约束还应用于任何类、接口、委托或数组类型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : notnull</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的类型。 参数可以是 C# 8.0 或更高版本中的不可为 null 的引用类型，也可以是不可为 null 的值类型。 此约束还应用于任何类、接口、委托或数组类型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : unmanaged</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的非托管类型。 unmanaged 约束表示 struct 约束，且不能与 struct 约束或 new() 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : new()</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须具有公共无参数构造函数。 与其他约束一起使用时，new() 约束必须最后指定。 new() 约束不能与 struct 和 unmanaged 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : <基类名></td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是指定的基类或派生自指定的基类。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : <接口名称></td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是指定的接口或实现指定的接口。 可指定多个接口约束。 约束接口也可以是泛型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : U</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">为 T 提供的类型参数必须是为 U 提供的参数或派生自为 U 提供的参数。</td>\n</tr>\n</table>\n\n\n\n\n\n","slug":"csharpgrammar-4","published":1,"updated":"2022-08-17T06:55:45.677Z","_id":"ck6xkgxtl0003b8ri494zae24","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#2.0语法（发布于2005，.NET Framework 2.0 .NET Framework 3.0）</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-2-0\"><a href=\"#C-2-0\" class=\"headerlink\" title=\"C# 2.0\"></a><span style=\"color:#0366d6;\">C# 2.0</span></h1><h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\":: 运算符\"></a><span style=\"color:#0366d6;\">:: 运算符</span></h2><blockquote>\n<p>使用命名空间别名限定符 :: 访问已设置别名的命名空间的成员。<br>使用 using 别名指令创建的命名空间别名</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> forwinforms = System.Drawing;</span><br><span class=\"line\"><span class=\"keyword\">using</span> forwpf = System.Windows;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Converters</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static forwpf::Point Convert(forwinforms::Point point) =&gt; new forwpf::Point(point.X, point.Y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>外部别名,有时你可能不得不引用具有相同的完全限定类型名称的程序集的两个版本<br>GridV1::Grid 是 grid.dll 中的网格控件，GridV2::Grid 是 grid20.dll 中的网格控件</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/r:GridV1=grid.dll</span><br><span class=\"line\"></span><br><span class=\"line\">/r:GridV2=grid20.dll</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">alias</span> GridV1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">alias</span> GridV2;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>global 别名，该别名是全局命名空间别名。与 :: 限定符一起使用时，global 别名始终引用全局命名空间，即使存在用户定义的 global 命名空间别名也是如此<br>以下示例使用 global 别名访问 .NET System 命名空间，该命名空间是全局命名空间的成员。如果没有 global 别名，则将访问用户定义的 System 命名空间（该命名空间是 MyCompany.MyProduct 命名空间的成员）</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">MyCompany.MyProduct.System</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static void Main() =&gt; global::System.Console.WriteLine(\"Using global alias\");</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Console</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> Suggestion =&gt; <span class=\"string\">\"Consider renaming this class\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"getter-setter-单独可访问性\"><a href=\"#getter-setter-单独可访问性\" class=\"headerlink\" title=\"getter/setter 单独可访问性\"></a><span style=\"color:#0366d6;\">getter/setter 单独可访问性</span></h2><blockquote>\n<p>就是在get或者set前面可以加访问修饰符</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span>(<span class=\"params\"><span class=\"keyword\">int</span> age</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Age &#123;</span><br><span class=\"line\">      <span class=\"keyword\">get</span> &#123;<span class=\"keyword\">return</span> age;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>&#123;age=<span class=\"keyword\">value</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态类\"><a href=\"#静态类\" class=\"headerlink\" title=\"静态类\"></a><span style=\"color:#0366d6;\">静态类</span></h2><blockquote>\n<p>以下列表提供静态类的主要功能：<br>1.只包含静态成员。<br>2.无法进行实例化。<br>3.会进行密封。<br>4.不能包含实例构造函数。<br>静态类会进行密封，因此不能继承。 它们不能继承自任何类（除了 Object）。 静态类不能包含实例构造函数；但是，它们可以包含静态构造函数。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">TemperatureConverter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">CelsiusToFahrenheit</span>(<span class=\"params\"><span class=\"keyword\">string</span> temperatureCelsius</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Convert argument to double for calculations.</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> celsius = Double.Parse(temperatureCelsius);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Convert Celsius to Fahrenheit.</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> fahrenheit = (celsius * <span class=\"number\">9</span> / <span class=\"number\">5</span>) + <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fahrenheit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">FahrenheitToCelsius</span>(<span class=\"params\"><span class=\"keyword\">string</span> temperatureFahrenheit</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Convert argument to double for calculations.</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> fahrenheit = Double.Parse(temperatureFahrenheit);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Convert Fahrenheit to Celsius.</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> celsius = (fahrenheit - <span class=\"number\">32</span>) * <span class=\"number\">5</span> / <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> celsius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"协变和逆变\"><a href=\"#协变和逆变\" class=\"headerlink\" title=\"协变和逆变\"></a><span style=\"color:#0366d6;\">协变和逆变</span></h2><blockquote>\n<p>协变和逆变能够实现数组类型、委托类型和泛型类型参数的隐式引用转换。协变保留分配兼容性，逆变则与之相反。<br>数组协变和逆变</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">First</span> &#123; &#125;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Second</span> : <span class=\"title\">First</span> &#123; &#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> First <span class=\"title\">SampleDelegate</span>(<span class=\"params\">Second a</span>)</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>委托协变和逆变</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Matching signature.  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> First <span class=\"title\">ASecondRFirst</span>(<span class=\"params\">Second second</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> First(); &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// The return type is more derived.  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Second <span class=\"title\">ASecondRSecond</span>(<span class=\"params\">Second second</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Second(); &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// The argument type is less derived.  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> First <span class=\"title\">AFirstRFirst</span>(<span class=\"params\">First first</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> First(); &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// The return type is more derived   </span></span><br><span class=\"line\"><span class=\"comment\">// and the argument type is less derived.  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Second <span class=\"title\">AFirstRSecond</span>(<span class=\"params\">First first</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Second(); &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Assigning a method with a matching signature   </span></span><br><span class=\"line\"><span class=\"comment\">// to a non-generic delegate. No conversion is necessary.  </span></span><br><span class=\"line\">SampleDelegate dNonGeneric = ASecondRFirst;  </span><br><span class=\"line\"><span class=\"comment\">// Assigning a method with a more derived return type   </span></span><br><span class=\"line\"><span class=\"comment\">// and less derived argument type to a non-generic delegate.  </span></span><br><span class=\"line\"><span class=\"comment\">// The implicit conversion is used.  </span></span><br><span class=\"line\">SampleDelegate dNonGenericConversion = AFirstRSecond;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可为空的值类型\"><a href=\"#可为空的值类型\" class=\"headerlink\" title=\"可为空的值类型\"></a><span style=\"color:#0366d6;\">可为空的值类型</span></h2><h3 id=\"声明和赋值\"><a href=\"#声明和赋值\" class=\"headerlink\" title=\"声明和赋值\"></a>声明和赋值</h3><blockquote>\n<p>由于值类型可隐式转换为相应的可为空的值类型，因此可以像向其基础值类型赋值一样，向可为空值类型的变量赋值。 还可分配 null 值。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span>? pi = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span>? letter = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> m2 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? m = m2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span>? flag = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// An array of a nullable type:</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>?[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>?[<span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"提升的运算符\"><a href=\"#提升的运算符\" class=\"headerlink\" title=\"提升的运算符\"></a>提升的运算符</h3><blockquote>\n<p>预定义的一元运算符和二元运算符或值类型 T 支持的任何重载运算符也受相应的可为空值类型 T? 支持。 如果一个或全部两个操作数为 null ，则这些运算符（也称为提升的运算符）将生成 null；否则，运算符使用其操作数所包含的值来计算结果。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>? a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? b = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? c = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a++;        <span class=\"comment\">// a is 11</span></span><br><span class=\"line\">a = a * c;  <span class=\"comment\">// a is 110</span></span><br><span class=\"line\">a = a + b;  <span class=\"comment\">// a is null</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于比较运算符 &lt;、&gt;、&lt;= 和 &gt;=，如果一个或全部两个操作数都为 null，则结果为 false；否则，将比较操作数的包含值。 请勿作出如下假定：由于某个特定的比较（例如 &lt;=）返回 false，则相反的比较 (&gt;) 返回 true</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>? a = <span class=\"number\">10</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;a&#125;</span> &gt;= null is <span class=\"subst\">&#123;a &gt;= <span class=\"literal\">null</span>&#125;</span>\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;a&#125;</span> &lt; null is <span class=\"subst\">&#123;a &lt; <span class=\"literal\">null</span>&#125;</span>\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;a&#125;</span> == null is <span class=\"subst\">&#123;a == <span class=\"literal\">null</span>&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// 10 &gt;= null is False</span></span><br><span class=\"line\"><span class=\"comment\">// 10 &lt; null is False</span></span><br><span class=\"line\"><span class=\"comment\">// 10 == null is False</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于相等运算符 ==，如果两个操作数都为 null，则结果为 true；如果只有一个操作数为 null，则结果为 false；否则，将比较操作数的包含值。<br>对于不等运算符 !=，如果两个操作数都为 null，则结果为 false；如果只有一个操作数为 null，则结果为 true；否则，将比较操作数的包含值。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>? b = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? c = <span class=\"literal\">null</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"null &gt;= null is <span class=\"subst\">&#123;b &gt;= c&#125;</span>\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"null == null is <span class=\"subst\">&#123;b == c&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// null &gt;= null is False</span></span><br><span class=\"line\"><span class=\"comment\">// null == null is True</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"装箱和取消装箱\"><a href=\"#装箱和取消装箱\" class=\"headerlink\" title=\"装箱和取消装箱\"></a>装箱和取消装箱</h3><blockquote>\n<p>可为空值类型的实例 T?已装箱，如下所示<br>1.如果 HasValue 返回 false，则生成空引用<br>2.如果 HasValue 返回 true，则基础值类型 T 的对应值将装箱，而不对 Nullable &lt;T&gt; 的实例进行装箱<br>可将值类型 T 的已装箱值取消装箱到相应的可为空值类型 T?</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">41</span>;</span><br><span class=\"line\"><span class=\"keyword\">object</span> aBoxed = a;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? aNullable = (<span class=\"keyword\">int</span>?)aBoxed;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Value of aNullable: <span class=\"subst\">&#123;aNullable&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> aNullableBoxed = aNullable;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (aNullableBoxed <span class=\"keyword\">is</span> <span class=\"keyword\">int</span> valueOfA)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"aNullableBoxed is boxed int: <span class=\"subst\">&#123;valueOfA&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// Value of aNullable: 41</span></span><br><span class=\"line\"><span class=\"comment\">// aNullableBoxed is boxed int: 41</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"部分类型\"><a href=\"#部分类型\" class=\"headerlink\" title=\"部分类型\"></a><span style=\"color:#0366d6;\">部分类型</span></h2><blockquote>\n<p>拆分<span style=\"color:#0065b3;\">类、结构、接口、方法</span>的定义到两个或更多的文件中是可能的<br>partial 修饰符不可用于委托或枚举声明中</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoWork</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GoToLunch</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名方法\"><a href=\"#匿名方法\" class=\"headerlink\" title=\"匿名方法\"></a><span style=\"color:#0366d6;\">匿名方法</span></h2><blockquote>\n<p>delegate 运算符创建一个可以转换为委托类型的匿名方法</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; sum = <span class=\"keyword\">delegate</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123; <span class=\"keyword\">return</span> a + b; &#125;;</span><br><span class=\"line\">Console.WriteLine(sum(<span class=\"number\">3</span>, <span class=\"number\">4</span>));  <span class=\"comment\">// output: 7</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a><span style=\"color:#0366d6;\">迭代器</span></h2><blockquote>\n<p>yield不是保留字，只有在 return 或 break 关键字之前使用时才有特殊含义<br>迭代器 可用于逐步迭代集合，例如列表和数组。迭代器方法或 get 访问器可对集合执行自定义迭代。 迭代器方法使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器函数时，将从该位置重新开始执行</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">int</span> number <span class=\"keyword\">in</span> <span class=\"title\">SomeNumbers</span>(<span class=\"params\"></span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Console.Write(number.ToString() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Output: 3 5 8</span></span><br><span class=\"line\">    Console.ReadKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> System.Collections.<span class=\"function\">IEnumerable <span class=\"title\">SomeNumbers</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>迭代器方法或 get 访问器的返回类型可以是IEnumerable、IEnumerable&lt;T&gt;、IEnumerator或IEnumerator&lt;T&gt;可以使用 yield break 语句来终止迭代<br>迭代器可用作一种方法，或一个 get 访问器。不能在<span style=\"color:#0065b3;\">事件、实例构造函数、静态构造函数或静态终结器</span>中使用迭代器。<br>必须存在从 yield return 语句中的表达式类型到迭代器返回的 IEnumerable&lt;T&gt; 类型参数的隐式转换。<br>即使将迭代器编写成方法，编译器也会将其转换为实际上是状态机的嵌套类。可使用 Ildasm.exe 工具查看</p>\n</blockquote>\n<details>\n<summary>点开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Zoo</span> : <span class=\"title\">IEnumerable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Private members.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Animal&gt; animals = <span class=\"keyword\">new</span> List&lt;Animal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Public methods.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddMammal</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        animals.Add(<span class=\"keyword\">new</span> Animal &#123; Name = name, Type = Animal.TypeEnum.Mammal &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddBird</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        animals.Add(<span class=\"keyword\">new</span> Animal &#123; Name = name, Type = Animal.TypeEnum.Bird &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IEnumerator <span class=\"title\">GetEnumerator</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Animal theAnimal <span class=\"keyword\">in</span> animals)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> theAnimal.Name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Public members.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IEnumerable Mammals</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> AnimalsForType(Animal.TypeEnum.Mammal); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IEnumerable Birds</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> AnimalsForType(Animal.TypeEnum.Bird); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Private methods.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IEnumerable <span class=\"title\">AnimalsForType</span>(<span class=\"params\">Animal.TypeEnum type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Animal theAnimal <span class=\"keyword\">in</span> animals)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (theAnimal.Type == type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> theAnimal.Name;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Private class.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> TypeEnum &#123; Bird, Mammal &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TypeEnum Type &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<blockquote>\n<p>引用类实例 (theZoo) 的 foreach 语句隐式调用 GetEnumerator 方法。 引用 Birds 和 Mammals 属性的 foreach 语句使用 AnimalsForType 命名迭代器方法。</p>\n</blockquote>\n<details>\n<summary>点开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Zoo theZoo = <span class=\"keyword\">new</span> Zoo();</span><br><span class=\"line\"></span><br><span class=\"line\">    theZoo.AddMammal(<span class=\"string\">\"Whale\"</span>);</span><br><span class=\"line\">    theZoo.AddMammal(<span class=\"string\">\"Rhinoceros\"</span>);</span><br><span class=\"line\">    theZoo.AddBird(<span class=\"string\">\"Penguin\"</span>);</span><br><span class=\"line\">    theZoo.AddBird(<span class=\"string\">\"Warbler\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> name <span class=\"keyword\">in</span> theZoo)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.Write(name + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine();</span><br><span class=\"line\">    <span class=\"comment\">// Output: Whale Rhinoceros Penguin Warbler</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> name <span class=\"keyword\">in</span> theZoo.Birds)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.Write(name + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine();</span><br><span class=\"line\">    <span class=\"comment\">// Output: Penguin Warbler</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> name <span class=\"keyword\">in</span> theZoo.Mammals)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.Write(name + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine();</span><br><span class=\"line\">    <span class=\"comment\">// Output: Whale Rhinoceros</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Console.ReadKey();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a><span style=\"color:#0366d6;\">泛型</span></h2><h3 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h3><blockquote>\n<p>泛型类封装不特定于特定数据类型的操作。泛型类最常见用法是用于链接列表、哈希表、堆栈、队列和树等集合。 无论存储数据的类型如何，添加项和从集合删除项等操作的执行方式基本相同。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">BaseNode</span> &#123; &#125;</span><br><span class=\"line\">class BaseNodeGeneric&lt;T&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// concrete type</span></span><br><span class=\"line\">class NodeConcrete&lt;T&gt; : BaseNode &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>继承封闭类型</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//closed constructed type</span></span><br><span class=\"line\">class NodeClosed&lt;T&gt; : BaseNodeGeneric&lt;int&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>继承开放类型</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//open constructed type </span></span><br><span class=\"line\">class NodeOpen&lt;T&gt; : BaseNodeGeneric&lt;T&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>泛型类可继承自具体的封闭式构造或开放式构造基类</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//No error</span></span><br><span class=\"line\">class Node1 : BaseNodeGeneric&lt;int&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Generates an error</span></span><br><span class=\"line\"><span class=\"comment\">//class Node2 : BaseNodeGeneric&lt;T&gt; &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Generates an error</span></span><br><span class=\"line\"><span class=\"comment\">//class Node3 : T &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>继承自开放式的泛型类必须对非此继承任何基类类型参数提供类型参数</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BaseNodeMultiple&lt;T, U&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//No error</span></span><br><span class=\"line\">class Node4&lt;T&gt; : BaseNodeMultiple&lt;T, int&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//No error</span></span><br><span class=\"line\">class Node5&lt;T, U&gt; : BaseNodeMultiple&lt;T, U&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Generates an error</span></span><br><span class=\"line\"><span class=\"comment\">//class Node6&lt;T&gt; : BaseNodeMultiple&lt;T, U&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>继承自开放式构造类型的泛型类必须指定作为基类型上约束</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class NodeItem&lt;T&gt; where T : System.IComparable&lt;T&gt;, new() &#123; &#125;</span><br><span class=\"line\">class SpecialNodeItem&lt;T&gt; : NodeItem&lt;T&gt; where T : System.IComparable&lt;T&gt;, new() &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>开放式构造和封闭式构造类型可用作方法参数</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Swap&lt;T&gt;(List&lt;T&gt; list1, List&lt;T&gt; list2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//code to swap items</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span>(<span class=\"params\">List&lt;<span class=\"keyword\">int</span>&gt; list1, List&lt;<span class=\"keyword\">int</span>&gt; list2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//code to swap items</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>派生类可以扩展基类类型的个数</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BaseNodeMultiple&lt;T&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//No error</span></span><br><span class=\"line\">class Node4&lt;T,U&gt; : BaseNodeMultiple&lt;T&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h3><blockquote>\n<p>接口被指定为类型参数上的约束时，仅可使用实现接口的类型</p>\n</blockquote>\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Type parameter T in angle brackets.</span></span><br><span class=\"line\">public class GenericList&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Node head;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Node current = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Nested class is also generic on T</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">class</span> <span class=\"title\">Node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T data;  <span class=\"comment\">//T as private member datatype</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span>(<span class=\"params\">T t</span>)  <span class=\"comment\">//T used in non-generic constructor</span></span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            data = t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node Next</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> next; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; next = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> T Data  <span class=\"comment\">//T as return type of property</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> data; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; data = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GenericList</span>(<span class=\"params\"></span>)  <span class=\"comment\">//constructor</span></span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddHead</span>(<span class=\"params\">T t</span>)  <span class=\"comment\">//T as method parameter type</span></span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Node n = <span class=\"keyword\">new</span> Node(t);</span><br><span class=\"line\">        n.Next = head;</span><br><span class=\"line\">        head = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Implementation of the iterator</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> System.Collections.Generic.<span class=\"function\">IEnumerator&lt;T&gt; <span class=\"title\">GetEnumerator</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Node current = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> current.Data;</span><br><span class=\"line\">            current = current.Next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// IEnumerable&lt;T&gt; inherits from IEnumerable, therefore this class </span></span><br><span class=\"line\">    <span class=\"comment\">// must implement both the generic and non-generic versions of </span></span><br><span class=\"line\">    <span class=\"comment\">// GetEnumerator. In most cases, the non-generic method can </span></span><br><span class=\"line\">    <span class=\"comment\">// simply call the generic method.</span></span><br><span class=\"line\">    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GetEnumerator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SortedList&lt;T&gt; : GenericList&lt;T&gt; where T : System.IComparable&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// A simple, unoptimized sort algorithm that </span></span><br><span class=\"line\">    <span class=\"comment\">// orders list elements from lowest to highest:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">BubbleSort</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == head || <span class=\"literal\">null</span> == head.Next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> swapped;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Node previous = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            Node current = head;</span><br><span class=\"line\">            swapped = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current.next != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//  Because we need to call this method, the SortedList</span></span><br><span class=\"line\">                <span class=\"comment\">//  class is constrained on IEnumerable&lt;T&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current.Data.CompareTo(current.next.Data) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Node tmp = current.next;</span><br><span class=\"line\">                    current.next = current.next.next;</span><br><span class=\"line\">                    tmp.next = current;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (previous == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        head = tmp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        previous.next = tmp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    previous = tmp;</span><br><span class=\"line\">                    swapped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    previous = current;</span><br><span class=\"line\">                    current = current.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (swapped);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A simple class that implements IComparable&lt;T&gt; using itself as the </span></span><br><span class=\"line\"><span class=\"comment\">// type argument. This is a common design pattern in objects that </span></span><br><span class=\"line\"><span class=\"comment\">// are stored in generic lists.</span></span><br><span class=\"line\">public class Person : System.IComparable&lt;Person&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>(<span class=\"params\"><span class=\"keyword\">string</span> s, <span class=\"keyword\">int</span> i</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        name = s;</span><br><span class=\"line\">        age = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This will cause list elements to be sorted on age values.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">CompareTo</span>(<span class=\"params\">Person p</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age - p.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name + <span class=\"string\">\":\"</span> + age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Must implement Equals.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">Person p</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.age == p.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Declare and instantiate a new generic SortedList class.</span></span><br><span class=\"line\">        <span class=\"comment\">//Person is the type argument.</span></span><br><span class=\"line\">        SortedList&lt;Person&gt; list = <span class=\"keyword\">new</span> SortedList&lt;Person&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Create name and age values to initialize Person objects.</span></span><br><span class=\"line\">        <span class=\"keyword\">string</span>[] names = <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"string\">\"Franscoise\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Bill\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Li\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Sandra\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Gunnar\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Alok\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Hiroyuki\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Maria\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Alessandro\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Raul\"</span> </span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ages = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">45</span>, <span class=\"number\">19</span>, <span class=\"number\">28</span>, <span class=\"number\">23</span>, <span class=\"number\">18</span>, <span class=\"number\">9</span>, <span class=\"number\">108</span>, <span class=\"number\">72</span>, <span class=\"number\">30</span>, <span class=\"number\">35</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Populate the list.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">10</span>; x++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            list.AddHead(<span class=\"keyword\">new</span> Person(names[x], ages[x]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Print out unsorted list.</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Person p <span class=\"keyword\">in</span> list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.Console.WriteLine(p.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.Console.WriteLine(<span class=\"string\">\"Done with unsorted list\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Sort the list.</span></span><br><span class=\"line\">        list.BubbleSort();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Print out sorted list.</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Person p <span class=\"keyword\">in</span> list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.Console.WriteLine(p.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.Console.WriteLine(<span class=\"string\">\"Done with sorted list\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<blockquote>\n<p>适用于类的继承规则也适用于接口</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IMonth&lt;T&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface IJanuary     : IMonth&lt;int&gt; &#123; &#125;  //No error</span><br><span class=\"line\">interface IFebruary&lt;T&gt; : IMonth&lt;int&gt; &#123; &#125;  //No error</span><br><span class=\"line\">interface IMarch&lt;T&gt;    : IMonth&lt;T&gt; &#123; &#125;    //No error</span><br><span class=\"line\"><span class=\"comment\">//interface IApril&lt;T&gt;  : IMonth&lt;T, U&gt; &#123;&#125;  //Error</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>具体类可实现封闭式构造接口</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IBaseInterface&lt;T&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class SampleClass : IBaseInterface&lt;string&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>只要类形参列表提供接口所需的所有实参，泛型类即可实现泛型接口或封闭式构造接口</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IBaseInterface1&lt;T&gt; &#123; &#125;</span><br><span class=\"line\">interface IBaseInterface2&lt;T, U&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class SampleClass1&lt;T&gt; : IBaseInterface1&lt;T&gt; &#123; &#125;          //No error</span><br><span class=\"line\">class SampleClass2&lt;T&gt; : IBaseInterface2&lt;T, string&gt; &#123; &#125;  //No error</span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型委托\"><a href=\"#泛型委托\" class=\"headerlink\" title=\"泛型委托\"></a>泛型委托</h3><blockquote>\n<p>委托可以定义它自己的类型参数。引用泛型委托的代码可以指定类型参数以创建封闭式构造类型，就像实例化泛型类或调用泛型方法一样</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> Del&lt;T&gt;(T item);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Notify</span>(<span class=\"params\"><span class=\"keyword\">int</span> i</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Del&lt;<span class=\"keyword\">int</span>&gt; m1 = <span class=\"keyword\">new</span> Del&lt;<span class=\"keyword\">int</span>&gt;(Notify);</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法组转换\"><a href=\"#方法组转换\" class=\"headerlink\" title=\"方法组转换\"></a><span style=\"color:#0366d6;\">方法组转换</span></h2><blockquote>\n<p>它允许我们简单的为委托指定方法名称，而不需要使用关键字new或者显示调用委托的构造函数</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Del&lt;<span class=\"keyword\">int</span>&gt; m2 = Notify;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>根据典型设计模式定义事件时，泛型委托特别有用，因为发件人参数可以为强类型，无需在它和 Object 之间强制转换。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> StackEventHandler&lt;T, U&gt;(T sender, U eventArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">class Stack&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class StackEventArgs : System.EventArgs &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> StackEventHandler&lt;Stack&lt;T&gt;, StackEventArgs&gt; stackEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">OnStackChanged</span>(<span class=\"params\">StackEventArgs a</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        stackEvent(<span class=\"keyword\">this</span>, a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> HandleStackChange&lt;T&gt;(Stack&lt;T&gt; stack, Stack&lt;T&gt;.StackEventArgs args) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Stack&lt;<span class=\"keyword\">double</span>&gt; s = <span class=\"keyword\">new</span> Stack&lt;<span class=\"keyword\">double</span>&gt;();</span><br><span class=\"line\">    SampleClass o = <span class=\"keyword\">new</span> SampleClass();</span><br><span class=\"line\">    s.stackEvent += o.HandleStackChange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型方法\"><a href=\"#泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h3><blockquote>\n<p>如泛型类中的泛型方法</p>\n</blockquote>\n<h3 id=\"泛型结构\"><a href=\"#泛型结构\" class=\"headerlink\" title=\"泛型结构\"></a>泛型结构</h3><blockquote>\n<p>类似泛型类</p>\n</blockquote>\n<h3 id=\"泛型和特性\"><a href=\"#泛型和特性\" class=\"headerlink\" title=\"泛型和特性\"></a>泛型和特性</h3><blockquote>\n<p>仅允许自定义属性引用开放式泛型类型（即未向其提供任何类型参数的泛型类型）和封闭式构造泛型类型（即向所有类型参数提供参数的泛型类型）</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CustomAttribute : System.Attribute</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> System.Object info;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>属性可引用开放式泛型类型</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericClass1&lt;T&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">CustomAttribute(info = typeof(GenericClass1&lt;&gt;))</span>]</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ClassA</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过使用适当数量的逗号指定多个类型参数</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericClass2&lt;T, U&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">CustomAttribute(info = typeof(GenericClass2&lt;,&gt;))</span>]</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ClassB</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>属性可引用封闭式构造泛型类型</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericClass3&lt;T, U, V&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">CustomAttribute(info = typeof(GenericClass3&lt;int, double, string&gt;))</span>]</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ClassC</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>引用泛型类型参数的属性会导致编译时错误</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//[CustomAttribute(info = typeof(GenericClass3&lt;int, T, string&gt;))]  //Error</span></span><br><span class=\"line\">class ClassD&lt;T&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>不能从Attribute继承泛型类型</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//public class CustomAtt&lt;T&gt; : System.Attribute &#123;&#125;  //Error</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h3><blockquote>\n<p>约束告知编译器类型参数必须具备的功能</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">约束</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">描述</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : struct</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的值类型。 有关可为 null 的值类型的信息，请参阅可为 null 的值类型。 由于所有值类型都具有可访问的无参数构造函数，因此 struct 约束表示 new() 约束，并且不能与 new() 约束结合使用。 此外，struct 约束也不能与 unmanaged 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : class</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是引用类型。 此约束还应用于任何类、接口、委托或数组类型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : notnull</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的类型。 参数可以是 C# 8.0 或更高版本中的不可为 null 的引用类型，也可以是不可为 null 的值类型。 此约束还应用于任何类、接口、委托或数组类型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : unmanaged</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的非托管类型。 unmanaged 约束表示 struct 约束，且不能与 struct 约束或 new() 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : new()</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须具有公共无参数构造函数。 与其他约束一起使用时，new() 约束必须最后指定。 new() 约束不能与 struct 和 unmanaged 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : <基类名></td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是指定的基类或派生自指定的基类。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : <接口名称></td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是指定的接口或实现指定的接口。 可指定多个接口约束。 约束接口也可以是泛型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : U</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">为 T 提供的类型参数必须是为 U 提供的参数或派生自为 U 提供的参数。</td>\n</tr>\n</table>\n\n\n\n\n\n","site":{"data":{}},"excerpt":"<p>C#2.0语法（发布于2005，.NET Framework 2.0 .NET Framework 3.0）</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-2-0\"><a href=\"#C-2-0\" class=\"headerlink\" title=\"C# 2.0\"></a><span style=\"color:#0366d6;\">C# 2.0</span></h1><h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\":: 运算符\"></a><span style=\"color:#0366d6;\">:: 运算符</span></h2><blockquote>\n<p>使用命名空间别名限定符 :: 访问已设置别名的命名空间的成员。<br>使用 using 别名指令创建的命名空间别名</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> forwinforms = System.Drawing;</span><br><span class=\"line\"><span class=\"keyword\">using</span> forwpf = System.Windows;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Converters</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public static forwpf::Point Convert(forwinforms::Point point) =&gt; new forwpf::Point(point.X, point.Y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>外部别名,有时你可能不得不引用具有相同的完全限定类型名称的程序集的两个版本<br>GridV1::Grid 是 grid.dll 中的网格控件，GridV2::Grid 是 grid20.dll 中的网格控件</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/r:GridV1=grid.dll</span><br><span class=\"line\"></span><br><span class=\"line\">/r:GridV2=grid20.dll</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">alias</span> GridV1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">alias</span> GridV2;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>global 别名，该别名是全局命名空间别名。与 :: 限定符一起使用时，global 别名始终引用全局命名空间，即使存在用户定义的 global 命名空间别名也是如此<br>以下示例使用 global 别名访问 .NET System 命名空间，该命名空间是全局命名空间的成员。如果没有 global 别名，则将访问用户定义的 System 命名空间（该命名空间是 MyCompany.MyProduct 命名空间的成员）</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">MyCompany.MyProduct.System</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        static void Main() =&gt; global::System.Console.WriteLine(\"Using global alias\");</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Console</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">string</span> Suggestion =&gt; <span class=\"string\">\"Consider renaming this class\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"getter-setter-单独可访问性\"><a href=\"#getter-setter-单独可访问性\" class=\"headerlink\" title=\"getter/setter 单独可访问性\"></a><span style=\"color:#0366d6;\">getter/setter 单独可访问性</span></h2><blockquote>\n<p>就是在get或者set前面可以加访问修饰符</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">User</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span>(<span class=\"params\"><span class=\"keyword\">int</span> age</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.age=age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Age &#123;</span><br><span class=\"line\">      <span class=\"keyword\">get</span> &#123;<span class=\"keyword\">return</span> age;&#125;</span><br><span class=\"line\">      <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>&#123;age=<span class=\"keyword\">value</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态类\"><a href=\"#静态类\" class=\"headerlink\" title=\"静态类\"></a><span style=\"color:#0366d6;\">静态类</span></h2><blockquote>\n<p>以下列表提供静态类的主要功能：<br>1.只包含静态成员。<br>2.无法进行实例化。<br>3.会进行密封。<br>4.不能包含实例构造函数。<br>静态类会进行密封，因此不能继承。 它们不能继承自任何类（除了 Object）。 静态类不能包含实例构造函数；但是，它们可以包含静态构造函数。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">TemperatureConverter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">CelsiusToFahrenheit</span>(<span class=\"params\"><span class=\"keyword\">string</span> temperatureCelsius</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Convert argument to double for calculations.</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> celsius = Double.Parse(temperatureCelsius);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Convert Celsius to Fahrenheit.</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> fahrenheit = (celsius * <span class=\"number\">9</span> / <span class=\"number\">5</span>) + <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fahrenheit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">FahrenheitToCelsius</span>(<span class=\"params\"><span class=\"keyword\">string</span> temperatureFahrenheit</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Convert argument to double for calculations.</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> fahrenheit = Double.Parse(temperatureFahrenheit);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Convert Fahrenheit to Celsius.</span></span><br><span class=\"line\">        <span class=\"keyword\">double</span> celsius = (fahrenheit - <span class=\"number\">32</span>) * <span class=\"number\">5</span> / <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> celsius;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"协变和逆变\"><a href=\"#协变和逆变\" class=\"headerlink\" title=\"协变和逆变\"></a><span style=\"color:#0366d6;\">协变和逆变</span></h2><blockquote>\n<p>协变和逆变能够实现数组类型、委托类型和泛型类型参数的隐式引用转换。协变保留分配兼容性，逆变则与之相反。<br>数组协变和逆变</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">First</span> &#123; &#125;  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Second</span> : <span class=\"title\">First</span> &#123; &#125;  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> First <span class=\"title\">SampleDelegate</span>(<span class=\"params\">Second a</span>)</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>委托协变和逆变</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Matching signature.  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> First <span class=\"title\">ASecondRFirst</span>(<span class=\"params\">Second second</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> First(); &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// The return type is more derived.  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Second <span class=\"title\">ASecondRSecond</span>(<span class=\"params\">Second second</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Second(); &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// The argument type is less derived.  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> First <span class=\"title\">AFirstRFirst</span>(<span class=\"params\">First first</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> First(); &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// The return type is more derived   </span></span><br><span class=\"line\"><span class=\"comment\">// and the argument type is less derived.  </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Second <span class=\"title\">AFirstRSecond</span>(<span class=\"params\">First first</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Second(); &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Assigning a method with a matching signature   </span></span><br><span class=\"line\"><span class=\"comment\">// to a non-generic delegate. No conversion is necessary.  </span></span><br><span class=\"line\">SampleDelegate dNonGeneric = ASecondRFirst;  </span><br><span class=\"line\"><span class=\"comment\">// Assigning a method with a more derived return type   </span></span><br><span class=\"line\"><span class=\"comment\">// and less derived argument type to a non-generic delegate.  </span></span><br><span class=\"line\"><span class=\"comment\">// The implicit conversion is used.  </span></span><br><span class=\"line\">SampleDelegate dNonGenericConversion = AFirstRSecond;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可为空的值类型\"><a href=\"#可为空的值类型\" class=\"headerlink\" title=\"可为空的值类型\"></a><span style=\"color:#0366d6;\">可为空的值类型</span></h2><h3 id=\"声明和赋值\"><a href=\"#声明和赋值\" class=\"headerlink\" title=\"声明和赋值\"></a>声明和赋值</h3><blockquote>\n<p>由于值类型可隐式转换为相应的可为空的值类型，因此可以像向其基础值类型赋值一样，向可为空值类型的变量赋值。 还可分配 null 值。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span>? pi = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span>? letter = <span class=\"string\">'a'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> m2 = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? m = m2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span>? flag = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// An array of a nullable type:</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>?[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>?[<span class=\"number\">10</span>];</span><br></pre></td></tr></table></figure>\n<h3 id=\"提升的运算符\"><a href=\"#提升的运算符\" class=\"headerlink\" title=\"提升的运算符\"></a>提升的运算符</h3><blockquote>\n<p>预定义的一元运算符和二元运算符或值类型 T 支持的任何重载运算符也受相应的可为空值类型 T? 支持。 如果一个或全部两个操作数为 null ，则这些运算符（也称为提升的运算符）将生成 null；否则，运算符使用其操作数所包含的值来计算结果。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>? a = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? b = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? c = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">a++;        <span class=\"comment\">// a is 11</span></span><br><span class=\"line\">a = a * c;  <span class=\"comment\">// a is 110</span></span><br><span class=\"line\">a = a + b;  <span class=\"comment\">// a is null</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于比较运算符 &lt;、&gt;、&lt;= 和 &gt;=，如果一个或全部两个操作数都为 null，则结果为 false；否则，将比较操作数的包含值。 请勿作出如下假定：由于某个特定的比较（例如 &lt;=）返回 false，则相反的比较 (&gt;) 返回 true</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>? a = <span class=\"number\">10</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;a&#125;</span> &gt;= null is <span class=\"subst\">&#123;a &gt;= <span class=\"literal\">null</span>&#125;</span>\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;a&#125;</span> &lt; null is <span class=\"subst\">&#123;a &lt; <span class=\"literal\">null</span>&#125;</span>\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;a&#125;</span> == null is <span class=\"subst\">&#123;a == <span class=\"literal\">null</span>&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// 10 &gt;= null is False</span></span><br><span class=\"line\"><span class=\"comment\">// 10 &lt; null is False</span></span><br><span class=\"line\"><span class=\"comment\">// 10 == null is False</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于相等运算符 ==，如果两个操作数都为 null，则结果为 true；如果只有一个操作数为 null，则结果为 false；否则，将比较操作数的包含值。<br>对于不等运算符 !=，如果两个操作数都为 null，则结果为 false；如果只有一个操作数为 null，则结果为 true；否则，将比较操作数的包含值。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>? b = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? c = <span class=\"literal\">null</span>;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"null &gt;= null is <span class=\"subst\">&#123;b &gt;= c&#125;</span>\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"null == null is <span class=\"subst\">&#123;b == c&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// null &gt;= null is False</span></span><br><span class=\"line\"><span class=\"comment\">// null == null is True</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"装箱和取消装箱\"><a href=\"#装箱和取消装箱\" class=\"headerlink\" title=\"装箱和取消装箱\"></a>装箱和取消装箱</h3><blockquote>\n<p>可为空值类型的实例 T?已装箱，如下所示<br>1.如果 HasValue 返回 false，则生成空引用<br>2.如果 HasValue 返回 true，则基础值类型 T 的对应值将装箱，而不对 Nullable &lt;T&gt; 的实例进行装箱<br>可将值类型 T 的已装箱值取消装箱到相应的可为空值类型 T?</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">41</span>;</span><br><span class=\"line\"><span class=\"keyword\">object</span> aBoxed = a;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? aNullable = (<span class=\"keyword\">int</span>?)aBoxed;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Value of aNullable: <span class=\"subst\">&#123;aNullable&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">object</span> aNullableBoxed = aNullable;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (aNullableBoxed <span class=\"keyword\">is</span> <span class=\"keyword\">int</span> valueOfA)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">$\"aNullableBoxed is boxed int: <span class=\"subst\">&#123;valueOfA&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// Value of aNullable: 41</span></span><br><span class=\"line\"><span class=\"comment\">// aNullableBoxed is boxed int: 41</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"部分类型\"><a href=\"#部分类型\" class=\"headerlink\" title=\"部分类型\"></a><span style=\"color:#0366d6;\">部分类型</span></h2><blockquote>\n<p>拆分<span style=\"color:#0065b3;\">类、结构、接口、方法</span>的定义到两个或更多的文件中是可能的<br>partial 修饰符不可用于委托或枚举声明中</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoWork</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GoToLunch</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名方法\"><a href=\"#匿名方法\" class=\"headerlink\" title=\"匿名方法\"></a><span style=\"color:#0366d6;\">匿名方法</span></h2><blockquote>\n<p>delegate 运算符创建一个可以转换为委托类型的匿名方法</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; sum = <span class=\"keyword\">delegate</span> (<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b) &#123; <span class=\"keyword\">return</span> a + b; &#125;;</span><br><span class=\"line\">Console.WriteLine(sum(<span class=\"number\">3</span>, <span class=\"number\">4</span>));  <span class=\"comment\">// output: 7</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a><span style=\"color:#0366d6;\">迭代器</span></h2><blockquote>\n<p>yield不是保留字，只有在 return 或 break 关键字之前使用时才有特殊含义<br>迭代器 可用于逐步迭代集合，例如列表和数组。迭代器方法或 get 访问器可对集合执行自定义迭代。 迭代器方法使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器函数时，将从该位置重新开始执行</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">int</span> number <span class=\"keyword\">in</span> <span class=\"title\">SomeNumbers</span>(<span class=\"params\"></span>))</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Console.Write(number.ToString() + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Output: 3 5 8</span></span><br><span class=\"line\">    Console.ReadKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> System.Collections.<span class=\"function\">IEnumerable <span class=\"title\">SomeNumbers</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> <span class=\"number\">8</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>迭代器方法或 get 访问器的返回类型可以是IEnumerable、IEnumerable&lt;T&gt;、IEnumerator或IEnumerator&lt;T&gt;可以使用 yield break 语句来终止迭代<br>迭代器可用作一种方法，或一个 get 访问器。不能在<span style=\"color:#0065b3;\">事件、实例构造函数、静态构造函数或静态终结器</span>中使用迭代器。<br>必须存在从 yield return 语句中的表达式类型到迭代器返回的 IEnumerable&lt;T&gt; 类型参数的隐式转换。<br>即使将迭代器编写成方法，编译器也会将其转换为实际上是状态机的嵌套类。可使用 Ildasm.exe 工具查看</p>\n</blockquote>\n<details>\n<summary>点开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Zoo</span> : <span class=\"title\">IEnumerable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Private members.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Animal&gt; animals = <span class=\"keyword\">new</span> List&lt;Animal&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Public methods.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddMammal</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        animals.Add(<span class=\"keyword\">new</span> Animal &#123; Name = name, Type = Animal.TypeEnum.Mammal &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddBird</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        animals.Add(<span class=\"keyword\">new</span> Animal &#123; Name = name, Type = Animal.TypeEnum.Bird &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IEnumerator <span class=\"title\">GetEnumerator</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Animal theAnimal <span class=\"keyword\">in</span> animals)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> theAnimal.Name;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Public members.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IEnumerable Mammals</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> AnimalsForType(Animal.TypeEnum.Mammal); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IEnumerable Birds</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> AnimalsForType(Animal.TypeEnum.Bird); &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Private methods.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IEnumerable <span class=\"title\">AnimalsForType</span>(<span class=\"params\">Animal.TypeEnum type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Animal theAnimal <span class=\"keyword\">in</span> animals)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (theAnimal.Type == type)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> theAnimal.Name;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Private class.</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title\">Animal</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> TypeEnum &#123; Bird, Mammal &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> TypeEnum Type &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<blockquote>\n<p>引用类实例 (theZoo) 的 foreach 语句隐式调用 GetEnumerator 方法。 引用 Birds 和 Mammals 属性的 foreach 语句使用 AnimalsForType 命名迭代器方法。</p>\n</blockquote>\n<details>\n<summary>点开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Zoo theZoo = <span class=\"keyword\">new</span> Zoo();</span><br><span class=\"line\"></span><br><span class=\"line\">    theZoo.AddMammal(<span class=\"string\">\"Whale\"</span>);</span><br><span class=\"line\">    theZoo.AddMammal(<span class=\"string\">\"Rhinoceros\"</span>);</span><br><span class=\"line\">    theZoo.AddBird(<span class=\"string\">\"Penguin\"</span>);</span><br><span class=\"line\">    theZoo.AddBird(<span class=\"string\">\"Warbler\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> name <span class=\"keyword\">in</span> theZoo)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.Write(name + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine();</span><br><span class=\"line\">    <span class=\"comment\">// Output: Whale Rhinoceros Penguin Warbler</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> name <span class=\"keyword\">in</span> theZoo.Birds)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.Write(name + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine();</span><br><span class=\"line\">    <span class=\"comment\">// Output: Penguin Warbler</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> name <span class=\"keyword\">in</span> theZoo.Mammals)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.Write(name + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Console.WriteLine();</span><br><span class=\"line\">    <span class=\"comment\">// Output: Whale Rhinoceros</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Console.ReadKey();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a><span style=\"color:#0366d6;\">泛型</span></h2><h3 id=\"泛型类\"><a href=\"#泛型类\" class=\"headerlink\" title=\"泛型类\"></a>泛型类</h3><blockquote>\n<p>泛型类封装不特定于特定数据类型的操作。泛型类最常见用法是用于链接列表、哈希表、堆栈、队列和树等集合。 无论存储数据的类型如何，添加项和从集合删除项等操作的执行方式基本相同。</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">BaseNode</span> &#123; &#125;</span><br><span class=\"line\">class BaseNodeGeneric&lt;T&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// concrete type</span></span><br><span class=\"line\">class NodeConcrete&lt;T&gt; : BaseNode &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>继承封闭类型</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//closed constructed type</span></span><br><span class=\"line\">class NodeClosed&lt;T&gt; : BaseNodeGeneric&lt;int&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>继承开放类型</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//open constructed type </span></span><br><span class=\"line\">class NodeOpen&lt;T&gt; : BaseNodeGeneric&lt;T&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>泛型类可继承自具体的封闭式构造或开放式构造基类</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//No error</span></span><br><span class=\"line\">class Node1 : BaseNodeGeneric&lt;int&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Generates an error</span></span><br><span class=\"line\"><span class=\"comment\">//class Node2 : BaseNodeGeneric&lt;T&gt; &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Generates an error</span></span><br><span class=\"line\"><span class=\"comment\">//class Node3 : T &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>继承自开放式的泛型类必须对非此继承任何基类类型参数提供类型参数</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BaseNodeMultiple&lt;T, U&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//No error</span></span><br><span class=\"line\">class Node4&lt;T&gt; : BaseNodeMultiple&lt;T, int&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//No error</span></span><br><span class=\"line\">class Node5&lt;T, U&gt; : BaseNodeMultiple&lt;T, U&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Generates an error</span></span><br><span class=\"line\"><span class=\"comment\">//class Node6&lt;T&gt; : BaseNodeMultiple&lt;T, U&gt; &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>继承自开放式构造类型的泛型类必须指定作为基类型上约束</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class NodeItem&lt;T&gt; where T : System.IComparable&lt;T&gt;, new() &#123; &#125;</span><br><span class=\"line\">class SpecialNodeItem&lt;T&gt; : NodeItem&lt;T&gt; where T : System.IComparable&lt;T&gt;, new() &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>开放式构造和封闭式构造类型可用作方法参数</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> Swap&lt;T&gt;(List&lt;T&gt; list1, List&lt;T&gt; list2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//code to swap items</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span>(<span class=\"params\">List&lt;<span class=\"keyword\">int</span>&gt; list1, List&lt;<span class=\"keyword\">int</span>&gt; list2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//code to swap items</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>派生类可以扩展基类类型的个数</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class BaseNodeMultiple&lt;T&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//No error</span></span><br><span class=\"line\">class Node4&lt;T,U&gt; : BaseNodeMultiple&lt;T&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型接口\"><a href=\"#泛型接口\" class=\"headerlink\" title=\"泛型接口\"></a>泛型接口</h3><blockquote>\n<p>接口被指定为类型参数上的约束时，仅可使用实现接口的类型</p>\n</blockquote>\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Type parameter T in angle brackets.</span></span><br><span class=\"line\">public class GenericList&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Node head;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Node current = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Nested class is also generic on T</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">class</span> <span class=\"title\">Node</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node next;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> T data;  <span class=\"comment\">//T as private member datatype</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span>(<span class=\"params\">T t</span>)  <span class=\"comment\">//T used in non-generic constructor</span></span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            data = t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node Next</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> next; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; next = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> T Data  <span class=\"comment\">//T as return type of property</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> data; &#125;</span><br><span class=\"line\">            <span class=\"keyword\">set</span> &#123; data = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GenericList</span>(<span class=\"params\"></span>)  <span class=\"comment\">//constructor</span></span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        head = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddHead</span>(<span class=\"params\">T t</span>)  <span class=\"comment\">//T as method parameter type</span></span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Node n = <span class=\"keyword\">new</span> Node(t);</span><br><span class=\"line\">        n.Next = head;</span><br><span class=\"line\">        head = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Implementation of the iterator</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> System.Collections.Generic.<span class=\"function\">IEnumerator&lt;T&gt; <span class=\"title\">GetEnumerator</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Node current = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> current.Data;</span><br><span class=\"line\">            current = current.Next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// IEnumerable&lt;T&gt; inherits from IEnumerable, therefore this class </span></span><br><span class=\"line\">    <span class=\"comment\">// must implement both the generic and non-generic versions of </span></span><br><span class=\"line\">    <span class=\"comment\">// GetEnumerator. In most cases, the non-generic method can </span></span><br><span class=\"line\">    <span class=\"comment\">// simply call the generic method.</span></span><br><span class=\"line\">    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GetEnumerator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class SortedList&lt;T&gt; : GenericList&lt;T&gt; where T : System.IComparable&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// A simple, unoptimized sort algorithm that </span></span><br><span class=\"line\">    <span class=\"comment\">// orders list elements from lowest to highest:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">BubbleSort</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == head || <span class=\"literal\">null</span> == head.Next)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> swapped;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Node previous = <span class=\"literal\">null</span>;</span><br><span class=\"line\">            Node current = head;</span><br><span class=\"line\">            swapped = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (current.next != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//  Because we need to call this method, the SortedList</span></span><br><span class=\"line\">                <span class=\"comment\">//  class is constrained on IEnumerable&lt;T&gt;</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (current.Data.CompareTo(current.next.Data) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Node tmp = current.next;</span><br><span class=\"line\">                    current.next = current.next.next;</span><br><span class=\"line\">                    tmp.next = current;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (previous == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        head = tmp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        previous.next = tmp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    previous = tmp;</span><br><span class=\"line\">                    swapped = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    previous = current;</span><br><span class=\"line\">                    current = current.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (swapped);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A simple class that implements IComparable&lt;T&gt; using itself as the </span></span><br><span class=\"line\"><span class=\"comment\">// type argument. This is a common design pattern in objects that </span></span><br><span class=\"line\"><span class=\"comment\">// are stored in generic lists.</span></span><br><span class=\"line\">public class Person : System.IComparable&lt;Person&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>(<span class=\"params\"><span class=\"keyword\">string</span> s, <span class=\"keyword\">int</span> i</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        name = s;</span><br><span class=\"line\">        age = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This will cause list elements to be sorted on age values.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">CompareTo</span>(<span class=\"params\">Person p</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age - p.age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name + <span class=\"string\">\":\"</span> + age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Must implement Equals.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">Person p</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">this</span>.age == p.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Declare and instantiate a new generic SortedList class.</span></span><br><span class=\"line\">        <span class=\"comment\">//Person is the type argument.</span></span><br><span class=\"line\">        SortedList&lt;Person&gt; list = <span class=\"keyword\">new</span> SortedList&lt;Person&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Create name and age values to initialize Person objects.</span></span><br><span class=\"line\">        <span class=\"keyword\">string</span>[] names = <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[] </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            <span class=\"string\">\"Franscoise\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Bill\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Li\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Sandra\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Gunnar\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Alok\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Hiroyuki\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Maria\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Alessandro\"</span>, </span><br><span class=\"line\">            <span class=\"string\">\"Raul\"</span> </span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ages = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123; <span class=\"number\">45</span>, <span class=\"number\">19</span>, <span class=\"number\">28</span>, <span class=\"number\">23</span>, <span class=\"number\">18</span>, <span class=\"number\">9</span>, <span class=\"number\">108</span>, <span class=\"number\">72</span>, <span class=\"number\">30</span>, <span class=\"number\">35</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Populate the list.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">10</span>; x++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            list.AddHead(<span class=\"keyword\">new</span> Person(names[x], ages[x]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Print out unsorted list.</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Person p <span class=\"keyword\">in</span> list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.Console.WriteLine(p.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.Console.WriteLine(<span class=\"string\">\"Done with unsorted list\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Sort the list.</span></span><br><span class=\"line\">        list.BubbleSort();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Print out sorted list.</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Person p <span class=\"keyword\">in</span> list)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            System.Console.WriteLine(p.ToString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.Console.WriteLine(<span class=\"string\">\"Done with sorted list\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<blockquote>\n<p>适用于类的继承规则也适用于接口</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IMonth&lt;T&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface IJanuary     : IMonth&lt;int&gt; &#123; &#125;  //No error</span><br><span class=\"line\">interface IFebruary&lt;T&gt; : IMonth&lt;int&gt; &#123; &#125;  //No error</span><br><span class=\"line\">interface IMarch&lt;T&gt;    : IMonth&lt;T&gt; &#123; &#125;    //No error</span><br><span class=\"line\"><span class=\"comment\">//interface IApril&lt;T&gt;  : IMonth&lt;T, U&gt; &#123;&#125;  //Error</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>具体类可实现封闭式构造接口</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IBaseInterface&lt;T&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class SampleClass : IBaseInterface&lt;string&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>只要类形参列表提供接口所需的所有实参，泛型类即可实现泛型接口或封闭式构造接口</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IBaseInterface1&lt;T&gt; &#123; &#125;</span><br><span class=\"line\">interface IBaseInterface2&lt;T, U&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class SampleClass1&lt;T&gt; : IBaseInterface1&lt;T&gt; &#123; &#125;          //No error</span><br><span class=\"line\">class SampleClass2&lt;T&gt; : IBaseInterface2&lt;T, string&gt; &#123; &#125;  //No error</span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型委托\"><a href=\"#泛型委托\" class=\"headerlink\" title=\"泛型委托\"></a>泛型委托</h3><blockquote>\n<p>委托可以定义它自己的类型参数。引用泛型委托的代码可以指定类型参数以创建封闭式构造类型，就像实例化泛型类或调用泛型方法一样</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> Del&lt;T&gt;(T item);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Notify</span>(<span class=\"params\"><span class=\"keyword\">int</span> i</span>)</span> &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Del&lt;<span class=\"keyword\">int</span>&gt; m1 = <span class=\"keyword\">new</span> Del&lt;<span class=\"keyword\">int</span>&gt;(Notify);</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法组转换\"><a href=\"#方法组转换\" class=\"headerlink\" title=\"方法组转换\"></a><span style=\"color:#0366d6;\">方法组转换</span></h2><blockquote>\n<p>它允许我们简单的为委托指定方法名称，而不需要使用关键字new或者显示调用委托的构造函数</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Del&lt;<span class=\"keyword\">int</span>&gt; m2 = Notify;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>根据典型设计模式定义事件时，泛型委托特别有用，因为发件人参数可以为强类型，无需在它和 Object 之间强制转换。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> StackEventHandler&lt;T, U&gt;(T sender, U eventArgs);</span><br><span class=\"line\"></span><br><span class=\"line\">class Stack&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public class StackEventArgs : System.EventArgs &#123; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> StackEventHandler&lt;Stack&lt;T&gt;, StackEventArgs&gt; stackEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">OnStackChanged</span>(<span class=\"params\">StackEventArgs a</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        stackEvent(<span class=\"keyword\">this</span>, a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> HandleStackChange&lt;T&gt;(Stack&lt;T&gt; stack, Stack&lt;T&gt;.StackEventArgs args) &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Stack&lt;<span class=\"keyword\">double</span>&gt; s = <span class=\"keyword\">new</span> Stack&lt;<span class=\"keyword\">double</span>&gt;();</span><br><span class=\"line\">    SampleClass o = <span class=\"keyword\">new</span> SampleClass();</span><br><span class=\"line\">    s.stackEvent += o.HandleStackChange;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型方法\"><a href=\"#泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h3><blockquote>\n<p>如泛型类中的泛型方法</p>\n</blockquote>\n<h3 id=\"泛型结构\"><a href=\"#泛型结构\" class=\"headerlink\" title=\"泛型结构\"></a>泛型结构</h3><blockquote>\n<p>类似泛型类</p>\n</blockquote>\n<h3 id=\"泛型和特性\"><a href=\"#泛型和特性\" class=\"headerlink\" title=\"泛型和特性\"></a>泛型和特性</h3><blockquote>\n<p>仅允许自定义属性引用开放式泛型类型（即未向其提供任何类型参数的泛型类型）和封闭式构造泛型类型（即向所有类型参数提供参数的泛型类型）</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class CustomAttribute : System.Attribute</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> System.Object info;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>属性可引用开放式泛型类型</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericClass1&lt;T&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">CustomAttribute(info = typeof(GenericClass1&lt;&gt;))</span>]</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ClassA</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过使用适当数量的逗号指定多个类型参数</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericClass2&lt;T, U&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">CustomAttribute(info = typeof(GenericClass2&lt;,&gt;))</span>]</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ClassB</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>属性可引用封闭式构造泛型类型</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GenericClass3&lt;T, U, V&gt; &#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">CustomAttribute(info = typeof(GenericClass3&lt;int, double, string&gt;))</span>]</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">ClassC</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>引用泛型类型参数的属性会导致编译时错误</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//[CustomAttribute(info = typeof(GenericClass3&lt;int, T, string&gt;))]  //Error</span></span><br><span class=\"line\">class ClassD&lt;T&gt; &#123; &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>不能从Attribute继承泛型类型</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//public class CustomAtt&lt;T&gt; : System.Attribute &#123;&#125;  //Error</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型约束\"><a href=\"#泛型约束\" class=\"headerlink\" title=\"泛型约束\"></a>泛型约束</h3><blockquote>\n<p>约束告知编译器类型参数必须具备的功能</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">约束</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">描述</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : struct</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的值类型。 有关可为 null 的值类型的信息，请参阅可为 null 的值类型。 由于所有值类型都具有可访问的无参数构造函数，因此 struct 约束表示 new() 约束，并且不能与 new() 约束结合使用。 此外，struct 约束也不能与 unmanaged 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : class</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是引用类型。 此约束还应用于任何类、接口、委托或数组类型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : notnull</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的类型。 参数可以是 C# 8.0 或更高版本中的不可为 null 的引用类型，也可以是不可为 null 的值类型。 此约束还应用于任何类、接口、委托或数组类型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : unmanaged</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是不可为 null 的非托管类型。 unmanaged 约束表示 struct 约束，且不能与 struct 约束或 new() 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : new()</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须具有公共无参数构造函数。 与其他约束一起使用时，new() 约束必须最后指定。 new() 约束不能与 struct 和 unmanaged 约束结合使用。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : <基类名></td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是指定的基类或派生自指定的基类。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : <接口名称></td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">类型参数必须是指定的接口或实现指定的接口。 可指定多个接口约束。 约束接口也可以是泛型。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">where T : U</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">为 T 提供的类型参数必须是为 U 提供的参数或派生自为 U 提供的参数。</td>\n</tr>\n</table>"},{"title":"C#4.0语法","date":"2020-02-24T16:00:00.000Z","_content":"C#4.0语法（发布于2010，.NET Framework 4）\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#4.0语法</span>\n## <span style=\"color:#0366d6;\">动态绑定</span>\n>dynamic 类型表示变量的使用和对其成员的引用绕过编译时类型检查。 改为在运行时解析这些操作\n\n<details>\n<summary>展开查看</summary>\n\n```csharp\nnamespace DynamicExamples\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ExampleClass ec = new ExampleClass();\n            Console.WriteLine(ec.exampleMethod(10));\n            Console.WriteLine(ec.exampleMethod(\"value\"));\n\n            // The following line causes a compiler error because exampleMethod\n            // takes only one argument.\n            //Console.WriteLine(ec.exampleMethod(10, 4));\n\n            dynamic dynamic_ec = new ExampleClass();\n            Console.WriteLine(dynamic_ec.exampleMethod(10));\n\n            // Because dynamic_ec is dynamic, the following call to exampleMethod\n            // with two arguments does not produce an error at compile time.\n            // However, it does cause a run-time error. \n            //Console.WriteLine(dynamic_ec.exampleMethod(10, 4));\n        }\n    }\n\n    class ExampleClass\n    {\n        static dynamic field;\n        dynamic prop { get; set; }\n\n        public dynamic exampleMethod(dynamic d)\n        {\n            dynamic local = \"Local variable\";\n            int two = 2;\n\n            if (d is int)\n            {\n                return local;\n            }\n            else\n            {\n                return two;\n            }\n        }\n    }\n}\n```\n</details>\n\n## <span style=\"color:#0366d6;\">命名实参和可选实参</span>\n>参数的默认值必须由以下几种表达式中的一种来赋予：\n1.常量，例如文本字符串或数字。\n2.new ValType() 形式的表达式，其中 ValType 是值类型。 请注意，这会调用该值类型的隐式无参数构造函数，该函数不是类型的实际成员。\n3.default(ValType) 形式的表达式，其中 ValType 是值类型。\n\n```csharp\npublic void ExampleMethod(int required, int optionalInt = default(int),\n                             string description = \"Optional Description\")\n   {\n      Console.WriteLine(\"{0}: {1} + {2} = {3}\", description, required, \n                        optionalInt, required + optionalInt);\n   }\n```\n>前两个方法调用使用位置自变量。 第一个方法同时省略了两个可选自变量，而第二个省略了最后一个自变量。 第三个方法调用向必需的参数提供位置自变量，但使用命名的自变量向 description 参数提供值，同时省略 optionalInt 自变量\n```csharp\nvar opt = new Options();\n    opt.ExampleMethod(10);\n    opt.ExampleMethod(10, 2);\n    opt.ExampleMethod(12, description: \"Addition with zero:\");\n```\n## <span style=\"color:#0366d6;\">泛型中的协变和逆变</span>\n>协变和逆变都是术语，前者指能够使用比原始指定的派生类型的派生程度更大（更具体的）的类型，后者指能够使用比原始指定的派生类型的派生程度更小（不太具体的）的类型。\n\n```csharp\nusing System;\n\npublic class Type1 {}\npublic class Type2 : Type1 {}\npublic class Type3 : Type2 {}\n\npublic class Program\n{\n    public static Type3 MyMethod(Type1 t)\n    {\n        return t as Type3 ?? new Type3();\n    }\n\n    static void Main() \n    {\n        Func<Type2, Type2> f1 = MyMethod;\n\n        // Covariant return type and contravariant parameter type.\n        Func<Type3, Type1> f2 = f1;\n        Type1 t1 = f2(new Type3());\n    }\n}\n```\n### 具有协变类型参数的泛型接口\n<details>\n<summary>展开查看</summary>\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Base\n{\n    public static void PrintBases(IEnumerable<Base> bases)\n    {\n        foreach(Base b in bases)\n        {\n            Console.WriteLine(b);\n        }\n    }\n}\n\nclass Derived : Base\n{\n    public static void Main()\n    {\n        List<Derived> dlist = new List<Derived>();\n\n        Derived.PrintBases(dlist);\n        IEnumerable<Base> bIEnum = dlist;\n    }\n}\n```\n</details>\n\n### 具有逆变泛型类型参数的泛型接口\n<details>\n<summary>展开查看</summary>\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nabstract class Shape\n{\n    public virtual double Area { get { return 0; }}\n}\n\nclass Circle : Shape\n{\n    private double r;\n    public Circle(double radius) { r = radius; }\n    public double Radius { get { return r; }}\n    public override double Area { get { return Math.PI * r * r; }}\n}\n\nclass ShapeAreaComparer : System.Collections.Generic.IComparer<Shape>\n{\n    int IComparer<Shape>.Compare(Shape a, Shape b) \n    { \n        if (a == null) return b == null ? 0 : -1;\n        return b == null ? 1 : a.Area.CompareTo(b.Area);\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // You can pass ShapeAreaComparer, which implements IComparer<Shape>,\n        // even though the constructor for SortedSet<Circle> expects \n        // IComparer<Circle>, because type parameter T of IComparer<T> is\n        // contravariant.\n        SortedSet<Circle> circlesByArea = \n            new SortedSet<Circle>(new ShapeAreaComparer()) \n                { new Circle(7.2), new Circle(100), null, new Circle(.01) };\n\n        foreach (Circle c in circlesByArea)\n        {\n            Console.WriteLine(c == null ? \"null\" : \"Circle with area \" + c.Area);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nnull\nCircle with area 0.000314159265358979\nCircle with area 162.860163162095\nCircle with area 31415.9265358979\n */\n```\n</details>\n\n### 定义 Variant 泛型接口和委托\n>协变类型参数用 out 关键字,逆变类型参数用 in 关键字\n\n","source":"_posts/csharpgrammar-6.md","raw":"---\ntitle: C#4.0语法\ndate: 2020-02-25\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#4.0语法（发布于2010，.NET Framework 4）\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#4.0语法</span>\n## <span style=\"color:#0366d6;\">动态绑定</span>\n>dynamic 类型表示变量的使用和对其成员的引用绕过编译时类型检查。 改为在运行时解析这些操作\n\n<details>\n<summary>展开查看</summary>\n\n```csharp\nnamespace DynamicExamples\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ExampleClass ec = new ExampleClass();\n            Console.WriteLine(ec.exampleMethod(10));\n            Console.WriteLine(ec.exampleMethod(\"value\"));\n\n            // The following line causes a compiler error because exampleMethod\n            // takes only one argument.\n            //Console.WriteLine(ec.exampleMethod(10, 4));\n\n            dynamic dynamic_ec = new ExampleClass();\n            Console.WriteLine(dynamic_ec.exampleMethod(10));\n\n            // Because dynamic_ec is dynamic, the following call to exampleMethod\n            // with two arguments does not produce an error at compile time.\n            // However, it does cause a run-time error. \n            //Console.WriteLine(dynamic_ec.exampleMethod(10, 4));\n        }\n    }\n\n    class ExampleClass\n    {\n        static dynamic field;\n        dynamic prop { get; set; }\n\n        public dynamic exampleMethod(dynamic d)\n        {\n            dynamic local = \"Local variable\";\n            int two = 2;\n\n            if (d is int)\n            {\n                return local;\n            }\n            else\n            {\n                return two;\n            }\n        }\n    }\n}\n```\n</details>\n\n## <span style=\"color:#0366d6;\">命名实参和可选实参</span>\n>参数的默认值必须由以下几种表达式中的一种来赋予：\n1.常量，例如文本字符串或数字。\n2.new ValType() 形式的表达式，其中 ValType 是值类型。 请注意，这会调用该值类型的隐式无参数构造函数，该函数不是类型的实际成员。\n3.default(ValType) 形式的表达式，其中 ValType 是值类型。\n\n```csharp\npublic void ExampleMethod(int required, int optionalInt = default(int),\n                             string description = \"Optional Description\")\n   {\n      Console.WriteLine(\"{0}: {1} + {2} = {3}\", description, required, \n                        optionalInt, required + optionalInt);\n   }\n```\n>前两个方法调用使用位置自变量。 第一个方法同时省略了两个可选自变量，而第二个省略了最后一个自变量。 第三个方法调用向必需的参数提供位置自变量，但使用命名的自变量向 description 参数提供值，同时省略 optionalInt 自变量\n```csharp\nvar opt = new Options();\n    opt.ExampleMethod(10);\n    opt.ExampleMethod(10, 2);\n    opt.ExampleMethod(12, description: \"Addition with zero:\");\n```\n## <span style=\"color:#0366d6;\">泛型中的协变和逆变</span>\n>协变和逆变都是术语，前者指能够使用比原始指定的派生类型的派生程度更大（更具体的）的类型，后者指能够使用比原始指定的派生类型的派生程度更小（不太具体的）的类型。\n\n```csharp\nusing System;\n\npublic class Type1 {}\npublic class Type2 : Type1 {}\npublic class Type3 : Type2 {}\n\npublic class Program\n{\n    public static Type3 MyMethod(Type1 t)\n    {\n        return t as Type3 ?? new Type3();\n    }\n\n    static void Main() \n    {\n        Func<Type2, Type2> f1 = MyMethod;\n\n        // Covariant return type and contravariant parameter type.\n        Func<Type3, Type1> f2 = f1;\n        Type1 t1 = f2(new Type3());\n    }\n}\n```\n### 具有协变类型参数的泛型接口\n<details>\n<summary>展开查看</summary>\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nclass Base\n{\n    public static void PrintBases(IEnumerable<Base> bases)\n    {\n        foreach(Base b in bases)\n        {\n            Console.WriteLine(b);\n        }\n    }\n}\n\nclass Derived : Base\n{\n    public static void Main()\n    {\n        List<Derived> dlist = new List<Derived>();\n\n        Derived.PrintBases(dlist);\n        IEnumerable<Base> bIEnum = dlist;\n    }\n}\n```\n</details>\n\n### 具有逆变泛型类型参数的泛型接口\n<details>\n<summary>展开查看</summary>\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nabstract class Shape\n{\n    public virtual double Area { get { return 0; }}\n}\n\nclass Circle : Shape\n{\n    private double r;\n    public Circle(double radius) { r = radius; }\n    public double Radius { get { return r; }}\n    public override double Area { get { return Math.PI * r * r; }}\n}\n\nclass ShapeAreaComparer : System.Collections.Generic.IComparer<Shape>\n{\n    int IComparer<Shape>.Compare(Shape a, Shape b) \n    { \n        if (a == null) return b == null ? 0 : -1;\n        return b == null ? 1 : a.Area.CompareTo(b.Area);\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        // You can pass ShapeAreaComparer, which implements IComparer<Shape>,\n        // even though the constructor for SortedSet<Circle> expects \n        // IComparer<Circle>, because type parameter T of IComparer<T> is\n        // contravariant.\n        SortedSet<Circle> circlesByArea = \n            new SortedSet<Circle>(new ShapeAreaComparer()) \n                { new Circle(7.2), new Circle(100), null, new Circle(.01) };\n\n        foreach (Circle c in circlesByArea)\n        {\n            Console.WriteLine(c == null ? \"null\" : \"Circle with area \" + c.Area);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nnull\nCircle with area 0.000314159265358979\nCircle with area 162.860163162095\nCircle with area 31415.9265358979\n */\n```\n</details>\n\n### 定义 Variant 泛型接口和委托\n>协变类型参数用 out 关键字,逆变类型参数用 in 关键字\n\n","slug":"csharpgrammar-6","published":1,"updated":"2022-08-17T06:55:45.678Z","_id":"ck6z2nlfk0000rwrigsomgcna","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#4.0语法（发布于2010，.NET Framework 4）</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-4-0语法\"><a href=\"#C-4-0语法\" class=\"headerlink\" title=\"C#4.0语法\"></a><span style=\"color:#0366d6;\">C#4.0语法</span></h1><h2 id=\"动态绑定\"><a href=\"#动态绑定\" class=\"headerlink\" title=\"动态绑定\"></a><span style=\"color:#0366d6;\">动态绑定</span></h2><blockquote>\n<p>dynamic 类型表示变量的使用和对其成员的引用绕过编译时类型检查。 改为在运行时解析这些操作</p>\n</blockquote>\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DynamicExamples</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            ExampleClass ec = <span class=\"keyword\">new</span> ExampleClass();</span><br><span class=\"line\">            Console.WriteLine(ec.exampleMethod(<span class=\"number\">10</span>));</span><br><span class=\"line\">            Console.WriteLine(ec.exampleMethod(<span class=\"string\">\"value\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// The following line causes a compiler error because exampleMethod</span></span><br><span class=\"line\">            <span class=\"comment\">// takes only one argument.</span></span><br><span class=\"line\">            <span class=\"comment\">//Console.WriteLine(ec.exampleMethod(10, 4));</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">dynamic</span> dynamic_ec = <span class=\"keyword\">new</span> ExampleClass();</span><br><span class=\"line\">            Console.WriteLine(dynamic_ec.exampleMethod(<span class=\"number\">10</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Because dynamic_ec is dynamic, the following call to exampleMethod</span></span><br><span class=\"line\">            <span class=\"comment\">// with two arguments does not produce an error at compile time.</span></span><br><span class=\"line\">            <span class=\"comment\">// However, it does cause a run-time error. </span></span><br><span class=\"line\">            <span class=\"comment\">//Console.WriteLine(dynamic_ec.exampleMethod(10, 4));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">ExampleClass</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">dynamic</span> field;</span><br><span class=\"line\">        <span class=\"keyword\">dynamic</span> prop &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">dynamic</span> <span class=\"title\">exampleMethod</span>(<span class=\"params\"><span class=\"keyword\">dynamic</span> d</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">dynamic</span> local = <span class=\"string\">\"Local variable\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> two = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d <span class=\"keyword\">is</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> local;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> two;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"命名实参和可选实参\"><a href=\"#命名实参和可选实参\" class=\"headerlink\" title=\"命名实参和可选实参\"></a><span style=\"color:#0366d6;\">命名实参和可选实参</span></h2><blockquote>\n<p>参数的默认值必须由以下几种表达式中的一种来赋予：<br>1.常量，例如文本字符串或数字。<br>2.new ValType() 形式的表达式，其中 ValType 是值类型。 请注意，这会调用该值类型的隐式无参数构造函数，该函数不是类型的实际成员。<br>3.default(ValType) 形式的表达式，其中 ValType 是值类型。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ExampleMethod</span>(<span class=\"params\"><span class=\"keyword\">int</span> required, <span class=\"keyword\">int</span> optionalInt = <span class=\"keyword\">default</span>(<span class=\"keyword\">int</span></span>),</span></span><br><span class=\"line\"><span class=\"function\">                             <span class=\"keyword\">string</span> description</span> = <span class=\"string\">\"Optional Description\"</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">\"&#123;0&#125;: &#123;1&#125; + &#123;2&#125; = &#123;3&#125;\"</span>, description, required, </span><br><span class=\"line\">                        optionalInt, required + optionalInt);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>前两个方法调用使用位置自变量。 第一个方法同时省略了两个可选自变量，而第二个省略了最后一个自变量。 第三个方法调用向必需的参数提供位置自变量，但使用命名的自变量向 description 参数提供值，同时省略 optionalInt 自变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> opt = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">    opt.ExampleMethod(<span class=\"number\">10</span>);</span><br><span class=\"line\">    opt.ExampleMethod(<span class=\"number\">10</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    opt.ExampleMethod(<span class=\"number\">12</span>, description: <span class=\"string\">\"Addition with zero:\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型中的协变和逆变\"><a href=\"#泛型中的协变和逆变\" class=\"headerlink\" title=\"泛型中的协变和逆变\"></a><span style=\"color:#0366d6;\">泛型中的协变和逆变</span></h2><blockquote>\n<p>协变和逆变都是术语，前者指能够使用比原始指定的派生类型的派生程度更大（更具体的）的类型，后者指能够使用比原始指定的派生类型的派生程度更小（不太具体的）的类型。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Type1</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Type2</span> : <span class=\"title\">Type1</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Type3</span> : <span class=\"title\">Type2</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Type3 <span class=\"title\">MyMethod</span>(<span class=\"params\">Type1 t</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t <span class=\"keyword\">as</span> Type3 ?? <span class=\"keyword\">new</span> Type3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Func&lt;Type2, Type2&gt; f1 = MyMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Covariant return type and contravariant parameter type.</span></span><br><span class=\"line\">        Func&lt;Type3, Type1&gt; f2 = f1;</span><br><span class=\"line\">        Type1 t1 = f2(<span class=\"keyword\">new</span> Type3());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具有协变类型参数的泛型接口\"><a href=\"#具有协变类型参数的泛型接口\" class=\"headerlink\" title=\"具有协变类型参数的泛型接口\"></a>具有协变类型参数的泛型接口</h3><details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintBases</span>(<span class=\"params\">IEnumerable&lt;Base&gt; bases</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(Base b <span class=\"keyword\">in</span> bases)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> : <span class=\"title\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        List&lt;Derived&gt; dlist = <span class=\"keyword\">new</span> List&lt;Derived&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        Derived.PrintBases(dlist);</span><br><span class=\"line\">        IEnumerable&lt;Base&gt; bIEnum = dlist;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"具有逆变泛型类型参数的泛型接口\"><a href=\"#具有逆变泛型类型参数的泛型接口\" class=\"headerlink\" title=\"具有逆变泛型类型参数的泛型接口\"></a>具有逆变泛型类型参数的泛型接口</h3><details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">double</span> Area &#123; <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> : <span class=\"title\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> r;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span>(<span class=\"params\"><span class=\"keyword\">double</span> radius</span>)</span> &#123; r = radius; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Radius &#123; <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> r; &#125;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> Area &#123; <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> Math.PI * r * r; &#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ShapeAreaComparer : System.Collections.Generic.IComparer&lt;Shape&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> IComparer&lt;Shape&gt;.Compare(Shape a, Shape b) </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> b == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b == <span class=\"literal\">null</span> ? <span class=\"number\">1</span> : a.Area.CompareTo(b.Area);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// You can pass ShapeAreaComparer, which implements IComparer&lt;Shape&gt;,</span></span><br><span class=\"line\">        <span class=\"comment\">// even though the constructor for SortedSet&lt;Circle&gt; expects </span></span><br><span class=\"line\">        <span class=\"comment\">// IComparer&lt;Circle&gt;, because type parameter T of IComparer&lt;T&gt; is</span></span><br><span class=\"line\">        <span class=\"comment\">// contravariant.</span></span><br><span class=\"line\">        SortedSet&lt;Circle&gt; circlesByArea = </span><br><span class=\"line\">            <span class=\"keyword\">new</span> SortedSet&lt;Circle&gt;(<span class=\"keyword\">new</span> ShapeAreaComparer()) </span><br><span class=\"line\">                &#123; <span class=\"keyword\">new</span> Circle(<span class=\"number\">7.2</span>), <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>), <span class=\"literal\">null</span>, <span class=\"keyword\">new</span> Circle(<span class=\"number\">.01</span>) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Circle c <span class=\"keyword\">in</span> circlesByArea)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(c == <span class=\"literal\">null</span> ? <span class=\"string\">\"null\"</span> : <span class=\"string\">\"Circle with area \"</span> + c.Area);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This code example produces the following output:</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">null</span></span><br><span class=\"line\"><span class=\"comment\">Circle with area 0.000314159265358979</span></span><br><span class=\"line\"><span class=\"comment\">Circle with area 162.860163162095</span></span><br><span class=\"line\"><span class=\"comment\">Circle with area 31415.9265358979</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"定义-Variant-泛型接口和委托\"><a href=\"#定义-Variant-泛型接口和委托\" class=\"headerlink\" title=\"定义 Variant 泛型接口和委托\"></a>定义 Variant 泛型接口和委托</h3><blockquote>\n<p>协变类型参数用 out 关键字,逆变类型参数用 in 关键字</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>C#4.0语法（发布于2010，.NET Framework 4）</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-4-0语法\"><a href=\"#C-4-0语法\" class=\"headerlink\" title=\"C#4.0语法\"></a><span style=\"color:#0366d6;\">C#4.0语法</span></h1><h2 id=\"动态绑定\"><a href=\"#动态绑定\" class=\"headerlink\" title=\"动态绑定\"></a><span style=\"color:#0366d6;\">动态绑定</span></h2><blockquote>\n<p>dynamic 类型表示变量的使用和对其成员的引用绕过编译时类型检查。 改为在运行时解析这些操作</p>\n</blockquote>\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">DynamicExamples</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            ExampleClass ec = <span class=\"keyword\">new</span> ExampleClass();</span><br><span class=\"line\">            Console.WriteLine(ec.exampleMethod(<span class=\"number\">10</span>));</span><br><span class=\"line\">            Console.WriteLine(ec.exampleMethod(<span class=\"string\">\"value\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// The following line causes a compiler error because exampleMethod</span></span><br><span class=\"line\">            <span class=\"comment\">// takes only one argument.</span></span><br><span class=\"line\">            <span class=\"comment\">//Console.WriteLine(ec.exampleMethod(10, 4));</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">dynamic</span> dynamic_ec = <span class=\"keyword\">new</span> ExampleClass();</span><br><span class=\"line\">            Console.WriteLine(dynamic_ec.exampleMethod(<span class=\"number\">10</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Because dynamic_ec is dynamic, the following call to exampleMethod</span></span><br><span class=\"line\">            <span class=\"comment\">// with two arguments does not produce an error at compile time.</span></span><br><span class=\"line\">            <span class=\"comment\">// However, it does cause a run-time error. </span></span><br><span class=\"line\">            <span class=\"comment\">//Console.WriteLine(dynamic_ec.exampleMethod(10, 4));</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title\">ExampleClass</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">dynamic</span> field;</span><br><span class=\"line\">        <span class=\"keyword\">dynamic</span> prop &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">dynamic</span> <span class=\"title\">exampleMethod</span>(<span class=\"params\"><span class=\"keyword\">dynamic</span> d</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">dynamic</span> local = <span class=\"string\">\"Local variable\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> two = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d <span class=\"keyword\">is</span> <span class=\"keyword\">int</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> local;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> two;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"命名实参和可选实参\"><a href=\"#命名实参和可选实参\" class=\"headerlink\" title=\"命名实参和可选实参\"></a><span style=\"color:#0366d6;\">命名实参和可选实参</span></h2><blockquote>\n<p>参数的默认值必须由以下几种表达式中的一种来赋予：<br>1.常量，例如文本字符串或数字。<br>2.new ValType() 形式的表达式，其中 ValType 是值类型。 请注意，这会调用该值类型的隐式无参数构造函数，该函数不是类型的实际成员。<br>3.default(ValType) 形式的表达式，其中 ValType 是值类型。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ExampleMethod</span>(<span class=\"params\"><span class=\"keyword\">int</span> required, <span class=\"keyword\">int</span> optionalInt = <span class=\"keyword\">default</span>(<span class=\"keyword\">int</span></span>),</span></span><br><span class=\"line\"><span class=\"function\">                             <span class=\"keyword\">string</span> description</span> = <span class=\"string\">\"Optional Description\"</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">\"&#123;0&#125;: &#123;1&#125; + &#123;2&#125; = &#123;3&#125;\"</span>, description, required, </span><br><span class=\"line\">                        optionalInt, required + optionalInt);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>前两个方法调用使用位置自变量。 第一个方法同时省略了两个可选自变量，而第二个省略了最后一个自变量。 第三个方法调用向必需的参数提供位置自变量，但使用命名的自变量向 description 参数提供值，同时省略 optionalInt 自变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> opt = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">    opt.ExampleMethod(<span class=\"number\">10</span>);</span><br><span class=\"line\">    opt.ExampleMethod(<span class=\"number\">10</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    opt.ExampleMethod(<span class=\"number\">12</span>, description: <span class=\"string\">\"Addition with zero:\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型中的协变和逆变\"><a href=\"#泛型中的协变和逆变\" class=\"headerlink\" title=\"泛型中的协变和逆变\"></a><span style=\"color:#0366d6;\">泛型中的协变和逆变</span></h2><blockquote>\n<p>协变和逆变都是术语，前者指能够使用比原始指定的派生类型的派生程度更大（更具体的）的类型，后者指能够使用比原始指定的派生类型的派生程度更小（不太具体的）的类型。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Type1</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Type2</span> : <span class=\"title\">Type1</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Type3</span> : <span class=\"title\">Type2</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Type3 <span class=\"title\">MyMethod</span>(<span class=\"params\">Type1 t</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t <span class=\"keyword\">as</span> Type3 ?? <span class=\"keyword\">new</span> Type3();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Func&lt;Type2, Type2&gt; f1 = MyMethod;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Covariant return type and contravariant parameter type.</span></span><br><span class=\"line\">        Func&lt;Type3, Type1&gt; f2 = f1;</span><br><span class=\"line\">        Type1 t1 = f2(<span class=\"keyword\">new</span> Type3());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"具有协变类型参数的泛型接口\"><a href=\"#具有协变类型参数的泛型接口\" class=\"headerlink\" title=\"具有协变类型参数的泛型接口\"></a>具有协变类型参数的泛型接口</h3><details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PrintBases</span>(<span class=\"params\">IEnumerable&lt;Base&gt; bases</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span>(Base b <span class=\"keyword\">in</span> bases)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Derived</span> : <span class=\"title\">Base</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        List&lt;Derived&gt; dlist = <span class=\"keyword\">new</span> List&lt;Derived&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        Derived.PrintBases(dlist);</span><br><span class=\"line\">        IEnumerable&lt;Base&gt; bIEnum = dlist;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"具有逆变泛型类型参数的泛型接口\"><a href=\"#具有逆变泛型类型参数的泛型接口\" class=\"headerlink\" title=\"具有逆变泛型类型参数的泛型接口\"></a>具有逆变泛型类型参数的泛型接口</h3><details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">double</span> Area &#123; <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span> : <span class=\"title\">Shape</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> r;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Circle</span>(<span class=\"params\"><span class=\"keyword\">double</span> radius</span>)</span> &#123; r = radius; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Radius &#123; <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> r; &#125;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> Area &#123; <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> Math.PI * r * r; &#125;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ShapeAreaComparer : System.Collections.Generic.IComparer&lt;Shape&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> IComparer&lt;Shape&gt;.Compare(Shape a, Shape b) </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> b == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b == <span class=\"literal\">null</span> ? <span class=\"number\">1</span> : a.Area.CompareTo(b.Area);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// You can pass ShapeAreaComparer, which implements IComparer&lt;Shape&gt;,</span></span><br><span class=\"line\">        <span class=\"comment\">// even though the constructor for SortedSet&lt;Circle&gt; expects </span></span><br><span class=\"line\">        <span class=\"comment\">// IComparer&lt;Circle&gt;, because type parameter T of IComparer&lt;T&gt; is</span></span><br><span class=\"line\">        <span class=\"comment\">// contravariant.</span></span><br><span class=\"line\">        SortedSet&lt;Circle&gt; circlesByArea = </span><br><span class=\"line\">            <span class=\"keyword\">new</span> SortedSet&lt;Circle&gt;(<span class=\"keyword\">new</span> ShapeAreaComparer()) </span><br><span class=\"line\">                &#123; <span class=\"keyword\">new</span> Circle(<span class=\"number\">7.2</span>), <span class=\"keyword\">new</span> Circle(<span class=\"number\">100</span>), <span class=\"literal\">null</span>, <span class=\"keyword\">new</span> Circle(<span class=\"number\">.01</span>) &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Circle c <span class=\"keyword\">in</span> circlesByArea)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(c == <span class=\"literal\">null</span> ? <span class=\"string\">\"null\"</span> : <span class=\"string\">\"Circle with area \"</span> + c.Area);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This code example produces the following output:</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">null</span></span><br><span class=\"line\"><span class=\"comment\">Circle with area 0.000314159265358979</span></span><br><span class=\"line\"><span class=\"comment\">Circle with area 162.860163162095</span></span><br><span class=\"line\"><span class=\"comment\">Circle with area 31415.9265358979</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"定义-Variant-泛型接口和委托\"><a href=\"#定义-Variant-泛型接口和委托\" class=\"headerlink\" title=\"定义 Variant 泛型接口和委托\"></a>定义 Variant 泛型接口和委托</h3><blockquote>\n<p>协变类型参数用 out 关键字,逆变类型参数用 in 关键字</p>\n</blockquote>"},{"title":"C#3.0语法","date":"2020-02-23T16:00:00.000Z","_content":"C#3.0语法（发布于2007年下半年，.NET Framework 3.5）\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#3.0语法</span>\n## <span style=\"color:#0366d6;\">推断类型</span>\n```csharp\nvar i = 10; // Implicitly typed.\nint i = 10; // Explicitly typed.\n```\n## <span style=\"color:#0366d6;\">匿名类型</span>\n>匿名类型提供了一种方便的方法，可用来将一组只读属性封装到单个对象中，而无需首先显式定义一个类型。 类型名由编译器生成，并且不能在源代码级使用。 每个属性的类型由编译器推断\n```csharp\nvar v = new { Amount = 108, Message = \"Hello\" };  \n  \n// Rest the mouse pointer over v.Amount and v.Message in the following  \n// statement to verify that their inferred types are int and string.  \nConsole.WriteLine(v.Amount + v.Message);\n```\n>匿名类型通常用在查询表达式的 select 子句中，以便返回源序列中每个对象的属性子集\n```csharp\nvar productQuery = \n    from prod in products\n    select new { prod.Color, prod.Price };\n\nforeach (var v in productQuery)\n{\n    Console.WriteLine(\"Color={0}, Price={1}\", v.Color, v.Price);\n}\n```\n## <span style=\"color:#0366d6;\">扩展方法</span>\n>扩展方法被定义为静态方法，但它们是通过实例方法语法进行调用的。 它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。 仅当你使用 using 指令将命名空间显式导入到源代码中之后，扩展方法才位于范围中。\n```csharp\nnamespace ExtensionMethods\n{\n    public static class MyExtensions\n    {\n        public static int WordCount(this String str)\n        {\n            return str.Split(new char[] { ' ', '.', '?' }, \n                             StringSplitOptions.RemoveEmptyEntries).Length;\n        }\n    }   \n}\n```\n\n```csharp\nusing ExtensionMethods; \nstring s = \"Hello Extension Methods\";  \nint i = s.WordCount();\n```\n## <span style=\"color:#0366d6;\">分部方法</span>\n>分部方法在分部类型的一部分中定义了签名，并在该类型的另一部分中定义了实现。 通过分部方法，类设计器可提供与事件处理程序类似的方法挂钩，以便开发者决定是否实现。\n1.分部类型各部分中的签名必须匹配。\n2.方法必须返回 void。\n3.不允许使用访问修饰符。 分部方法是隐式专用的。\n\n```csharp\nnamespace PM\n{\n    partial class A\n    {\n        partial void OnSomethingHappened(string s);\n    }\n\n    // This part can be in a separate file.\n    partial class A\n    {\n        // Comment out this method and the program\n        // will still compile.\n        partial void OnSomethingHappened(String s)\n        {\n            Console.WriteLine(\"Something happened: {0}\", s);\n        }\n    }\n}\n```\n## <span style=\"color:#0366d6;\">自动实现的属性</span>\n>C# 3.0 及更高版本，当属性访问器中不需要任何其他逻辑时，自动实现的属性会使属性声明更加简洁\n```csharp\n// This class is mutable. Its data can be modified from\n// outside the class.\nclass Customer\n{\n    // Auto-implemented properties for trivial get and set\n    public double TotalPurchases { get; set; }\n    public string Name { get; set; }\n    public int CustomerID { get; set; }\n\n    // Constructor\n    public Customer(double purchases, string name, int ID)\n    {\n        TotalPurchases = purchases;\n        Name = name;\n        CustomerID = ID;\n    }\n\n    // Methods\n    public string GetContactInfo() { return \"ContactInfo\"; }\n    public string GetTransactionHistory() { return \"History\"; }\n\n    // .. Additional methods, events, etc.\n}\n```\n## <span style=\"color:#0366d6;\">对象和集合初始值设定</span>\n### 对象初始值设定\n```csharp\npublic class Cat\n{\n    // Auto-implemented properties.\n    public int Age { get; set; }\n    public string Name { get; set; }\n\n    public Cat()\n    {\n    }\n\n    public Cat(string name)\n    {\n        this.Name = name;\n    }\n}\n```\n```csharp\nCat cat = new Cat { Age = 10, Name = \"Fluffy\" };\nCat sameCat = new Cat(\"Fluffy\"){ Age = 10 };\n```\n### 匿名类型的对象初始值\n```csharp\nvar pet = new { Age = 10, Name = \"Fluffy\" }; \n```\n### 集合初始值\n```csharp\nList<Cat> cats = new List<Cat>\n{\n    new Cat{ Name = \"Sylvester\", Age=8 },\n    new Cat{ Name = \"Whiskers\", Age=2 },\n    new Cat{ Name = \"Sasha\", Age=14 }\n};\n```\n## <span style=\"color:#0366d6;\">Lambda 表达式</span>\n>表达式 lambda，表达式为其主体\n```csharp\n(input-parameters) => expression\n```\n>语句 lambda，语句块作为其主体\n\n```csharp\n(input-parameters) => { <sequence-of-statements> }\n```\n### 含标准查询运算符的 lambda\n>有 2 个参数且不返回值的 Lambda 表达式可转换为 Action<T1,T2> 委托。有 1 个参数且返回值的 Lambda 表达式可转换为 Func<T,TResult> 委托\n### Lambda 表达式中的类型推理\n>编写 lambda 时，通常不必为输入参数指定类型，因为编译器可以根据 lambda 主体、参数类型以及 C# 语言规范中描述的其他因素来推断类型。 对于大多数标准查询运算符，第一个输入是源序列中的元素类型。\n\n>如果要查询 IEnumerable<Customer>，则输入变量将被推断为 Customer 对象，这意味着你可以访问其方法和属性\n```csharp\ncustomers.Where(c => c.City == \"London\");\n```\n>1.Lambda 包含的参数数量必须与委托类型包含的参数数量相同。\n 2.Lambda 中的每个输入参数必须都能够隐式转换为其对应的委托参数。\n 3.Lambda 的返回值（如果有）必须能够隐式转换为委托的返回类型。\n ## <span style=\"color:#0366d6;\">LINQ</span>\n >下面代码展示的是linq的查询语句和扩展方法\n\n <details>\n <summary>展开查看</summary>\n\n```csharp\nclass QueryVMethodSyntax\n{\n    static void Main()\n    {\n        int[] numbers = { 5, 10, 8, 3, 6, 12};\n\n        //Query syntax:\n        IEnumerable<int> numQuery1 = \n            from num in numbers\n            where num % 2 == 0\n            orderby num\n            select num;\n\n        //Method syntax:\n        IEnumerable<int> numQuery2 = numbers.Where(num => num % 2 == 0).OrderBy(n => n);\n\n        foreach (int i in numQuery1)\n        {\n            Console.Write(i + \" \");\n        }\n        Console.WriteLine(System.Environment.NewLine);\n        foreach (int i in numQuery2)\n        {\n            Console.Write(i + \" \");\n        }\n        \n        // Keep the console open in debug mode.\n        Console.WriteLine(System.Environment.NewLine);\n        Console.WriteLine(\"Press any key to exit\");\n        Console.ReadKey();\n    }\n}\n/*\n    Output:\n    6 8 10 12\n    6 8 10 12\n */\n ```\n</details>\n\n## <span style=\"color:#0366d6;\">表达式树</span>\n>todo\n ","source":"_posts/csharpgrammar-5.md","raw":"---\ntitle: C#3.0语法\ndate: 2020-02-24\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#3.0语法（发布于2007年下半年，.NET Framework 3.5）\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#3.0语法</span>\n## <span style=\"color:#0366d6;\">推断类型</span>\n```csharp\nvar i = 10; // Implicitly typed.\nint i = 10; // Explicitly typed.\n```\n## <span style=\"color:#0366d6;\">匿名类型</span>\n>匿名类型提供了一种方便的方法，可用来将一组只读属性封装到单个对象中，而无需首先显式定义一个类型。 类型名由编译器生成，并且不能在源代码级使用。 每个属性的类型由编译器推断\n```csharp\nvar v = new { Amount = 108, Message = \"Hello\" };  \n  \n// Rest the mouse pointer over v.Amount and v.Message in the following  \n// statement to verify that their inferred types are int and string.  \nConsole.WriteLine(v.Amount + v.Message);\n```\n>匿名类型通常用在查询表达式的 select 子句中，以便返回源序列中每个对象的属性子集\n```csharp\nvar productQuery = \n    from prod in products\n    select new { prod.Color, prod.Price };\n\nforeach (var v in productQuery)\n{\n    Console.WriteLine(\"Color={0}, Price={1}\", v.Color, v.Price);\n}\n```\n## <span style=\"color:#0366d6;\">扩展方法</span>\n>扩展方法被定义为静态方法，但它们是通过实例方法语法进行调用的。 它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。 仅当你使用 using 指令将命名空间显式导入到源代码中之后，扩展方法才位于范围中。\n```csharp\nnamespace ExtensionMethods\n{\n    public static class MyExtensions\n    {\n        public static int WordCount(this String str)\n        {\n            return str.Split(new char[] { ' ', '.', '?' }, \n                             StringSplitOptions.RemoveEmptyEntries).Length;\n        }\n    }   \n}\n```\n\n```csharp\nusing ExtensionMethods; \nstring s = \"Hello Extension Methods\";  \nint i = s.WordCount();\n```\n## <span style=\"color:#0366d6;\">分部方法</span>\n>分部方法在分部类型的一部分中定义了签名，并在该类型的另一部分中定义了实现。 通过分部方法，类设计器可提供与事件处理程序类似的方法挂钩，以便开发者决定是否实现。\n1.分部类型各部分中的签名必须匹配。\n2.方法必须返回 void。\n3.不允许使用访问修饰符。 分部方法是隐式专用的。\n\n```csharp\nnamespace PM\n{\n    partial class A\n    {\n        partial void OnSomethingHappened(string s);\n    }\n\n    // This part can be in a separate file.\n    partial class A\n    {\n        // Comment out this method and the program\n        // will still compile.\n        partial void OnSomethingHappened(String s)\n        {\n            Console.WriteLine(\"Something happened: {0}\", s);\n        }\n    }\n}\n```\n## <span style=\"color:#0366d6;\">自动实现的属性</span>\n>C# 3.0 及更高版本，当属性访问器中不需要任何其他逻辑时，自动实现的属性会使属性声明更加简洁\n```csharp\n// This class is mutable. Its data can be modified from\n// outside the class.\nclass Customer\n{\n    // Auto-implemented properties for trivial get and set\n    public double TotalPurchases { get; set; }\n    public string Name { get; set; }\n    public int CustomerID { get; set; }\n\n    // Constructor\n    public Customer(double purchases, string name, int ID)\n    {\n        TotalPurchases = purchases;\n        Name = name;\n        CustomerID = ID;\n    }\n\n    // Methods\n    public string GetContactInfo() { return \"ContactInfo\"; }\n    public string GetTransactionHistory() { return \"History\"; }\n\n    // .. Additional methods, events, etc.\n}\n```\n## <span style=\"color:#0366d6;\">对象和集合初始值设定</span>\n### 对象初始值设定\n```csharp\npublic class Cat\n{\n    // Auto-implemented properties.\n    public int Age { get; set; }\n    public string Name { get; set; }\n\n    public Cat()\n    {\n    }\n\n    public Cat(string name)\n    {\n        this.Name = name;\n    }\n}\n```\n```csharp\nCat cat = new Cat { Age = 10, Name = \"Fluffy\" };\nCat sameCat = new Cat(\"Fluffy\"){ Age = 10 };\n```\n### 匿名类型的对象初始值\n```csharp\nvar pet = new { Age = 10, Name = \"Fluffy\" }; \n```\n### 集合初始值\n```csharp\nList<Cat> cats = new List<Cat>\n{\n    new Cat{ Name = \"Sylvester\", Age=8 },\n    new Cat{ Name = \"Whiskers\", Age=2 },\n    new Cat{ Name = \"Sasha\", Age=14 }\n};\n```\n## <span style=\"color:#0366d6;\">Lambda 表达式</span>\n>表达式 lambda，表达式为其主体\n```csharp\n(input-parameters) => expression\n```\n>语句 lambda，语句块作为其主体\n\n```csharp\n(input-parameters) => { <sequence-of-statements> }\n```\n### 含标准查询运算符的 lambda\n>有 2 个参数且不返回值的 Lambda 表达式可转换为 Action<T1,T2> 委托。有 1 个参数且返回值的 Lambda 表达式可转换为 Func<T,TResult> 委托\n### Lambda 表达式中的类型推理\n>编写 lambda 时，通常不必为输入参数指定类型，因为编译器可以根据 lambda 主体、参数类型以及 C# 语言规范中描述的其他因素来推断类型。 对于大多数标准查询运算符，第一个输入是源序列中的元素类型。\n\n>如果要查询 IEnumerable<Customer>，则输入变量将被推断为 Customer 对象，这意味着你可以访问其方法和属性\n```csharp\ncustomers.Where(c => c.City == \"London\");\n```\n>1.Lambda 包含的参数数量必须与委托类型包含的参数数量相同。\n 2.Lambda 中的每个输入参数必须都能够隐式转换为其对应的委托参数。\n 3.Lambda 的返回值（如果有）必须能够隐式转换为委托的返回类型。\n ## <span style=\"color:#0366d6;\">LINQ</span>\n >下面代码展示的是linq的查询语句和扩展方法\n\n <details>\n <summary>展开查看</summary>\n\n```csharp\nclass QueryVMethodSyntax\n{\n    static void Main()\n    {\n        int[] numbers = { 5, 10, 8, 3, 6, 12};\n\n        //Query syntax:\n        IEnumerable<int> numQuery1 = \n            from num in numbers\n            where num % 2 == 0\n            orderby num\n            select num;\n\n        //Method syntax:\n        IEnumerable<int> numQuery2 = numbers.Where(num => num % 2 == 0).OrderBy(n => n);\n\n        foreach (int i in numQuery1)\n        {\n            Console.Write(i + \" \");\n        }\n        Console.WriteLine(System.Environment.NewLine);\n        foreach (int i in numQuery2)\n        {\n            Console.Write(i + \" \");\n        }\n        \n        // Keep the console open in debug mode.\n        Console.WriteLine(System.Environment.NewLine);\n        Console.WriteLine(\"Press any key to exit\");\n        Console.ReadKey();\n    }\n}\n/*\n    Output:\n    6 8 10 12\n    6 8 10 12\n */\n ```\n</details>\n\n## <span style=\"color:#0366d6;\">表达式树</span>\n>todo\n ","slug":"csharpgrammar-5","published":1,"updated":"2022-08-17T06:55:45.678Z","_id":"ck6z2nlft0001rwriapbv1x3h","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#3.0语法（发布于2007年下半年，.NET Framework 3.5）</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-3-0语法\"><a href=\"#C-3-0语法\" class=\"headerlink\" title=\"C#3.0语法\"></a><span style=\"color:#0366d6;\">C#3.0语法</span></h1><h2 id=\"推断类型\"><a href=\"#推断类型\" class=\"headerlink\" title=\"推断类型\"></a><span style=\"color:#0366d6;\">推断类型</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">10</span>; <span class=\"comment\">// Implicitly typed.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">10</span>; <span class=\"comment\">// Explicitly typed.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名类型\"><a href=\"#匿名类型\" class=\"headerlink\" title=\"匿名类型\"></a><span style=\"color:#0366d6;\">匿名类型</span></h2><blockquote>\n<p>匿名类型提供了一种方便的方法，可用来将一组只读属性封装到单个对象中，而无需首先显式定义一个类型。 类型名由编译器生成，并且不能在源代码级使用。 每个属性的类型由编译器推断</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> &#123; Amount = <span class=\"number\">108</span>, Message = <span class=\"string\">\"Hello\"</span> &#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// Rest the mouse pointer over v.Amount and v.Message in the following  </span></span><br><span class=\"line\"><span class=\"comment\">// statement to verify that their inferred types are int and string.  </span></span><br><span class=\"line\">Console.WriteLine(v.Amount + v.Message);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>匿名类型通常用在查询表达式的 select 子句中，以便返回源序列中每个对象的属性子集</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> productQuery = </span><br><span class=\"line\">    <span class=\"keyword\">from</span> prod <span class=\"keyword\">in</span> products</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">new</span> &#123; prod.Color, prod.Price &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> v <span class=\"keyword\">in</span> productQuery)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Color=&#123;0&#125;, Price=&#123;1&#125;\"</span>, v.Color, v.Price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展方法\"><a href=\"#扩展方法\" class=\"headerlink\" title=\"扩展方法\"></a><span style=\"color:#0366d6;\">扩展方法</span></h2><blockquote>\n<p>扩展方法被定义为静态方法，但它们是通过实例方法语法进行调用的。 它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。 仅当你使用 using 指令将命名空间显式导入到源代码中之后，扩展方法才位于范围中。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ExtensionMethods</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MyExtensions</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">WordCount</span>(<span class=\"params\"><span class=\"keyword\">this</span> String str</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str.Split(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'?'</span> &#125;, </span><br><span class=\"line\">                             StringSplitOptions.RemoveEmptyEntries).Length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> ExtensionMethods; </span><br><span class=\"line\"><span class=\"keyword\">string</span> s = <span class=\"string\">\"Hello Extension Methods\"</span>;  </span><br><span class=\"line\"><span class=\"keyword\">int</span> i = s.WordCount();</span><br></pre></td></tr></table></figure>\n<h2 id=\"分部方法\"><a href=\"#分部方法\" class=\"headerlink\" title=\"分部方法\"></a><span style=\"color:#0366d6;\">分部方法</span></h2><blockquote>\n<p>分部方法在分部类型的一部分中定义了签名，并在该类型的另一部分中定义了实现。 通过分部方法，类设计器可提供与事件处理程序类似的方法挂钩，以便开发者决定是否实现。<br>1.分部类型各部分中的签名必须匹配。<br>2.方法必须返回 void。<br>3.不允许使用访问修饰符。 分部方法是隐式专用的。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PM</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">A</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">OnSomethingHappened</span>(<span class=\"params\"><span class=\"keyword\">string</span> s</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This part can be in a separate file.</span></span><br><span class=\"line\">    <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">A</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Comment out this method and the program</span></span><br><span class=\"line\">        <span class=\"comment\">// will still compile.</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">OnSomethingHappened</span>(<span class=\"params\">String s</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Something happened: &#123;0&#125;\"</span>, s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动实现的属性\"><a href=\"#自动实现的属性\" class=\"headerlink\" title=\"自动实现的属性\"></a><span style=\"color:#0366d6;\">自动实现的属性</span></h2><blockquote>\n<p>C# 3.0 及更高版本，当属性访问器中不需要任何其他逻辑时，自动实现的属性会使属性声明更加简洁</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This class is mutable. Its data can be modified from</span></span><br><span class=\"line\"><span class=\"comment\">// outside the class.</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Auto-implemented properties for trivial get and set</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> TotalPurchases &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CustomerID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Constructor</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Customer</span>(<span class=\"params\"><span class=\"keyword\">double</span> purchases, <span class=\"keyword\">string</span> name, <span class=\"keyword\">int</span> ID</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        TotalPurchases = purchases;</span><br><span class=\"line\">        Name = name;</span><br><span class=\"line\">        CustomerID = ID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Methods</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetContactInfo</span>(<span class=\"params\"></span>)</span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">\"ContactInfo\"</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetTransactionHistory</span>(<span class=\"params\"></span>)</span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">\"History\"</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// .. Additional methods, events, etc.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象和集合初始值设定\"><a href=\"#对象和集合初始值设定\" class=\"headerlink\" title=\"对象和集合初始值设定\"></a><span style=\"color:#0366d6;\">对象和集合初始值设定</span></h2><h3 id=\"对象初始值设定\"><a href=\"#对象初始值设定\" class=\"headerlink\" title=\"对象初始值设定\"></a>对象初始值设定</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Auto-implemented properties.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Age &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat cat = <span class=\"keyword\">new</span> Cat &#123; Age = <span class=\"number\">10</span>, Name = <span class=\"string\">\"Fluffy\"</span> &#125;;</span><br><span class=\"line\">Cat sameCat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">\"Fluffy\"</span>)&#123; Age = <span class=\"number\">10</span> &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名类型的对象初始值\"><a href=\"#匿名类型的对象初始值\" class=\"headerlink\" title=\"匿名类型的对象初始值\"></a>匿名类型的对象初始值</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pet = <span class=\"keyword\">new</span> &#123; Age = <span class=\"number\">10</span>, Name = <span class=\"string\">\"Fluffy\"</span> &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"集合初始值\"><a href=\"#集合初始值\" class=\"headerlink\" title=\"集合初始值\"></a>集合初始值</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Cat&gt; cats = <span class=\"keyword\">new</span> List&lt;Cat&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Cat&#123; Name = <span class=\"string\">\"Sylvester\"</span>, Age=<span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Cat&#123; Name = <span class=\"string\">\"Whiskers\"</span>, Age=<span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Cat&#123; Name = <span class=\"string\">\"Sasha\"</span>, Age=<span class=\"number\">14</span> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a><span style=\"color:#0366d6;\">Lambda 表达式</span></h2><blockquote>\n<p>表达式 lambda，表达式为其主体</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(input-parameters) =&gt; expression</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>语句 lambda，语句块作为其主体</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(input-parameters) =&gt; &#123; &lt;sequence-of-statements&gt; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"含标准查询运算符的-lambda\"><a href=\"#含标准查询运算符的-lambda\" class=\"headerlink\" title=\"含标准查询运算符的 lambda\"></a>含标准查询运算符的 lambda</h3><blockquote>\n<p>有 2 个参数且不返回值的 Lambda 表达式可转换为 Action&lt;T1,T2&gt; 委托。有 1 个参数且返回值的 Lambda 表达式可转换为 Func&lt;T,TResult&gt; 委托</p>\n</blockquote>\n<h3 id=\"Lambda-表达式中的类型推理\"><a href=\"#Lambda-表达式中的类型推理\" class=\"headerlink\" title=\"Lambda 表达式中的类型推理\"></a>Lambda 表达式中的类型推理</h3><blockquote>\n<p>编写 lambda 时，通常不必为输入参数指定类型，因为编译器可以根据 lambda 主体、参数类型以及 C# 语言规范中描述的其他因素来推断类型。 对于大多数标准查询运算符，第一个输入是源序列中的元素类型。</p>\n</blockquote>\n<blockquote>\n<p>如果要查询 IEnumerable<Customer>，则输入变量将被推断为 Customer 对象，这意味着你可以访问其方法和属性</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customers.Where(c =&gt; c.City == <span class=\"string\">\"London\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1.Lambda 包含的参数数量必须与委托类型包含的参数数量相同。<br> 2.Lambda 中的每个输入参数必须都能够隐式转换为其对应的委托参数。<br> 3.Lambda 的返回值（如果有）必须能够隐式转换为委托的返回类型。</p>\n</blockquote>\n<h2 id=\"LINQ\"><a href=\"#LINQ\" class=\"headerlink\" title=\"LINQ\"></a><span style=\"color:#0366d6;\">LINQ</span></h2><blockquote>\n<p>下面代码展示的是linq的查询语句和扩展方法</p>\n</blockquote>\n <details>\n <summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">QueryVMethodSyntax</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123; <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Query syntax:</span></span><br><span class=\"line\">        IEnumerable&lt;<span class=\"keyword\">int</span>&gt; numQuery1 = </span><br><span class=\"line\">            <span class=\"keyword\">from</span> num <span class=\"keyword\">in</span> numbers</span><br><span class=\"line\">            <span class=\"keyword\">where</span> num % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">orderby</span> num</span><br><span class=\"line\">            <span class=\"keyword\">select</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Method syntax:</span></span><br><span class=\"line\">        IEnumerable&lt;<span class=\"keyword\">int</span>&gt; numQuery2 = numbers.Where(num =&gt; num % <span class=\"number\">2</span> == <span class=\"number\">0</span>).OrderBy(n =&gt; n);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> numQuery1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.Write(i + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine(System.Environment.NewLine);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> numQuery2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.Write(i + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Keep the console open in debug mode.</span></span><br><span class=\"line\">        Console.WriteLine(System.Environment.NewLine);</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"Press any key to exit\"</span>);</span><br><span class=\"line\">        Console.ReadKey();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Output:</span></span><br><span class=\"line\"><span class=\"comment\">    6 8 10 12</span></span><br><span class=\"line\"><span class=\"comment\">    6 8 10 12</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"表达式树\"><a href=\"#表达式树\" class=\"headerlink\" title=\"表达式树\"></a><span style=\"color:#0366d6;\">表达式树</span></h2><blockquote>\n<p>todo</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>C#3.0语法（发布于2007年下半年，.NET Framework 3.5）</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-3-0语法\"><a href=\"#C-3-0语法\" class=\"headerlink\" title=\"C#3.0语法\"></a><span style=\"color:#0366d6;\">C#3.0语法</span></h1><h2 id=\"推断类型\"><a href=\"#推断类型\" class=\"headerlink\" title=\"推断类型\"></a><span style=\"color:#0366d6;\">推断类型</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">10</span>; <span class=\"comment\">// Implicitly typed.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">10</span>; <span class=\"comment\">// Explicitly typed.</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"匿名类型\"><a href=\"#匿名类型\" class=\"headerlink\" title=\"匿名类型\"></a><span style=\"color:#0366d6;\">匿名类型</span></h2><blockquote>\n<p>匿名类型提供了一种方便的方法，可用来将一组只读属性封装到单个对象中，而无需首先显式定义一个类型。 类型名由编译器生成，并且不能在源代码级使用。 每个属性的类型由编译器推断</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> &#123; Amount = <span class=\"number\">108</span>, Message = <span class=\"string\">\"Hello\"</span> &#125;;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// Rest the mouse pointer over v.Amount and v.Message in the following  </span></span><br><span class=\"line\"><span class=\"comment\">// statement to verify that their inferred types are int and string.  </span></span><br><span class=\"line\">Console.WriteLine(v.Amount + v.Message);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>匿名类型通常用在查询表达式的 select 子句中，以便返回源序列中每个对象的属性子集</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> productQuery = </span><br><span class=\"line\">    <span class=\"keyword\">from</span> prod <span class=\"keyword\">in</span> products</span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"keyword\">new</span> &#123; prod.Color, prod.Price &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> v <span class=\"keyword\">in</span> productQuery)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Color=&#123;0&#125;, Price=&#123;1&#125;\"</span>, v.Color, v.Price);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"扩展方法\"><a href=\"#扩展方法\" class=\"headerlink\" title=\"扩展方法\"></a><span style=\"color:#0366d6;\">扩展方法</span></h2><blockquote>\n<p>扩展方法被定义为静态方法，但它们是通过实例方法语法进行调用的。 它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。 仅当你使用 using 指令将命名空间显式导入到源代码中之后，扩展方法才位于范围中。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ExtensionMethods</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MyExtensions</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">WordCount</span>(<span class=\"params\"><span class=\"keyword\">this</span> String str</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str.Split(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'?'</span> &#125;, </span><br><span class=\"line\">                             StringSplitOptions.RemoveEmptyEntries).Length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> ExtensionMethods; </span><br><span class=\"line\"><span class=\"keyword\">string</span> s = <span class=\"string\">\"Hello Extension Methods\"</span>;  </span><br><span class=\"line\"><span class=\"keyword\">int</span> i = s.WordCount();</span><br></pre></td></tr></table></figure>\n<h2 id=\"分部方法\"><a href=\"#分部方法\" class=\"headerlink\" title=\"分部方法\"></a><span style=\"color:#0366d6;\">分部方法</span></h2><blockquote>\n<p>分部方法在分部类型的一部分中定义了签名，并在该类型的另一部分中定义了实现。 通过分部方法，类设计器可提供与事件处理程序类似的方法挂钩，以便开发者决定是否实现。<br>1.分部类型各部分中的签名必须匹配。<br>2.方法必须返回 void。<br>3.不允许使用访问修饰符。 分部方法是隐式专用的。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">PM</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">A</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">OnSomethingHappened</span>(<span class=\"params\"><span class=\"keyword\">string</span> s</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// This part can be in a separate file.</span></span><br><span class=\"line\">    <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">A</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Comment out this method and the program</span></span><br><span class=\"line\">        <span class=\"comment\">// will still compile.</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">OnSomethingHappened</span>(<span class=\"params\">String s</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Something happened: &#123;0&#125;\"</span>, s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动实现的属性\"><a href=\"#自动实现的属性\" class=\"headerlink\" title=\"自动实现的属性\"></a><span style=\"color:#0366d6;\">自动实现的属性</span></h2><blockquote>\n<p>C# 3.0 及更高版本，当属性访问器中不需要任何其他逻辑时，自动实现的属性会使属性声明更加简洁</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This class is mutable. Its data can be modified from</span></span><br><span class=\"line\"><span class=\"comment\">// outside the class.</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Auto-implemented properties for trivial get and set</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> TotalPurchases &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CustomerID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Constructor</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Customer</span>(<span class=\"params\"><span class=\"keyword\">double</span> purchases, <span class=\"keyword\">string</span> name, <span class=\"keyword\">int</span> ID</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        TotalPurchases = purchases;</span><br><span class=\"line\">        Name = name;</span><br><span class=\"line\">        CustomerID = ID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Methods</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetContactInfo</span>(<span class=\"params\"></span>)</span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">\"ContactInfo\"</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> <span class=\"title\">GetTransactionHistory</span>(<span class=\"params\"></span>)</span> &#123; <span class=\"keyword\">return</span> <span class=\"string\">\"History\"</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// .. Additional methods, events, etc.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象和集合初始值设定\"><a href=\"#对象和集合初始值设定\" class=\"headerlink\" title=\"对象和集合初始值设定\"></a><span style=\"color:#0366d6;\">对象和集合初始值设定</span></h2><h3 id=\"对象初始值设定\"><a href=\"#对象初始值设定\" class=\"headerlink\" title=\"对象初始值设定\"></a>对象初始值设定</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Cat</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Auto-implemented properties.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Age &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Cat</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cat cat = <span class=\"keyword\">new</span> Cat &#123; Age = <span class=\"number\">10</span>, Name = <span class=\"string\">\"Fluffy\"</span> &#125;;</span><br><span class=\"line\">Cat sameCat = <span class=\"keyword\">new</span> Cat(<span class=\"string\">\"Fluffy\"</span>)&#123; Age = <span class=\"number\">10</span> &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"匿名类型的对象初始值\"><a href=\"#匿名类型的对象初始值\" class=\"headerlink\" title=\"匿名类型的对象初始值\"></a>匿名类型的对象初始值</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> pet = <span class=\"keyword\">new</span> &#123; Age = <span class=\"number\">10</span>, Name = <span class=\"string\">\"Fluffy\"</span> &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"集合初始值\"><a href=\"#集合初始值\" class=\"headerlink\" title=\"集合初始值\"></a>集合初始值</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Cat&gt; cats = <span class=\"keyword\">new</span> List&lt;Cat&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Cat&#123; Name = <span class=\"string\">\"Sylvester\"</span>, Age=<span class=\"number\">8</span> &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Cat&#123; Name = <span class=\"string\">\"Whiskers\"</span>, Age=<span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Cat&#123; Name = <span class=\"string\">\"Sasha\"</span>, Age=<span class=\"number\">14</span> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a><span style=\"color:#0366d6;\">Lambda 表达式</span></h2><blockquote>\n<p>表达式 lambda，表达式为其主体</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(input-parameters) =&gt; expression</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>语句 lambda，语句块作为其主体</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(input-parameters) =&gt; &#123; &lt;sequence-of-statements&gt; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"含标准查询运算符的-lambda\"><a href=\"#含标准查询运算符的-lambda\" class=\"headerlink\" title=\"含标准查询运算符的 lambda\"></a>含标准查询运算符的 lambda</h3><blockquote>\n<p>有 2 个参数且不返回值的 Lambda 表达式可转换为 Action&lt;T1,T2&gt; 委托。有 1 个参数且返回值的 Lambda 表达式可转换为 Func&lt;T,TResult&gt; 委托</p>\n</blockquote>\n<h3 id=\"Lambda-表达式中的类型推理\"><a href=\"#Lambda-表达式中的类型推理\" class=\"headerlink\" title=\"Lambda 表达式中的类型推理\"></a>Lambda 表达式中的类型推理</h3><blockquote>\n<p>编写 lambda 时，通常不必为输入参数指定类型，因为编译器可以根据 lambda 主体、参数类型以及 C# 语言规范中描述的其他因素来推断类型。 对于大多数标准查询运算符，第一个输入是源序列中的元素类型。</p>\n</blockquote>\n<blockquote>\n<p>如果要查询 IEnumerable<Customer>，则输入变量将被推断为 Customer 对象，这意味着你可以访问其方法和属性</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customers.Where(c =&gt; c.City == <span class=\"string\">\"London\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1.Lambda 包含的参数数量必须与委托类型包含的参数数量相同。<br> 2.Lambda 中的每个输入参数必须都能够隐式转换为其对应的委托参数。<br> 3.Lambda 的返回值（如果有）必须能够隐式转换为委托的返回类型。</p>\n</blockquote>\n<h2 id=\"LINQ\"><a href=\"#LINQ\" class=\"headerlink\" title=\"LINQ\"></a><span style=\"color:#0366d6;\">LINQ</span></h2><blockquote>\n<p>下面代码展示的是linq的查询语句和扩展方法</p>\n</blockquote>\n <details>\n <summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">QueryVMethodSyntax</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numbers = &#123; <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">12</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Query syntax:</span></span><br><span class=\"line\">        IEnumerable&lt;<span class=\"keyword\">int</span>&gt; numQuery1 = </span><br><span class=\"line\">            <span class=\"keyword\">from</span> num <span class=\"keyword\">in</span> numbers</span><br><span class=\"line\">            <span class=\"keyword\">where</span> num % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">orderby</span> num</span><br><span class=\"line\">            <span class=\"keyword\">select</span> num;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//Method syntax:</span></span><br><span class=\"line\">        IEnumerable&lt;<span class=\"keyword\">int</span>&gt; numQuery2 = numbers.Where(num =&gt; num % <span class=\"number\">2</span> == <span class=\"number\">0</span>).OrderBy(n =&gt; n);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> numQuery1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.Write(i + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine(System.Environment.NewLine);</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> numQuery2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.Write(i + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Keep the console open in debug mode.</span></span><br><span class=\"line\">        Console.WriteLine(System.Environment.NewLine);</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"Press any key to exit\"</span>);</span><br><span class=\"line\">        Console.ReadKey();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Output:</span></span><br><span class=\"line\"><span class=\"comment\">    6 8 10 12</span></span><br><span class=\"line\"><span class=\"comment\">    6 8 10 12</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"表达式树\"><a href=\"#表达式树\" class=\"headerlink\" title=\"表达式树\"></a><span style=\"color:#0366d6;\">表达式树</span></h2><blockquote>\n<p>todo</p>\n</blockquote>"},{"title":"工具","date":"2020-02-16T16:00:00.000Z","_content":"一些工具的收集\n<!-- more -->\n# <span style=\"color:#0366d6;\">视频处理</span>\n[FFmpeg](http://ffmpeg.org/ \"FFmpeg\")\n[FFmpeg的.net封装](https://github.com/AydinAdn/MediaToolkit/ \"FFmpeg的.net封装\")\n# <span style=\"color:#0366d6;\">curl Windows</span>\n[curl for Windows](https://curl.haxx.se/windows/ \"curl\")\n[manual](https://curl.haxx.se/docs/manual.html \"操作手册\")\n[HTTP Scripting](https://curl.haxx.se/docs/httpscripting.html \"HTTP Scripting\")\n# <span style=\"color:#0366d6;\">代理privoxy</span>\n[入门参考](https://www.cnblogs.com/hongdada/p/10787924.html \"资料\")\n# <span style=\"color:#0366d6;\">Sc.exe 删除服务</span>\n[使用手册](https://www.cnblogs.com/inuex/p/4299690.html \"资料\")","source":"_posts/toolcollect.md","raw":"---\ntitle: 工具\ndate: 2020-02-17\ntags: [工具]\ncategories: 工具\n---\n一些工具的收集\n<!-- more -->\n# <span style=\"color:#0366d6;\">视频处理</span>\n[FFmpeg](http://ffmpeg.org/ \"FFmpeg\")\n[FFmpeg的.net封装](https://github.com/AydinAdn/MediaToolkit/ \"FFmpeg的.net封装\")\n# <span style=\"color:#0366d6;\">curl Windows</span>\n[curl for Windows](https://curl.haxx.se/windows/ \"curl\")\n[manual](https://curl.haxx.se/docs/manual.html \"操作手册\")\n[HTTP Scripting](https://curl.haxx.se/docs/httpscripting.html \"HTTP Scripting\")\n# <span style=\"color:#0366d6;\">代理privoxy</span>\n[入门参考](https://www.cnblogs.com/hongdada/p/10787924.html \"资料\")\n# <span style=\"color:#0366d6;\">Sc.exe 删除服务</span>\n[使用手册](https://www.cnblogs.com/inuex/p/4299690.html \"资料\")","slug":"toolcollect","published":1,"updated":"2022-08-17T06:55:45.680Z","_id":"ck70h2q63000078rigwrbar8z","comments":1,"layout":"post","photos":[],"link":"","content":"<p>一些工具的收集</p>\n<a id=\"more\"></a>\n<h1 id=\"视频处理\"><a href=\"#视频处理\" class=\"headerlink\" title=\"视频处理\"></a><span style=\"color:#0366d6;\">视频处理</span></h1><p><a href=\"http://ffmpeg.org/\" target=\"_blank\" rel=\"noopener\" title=\"FFmpeg\">FFmpeg</a><br><a href=\"https://github.com/AydinAdn/MediaToolkit/\" target=\"_blank\" rel=\"noopener\" title=\"FFmpeg的.net封装\">FFmpeg的.net封装</a></p>\n<h1 id=\"curl-Windows\"><a href=\"#curl-Windows\" class=\"headerlink\" title=\"curl Windows\"></a><span style=\"color:#0366d6;\">curl Windows</span></h1><p><a href=\"https://curl.haxx.se/windows/\" target=\"_blank\" rel=\"noopener\" title=\"curl\">curl for Windows</a><br><a href=\"https://curl.haxx.se/docs/manual.html\" target=\"_blank\" rel=\"noopener\" title=\"操作手册\">manual</a><br><a href=\"https://curl.haxx.se/docs/httpscripting.html\" target=\"_blank\" rel=\"noopener\" title=\"HTTP Scripting\">HTTP Scripting</a></p>\n<h1 id=\"代理privoxy\"><a href=\"#代理privoxy\" class=\"headerlink\" title=\"代理privoxy\"></a><span style=\"color:#0366d6;\">代理privoxy</span></h1><p><a href=\"https://www.cnblogs.com/hongdada/p/10787924.html\" target=\"_blank\" rel=\"noopener\" title=\"资料\">入门参考</a></p>\n<h1 id=\"Sc-exe-删除服务\"><a href=\"#Sc-exe-删除服务\" class=\"headerlink\" title=\"Sc.exe 删除服务\"></a><span style=\"color:#0366d6;\">Sc.exe 删除服务</span></h1><p><a href=\"https://www.cnblogs.com/inuex/p/4299690.html\" target=\"_blank\" rel=\"noopener\" title=\"资料\">使用手册</a></p>\n","site":{"data":{}},"excerpt":"<p>一些工具的收集</p>","more":"<h1 id=\"视频处理\"><a href=\"#视频处理\" class=\"headerlink\" title=\"视频处理\"></a><span style=\"color:#0366d6;\">视频处理</span></h1><p><a href=\"http://ffmpeg.org/\" target=\"_blank\" rel=\"noopener\" title=\"FFmpeg\">FFmpeg</a><br><a href=\"https://github.com/AydinAdn/MediaToolkit/\" target=\"_blank\" rel=\"noopener\" title=\"FFmpeg的.net封装\">FFmpeg的.net封装</a></p>\n<h1 id=\"curl-Windows\"><a href=\"#curl-Windows\" class=\"headerlink\" title=\"curl Windows\"></a><span style=\"color:#0366d6;\">curl Windows</span></h1><p><a href=\"https://curl.haxx.se/windows/\" target=\"_blank\" rel=\"noopener\" title=\"curl\">curl for Windows</a><br><a href=\"https://curl.haxx.se/docs/manual.html\" target=\"_blank\" rel=\"noopener\" title=\"操作手册\">manual</a><br><a href=\"https://curl.haxx.se/docs/httpscripting.html\" target=\"_blank\" rel=\"noopener\" title=\"HTTP Scripting\">HTTP Scripting</a></p>\n<h1 id=\"代理privoxy\"><a href=\"#代理privoxy\" class=\"headerlink\" title=\"代理privoxy\"></a><span style=\"color:#0366d6;\">代理privoxy</span></h1><p><a href=\"https://www.cnblogs.com/hongdada/p/10787924.html\" target=\"_blank\" rel=\"noopener\" title=\"资料\">入门参考</a></p>\n<h1 id=\"Sc-exe-删除服务\"><a href=\"#Sc-exe-删除服务\" class=\"headerlink\" title=\"Sc.exe 删除服务\"></a><span style=\"color:#0366d6;\">Sc.exe 删除服务</span></h1><p><a href=\"https://www.cnblogs.com/inuex/p/4299690.html\" target=\"_blank\" rel=\"noopener\" title=\"资料\">使用手册</a></p>"},{"title":"C#5.0语法","date":"2020-02-25T16:00:00.000Z","_content":"C#5.0语法（发布于 2012，.NET Framework 4.5）\n对此版本中所做的几乎所有工作都归入另一个突破性语言概念：适用于异步编程的 async 和 await 模型。\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#5.0语法</span>\n## <span style=\"color:#0366d6;\">调用方信息</span>\n>通过使用调用方信息特性，可获取有关方法的调用方的信息。 可以获取源代码的文件路径、源代码中的行号和调用方的成员名称。 此信息有助于跟踪、调试和创建诊断工具。\n\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">特性</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">说明</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerFilePathAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">包含调用方的源文件的完整路径。这是编译时的文件路径。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">String</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerLineNumberAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">源文件中调用方法的行号。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">Integer</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerMemberNameAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">调用方的方法或属性名称。 请参阅本主题后面的成员名称。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">String</td>\n</tr>\n</table>\n\n```csharp\npublic void DoProcessing()\n{\n    TraceMessage(\"Something happened.\");\n}\n\npublic void TraceMessage(string message,\n        [System.Runtime.CompilerServices.CallerMemberName] string memberName = \"\",\n        [System.Runtime.CompilerServices.CallerFilePath] string sourceFilePath = \"\",\n        [System.Runtime.CompilerServices.CallerLineNumber] int sourceLineNumber = 0)\n{\n    System.Diagnostics.Trace.WriteLine(\"message: \" + message);\n    System.Diagnostics.Trace.WriteLine(\"member name: \" + memberName);\n    System.Diagnostics.Trace.WriteLine(\"source file path: \" + sourceFilePath);\n    System.Diagnostics.Trace.WriteLine(\"source line number: \" + sourceLineNumber);\n}\n\n// Sample Output:\n//  message: Something happened.\n//  member name: DoProcessing\n//  source file path: c:\\Visual Studio Projects\\CallerInfoCS\\CallerInfoCS\\Form1.cs\n//  source line number: 31\n```\n>CallerMemberName 特性时返回的成员名称\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">调用发生中</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">成员名称结果</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">方法、属性或事件</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">从中发起调用的方法、属性或事件的名称。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“.ctor”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">静态构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“.cctor”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">析构函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“Finalize”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">用户定义的运算符或转换</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">为成员生成的名称，例如，“op_Addition”。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">特性构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">要应用特性的方法或属性的名称。 如果该特性是成员中的任何元素（如参数、返回值或泛型参数），则此结果是与该元素关联的成员的名称。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">无包含的成员（例如，程序集级别或应用于类型的特性）</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">可选参数的默认值。</td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">异步编程</span>\n>异步编程的核心是 Task 和 Task<T> 对象，这两个对象对异步操作建模。 它们受关键字 async 和 await 的支持。","source":"_posts/csharpgrammar-7.md","raw":"---\ntitle: C#5.0语法\ndate: 2020-02-26\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#5.0语法（发布于 2012，.NET Framework 4.5）\n对此版本中所做的几乎所有工作都归入另一个突破性语言概念：适用于异步编程的 async 和 await 模型。\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#5.0语法</span>\n## <span style=\"color:#0366d6;\">调用方信息</span>\n>通过使用调用方信息特性，可获取有关方法的调用方的信息。 可以获取源代码的文件路径、源代码中的行号和调用方的成员名称。 此信息有助于跟踪、调试和创建诊断工具。\n\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">特性</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">说明</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerFilePathAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">包含调用方的源文件的完整路径。这是编译时的文件路径。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">String</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerLineNumberAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">源文件中调用方法的行号。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">Integer</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerMemberNameAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">调用方的方法或属性名称。 请参阅本主题后面的成员名称。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">String</td>\n</tr>\n</table>\n\n```csharp\npublic void DoProcessing()\n{\n    TraceMessage(\"Something happened.\");\n}\n\npublic void TraceMessage(string message,\n        [System.Runtime.CompilerServices.CallerMemberName] string memberName = \"\",\n        [System.Runtime.CompilerServices.CallerFilePath] string sourceFilePath = \"\",\n        [System.Runtime.CompilerServices.CallerLineNumber] int sourceLineNumber = 0)\n{\n    System.Diagnostics.Trace.WriteLine(\"message: \" + message);\n    System.Diagnostics.Trace.WriteLine(\"member name: \" + memberName);\n    System.Diagnostics.Trace.WriteLine(\"source file path: \" + sourceFilePath);\n    System.Diagnostics.Trace.WriteLine(\"source line number: \" + sourceLineNumber);\n}\n\n// Sample Output:\n//  message: Something happened.\n//  member name: DoProcessing\n//  source file path: c:\\Visual Studio Projects\\CallerInfoCS\\CallerInfoCS\\Form1.cs\n//  source line number: 31\n```\n>CallerMemberName 特性时返回的成员名称\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">调用发生中</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">成员名称结果</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">方法、属性或事件</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">从中发起调用的方法、属性或事件的名称。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“.ctor”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">静态构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“.cctor”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">析构函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“Finalize”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">用户定义的运算符或转换</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">为成员生成的名称，例如，“op_Addition”。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">特性构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">要应用特性的方法或属性的名称。 如果该特性是成员中的任何元素（如参数、返回值或泛型参数），则此结果是与该元素关联的成员的名称。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">无包含的成员（例如，程序集级别或应用于类型的特性）</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">可选参数的默认值。</td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">异步编程</span>\n>异步编程的核心是 Task 和 Task<T> 对象，这两个对象对异步操作建模。 它们受关键字 async 和 await 的支持。","slug":"csharpgrammar-7","published":1,"updated":"2022-08-17T06:55:45.678Z","_id":"ck71xus7a0000v8ri7u234af5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#5.0语法（发布于 2012，.NET Framework 4.5）<br>对此版本中所做的几乎所有工作都归入另一个突破性语言概念：适用于异步编程的 async 和 await 模型。</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-5-0语法\"><a href=\"#C-5-0语法\" class=\"headerlink\" title=\"C#5.0语法\"></a><span style=\"color:#0366d6;\">C#5.0语法</span></h1><h2 id=\"调用方信息\"><a href=\"#调用方信息\" class=\"headerlink\" title=\"调用方信息\"></a><span style=\"color:#0366d6;\">调用方信息</span></h2><blockquote>\n<p>通过使用调用方信息特性，可获取有关方法的调用方的信息。 可以获取源代码的文件路径、源代码中的行号和调用方的成员名称。 此信息有助于跟踪、调试和创建诊断工具。</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">特性</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">说明</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerFilePathAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">包含调用方的源文件的完整路径。这是编译时的文件路径。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">String</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerLineNumberAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">源文件中调用方法的行号。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">Integer</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerMemberNameAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">调用方的方法或属性名称。 请参阅本主题后面的成员名称。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">String</td>\n</tr>\n</table>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoProcessing</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TraceMessage(<span class=\"string\">\"Something happened.\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TraceMessage</span>(<span class=\"params\"><span class=\"keyword\">string</span> message,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        [System.Runtime.CompilerServices.CallerMemberName] <span class=\"keyword\">string</span> memberName = <span class=\"string\">\"\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        [System.Runtime.CompilerServices.CallerFilePath] <span class=\"keyword\">string</span> sourceFilePath = <span class=\"string\">\"\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        [System.Runtime.CompilerServices.CallerLineNumber] <span class=\"keyword\">int</span> sourceLineNumber = <span class=\"number\">0</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    System.Diagnostics.Trace.WriteLine(<span class=\"string\">\"message: \"</span> + message);</span><br><span class=\"line\">    System.Diagnostics.Trace.WriteLine(<span class=\"string\">\"member name: \"</span> + memberName);</span><br><span class=\"line\">    System.Diagnostics.Trace.WriteLine(<span class=\"string\">\"source file path: \"</span> + sourceFilePath);</span><br><span class=\"line\">    System.Diagnostics.Trace.WriteLine(<span class=\"string\">\"source line number: \"</span> + sourceLineNumber);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Sample Output:</span></span><br><span class=\"line\"><span class=\"comment\">//  message: Something happened.</span></span><br><span class=\"line\"><span class=\"comment\">//  member name: DoProcessing</span></span><br><span class=\"line\"><span class=\"comment\">//  source file path: c:\\Visual Studio Projects\\CallerInfoCS\\CallerInfoCS\\Form1.cs</span></span><br><span class=\"line\"><span class=\"comment\">//  source line number: 31</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CallerMemberName 特性时返回的成员名称</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">调用发生中</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">成员名称结果</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">方法、属性或事件</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">从中发起调用的方法、属性或事件的名称。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“.ctor”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">静态构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“.cctor”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">析构函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“Finalize”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">用户定义的运算符或转换</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">为成员生成的名称，例如，“op_Addition”。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">特性构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">要应用特性的方法或属性的名称。 如果该特性是成员中的任何元素（如参数、返回值或泛型参数），则此结果是与该元素关联的成员的名称。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">无包含的成员（例如，程序集级别或应用于类型的特性）</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">可选参数的默认值。</td>\n</tr>\n</table>\n\n<h2 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a><span style=\"color:#0366d6;\">异步编程</span></h2><blockquote>\n<p>异步编程的核心是 Task 和 Task<T> 对象，这两个对象对异步操作建模。 它们受关键字 async 和 await 的支持。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>C#5.0语法（发布于 2012，.NET Framework 4.5）<br>对此版本中所做的几乎所有工作都归入另一个突破性语言概念：适用于异步编程的 async 和 await 模型。</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-5-0语法\"><a href=\"#C-5-0语法\" class=\"headerlink\" title=\"C#5.0语法\"></a><span style=\"color:#0366d6;\">C#5.0语法</span></h1><h2 id=\"调用方信息\"><a href=\"#调用方信息\" class=\"headerlink\" title=\"调用方信息\"></a><span style=\"color:#0366d6;\">调用方信息</span></h2><blockquote>\n<p>通过使用调用方信息特性，可获取有关方法的调用方的信息。 可以获取源代码的文件路径、源代码中的行号和调用方的成员名称。 此信息有助于跟踪、调试和创建诊断工具。</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">特性</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">说明</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerFilePathAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">包含调用方的源文件的完整路径。这是编译时的文件路径。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">String</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerLineNumberAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">源文件中调用方法的行号。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">Integer</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">CallerMemberNameAttribute</td>\n<td style=\"width:60%;border-left:0px;border-right:0px;\">调用方的方法或属性名称。 请参阅本主题后面的成员名称。</td>\n<td style=\"width:10%;border-left:0px;border-right:0px;\">String</td>\n</tr>\n</table>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DoProcessing</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    TraceMessage(<span class=\"string\">\"Something happened.\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TraceMessage</span>(<span class=\"params\"><span class=\"keyword\">string</span> message,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        [System.Runtime.CompilerServices.CallerMemberName] <span class=\"keyword\">string</span> memberName = <span class=\"string\">\"\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        [System.Runtime.CompilerServices.CallerFilePath] <span class=\"keyword\">string</span> sourceFilePath = <span class=\"string\">\"\"</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        [System.Runtime.CompilerServices.CallerLineNumber] <span class=\"keyword\">int</span> sourceLineNumber = <span class=\"number\">0</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    System.Diagnostics.Trace.WriteLine(<span class=\"string\">\"message: \"</span> + message);</span><br><span class=\"line\">    System.Diagnostics.Trace.WriteLine(<span class=\"string\">\"member name: \"</span> + memberName);</span><br><span class=\"line\">    System.Diagnostics.Trace.WriteLine(<span class=\"string\">\"source file path: \"</span> + sourceFilePath);</span><br><span class=\"line\">    System.Diagnostics.Trace.WriteLine(<span class=\"string\">\"source line number: \"</span> + sourceLineNumber);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Sample Output:</span></span><br><span class=\"line\"><span class=\"comment\">//  message: Something happened.</span></span><br><span class=\"line\"><span class=\"comment\">//  member name: DoProcessing</span></span><br><span class=\"line\"><span class=\"comment\">//  source file path: c:\\Visual Studio Projects\\CallerInfoCS\\CallerInfoCS\\Form1.cs</span></span><br><span class=\"line\"><span class=\"comment\">//  source line number: 31</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>CallerMemberName 特性时返回的成员名称</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">调用发生中</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">成员名称结果</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">方法、属性或事件</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">从中发起调用的方法、属性或事件的名称。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“.ctor”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">静态构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“.cctor”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">析构函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">字符串“Finalize”</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">用户定义的运算符或转换</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">为成员生成的名称，例如，“op_Addition”。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">特性构造函数</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">要应用特性的方法或属性的名称。 如果该特性是成员中的任何元素（如参数、返回值或泛型参数），则此结果是与该元素关联的成员的名称。</td>\n</tr>\n<tr>\n<td style=\"width:30%;border-left:0px;border-right:0px;\">无包含的成员（例如，程序集级别或应用于类型的特性）</td>\n<td style=\"width:70%;border-left:0px;border-right:0px;\">可选参数的默认值。</td>\n</tr>\n</table>\n\n<h2 id=\"异步编程\"><a href=\"#异步编程\" class=\"headerlink\" title=\"异步编程\"></a><span style=\"color:#0366d6;\">异步编程</span></h2><blockquote>\n<p>异步编程的核心是 Task 和 Task<T> 对象，这两个对象对异步操作建模。 它们受关键字 async 和 await 的支持。</p>\n</blockquote>"},{"title":"C#6.0语法","date":"2020-02-26T16:00:00.000Z","_content":"C#6.0语法（发布于 2015，.NET Framework 4.6 .NET Core 1.0 .NET Core 1.1）\nC# 在 3.0 版和 5.0 版对面向对象的语言添加了主要的新功能。 版本 6.0 随 Visual Studio 2015 一起发布，通过该版本，它不再推出主导性的杀手锏，而是发布了很多使得 C# 编程更有效率的小功能。\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#6.0语法</span>\n## <span style=\"color:#0366d6;\">只读自动属性</span>\n>只读自动属性 提供了更简洁的语法来创建不可变类型\n```csharp\npublic string FirstName { get; }\npublic string LastName { get;  }\n```\n>FirstName 和 LastName 属性只能在同一个类的构造函数的主体中设置\n```csharp\npublic Student(string firstName, string lastName)\n{\n    if (IsNullOrWhiteSpace(lastName))\n        throw new ArgumentException(message: \"Cannot be blank\", paramName: nameof(lastName));\n    FirstName = firstName;\n    LastName = lastName;\n}\n```\n## <span style=\"color:#0366d6;\">自动属性初始化表达式</span>\n>自动属性初始值设定项 可让你在属性声明中声明自动属性的初始值\n```csharp\npublic ICollection<double> Grades { get; } = new List<double>();\n```\n## <span style=\"color:#0366d6;\">Expression-bodied 函数成员</span>\n>你编写的许多成员是可以作为单个表达式的单个语句。 改为编写 expression-bodied 成员。 这适用于方法和只读属性。 例如，重写 ToString() 通常是理想之选\n```csharp\npublic override string ToString() => $\"{LastName}, {FirstName}\";\n```\n>也可以将此语法用于只读属性：\n```csharp\npublic string FullName => $\"{FirstName} {LastName}\";\n```\n## <span style=\"color:#0366d6;\">using static</span>\n>using static 增强功能可用于导入单个类的静态方法。 指定要使用的类\n```csharp\nusing static System.Math;\n```\n>使用using static时，扩展方法不作为静态方法导入，只有普通的静态方法导入\n```csharp\nusing static System.String;\n```\n## <span style=\"color:#0366d6;\">Null 条件运算符</span>\n>如果 Person 对象是 null，则将变量 first 赋值为 null。 否则，将 FirstName 属性的值分配给该变量。 最重要的是，?. 意味着当 person 变量为 null 时，此行代码不会生成 NullReferenceException。 它会短路并返回 null。\n```csharp\nvar first = person?.FirstName;\n```\n>还可以将 ?. 用于有条件地调用方法。 具有 null 条件运算符的成员函数的最常见用法是用于安全地调用可能为 null 的委托（或事件处理程序）。 通过使用 ?. 运算符调用该委托的 Invoke 方法来访问成员。\n```csharp\n// preferred in C# 6:\nthis.SomethingHappened?.Invoke(this, eventArgs);\n```\n## <span style=\"color:#0366d6;\">字符串内插</span>\n>使用 $ 作为字符串的开头，并使用 { 和 } 之间的表达式代替序号：\n```csharp\npublic string FullName => $\"{FirstName} {LastName}\";\n```\n## <span style=\"color:#0366d6;\">异常筛选器</span>\n>异常筛选器是确定何时应该应用给定的 catch 子句的子句 。 如果用于异常筛选器的表达式计算结果为 true，则 catch 子句将对异常执行正常处理。 如果表达式计算结果为 false，则将跳过 catch 子句。 一种用途是检查有关异常的信息，以确定 catch 子句是否可以处理该异常\n```csharp\npublic static async Task<string> MakeRequest()\n{\n    WebRequestHandler webRequestHandler = new WebRequestHandler();\n    webRequestHandler.AllowAutoRedirect = false;\n    using (HttpClient client = new HttpClient(webRequestHandler))\n    {\n        var stringTask = client.GetStringAsync(\"https://docs.microsoft.com/en-us/dotnet/about/\");\n        try\n        {\n            var responseText = await stringTask;\n            return responseText;\n        }\n        catch (System.Net.Http.HttpRequestException e) when (e.Message.Contains(\"301\"))\n        {\n            return \"Site Moved\";\n        }\n    }\n}\n```\n## <span style=\"color:#0366d6;\">nameof 表达式</span>\n>nameof 表达式的计算结果为符号的名称。 每当需要变量、属性或成员字段的名称时，这是让工具正常运行的好办法。 nameof 的其中一个最常见的用途是提供引起异常的符号的名称\n```csharp\nif (IsNullOrWhiteSpace(lastName))\n    throw new ArgumentException(message: \"Cannot be blank\", paramName: nameof(lastName));\n```\n## <span style=\"color:#0366d6;\">Catch 和 Finally 块中的 Await</span>\n>C# 5 对于可放置 await 表达式的位置有若干限制。 使用 C# 6，现在可以在 catch 或 finally 表达式中使用 await。 这通常用于日志记录方案：\n```csharp\npublic static async Task<string> MakeRequestAndLogFailures()\n{ \n    await logMethodEntrance();\n    var client = new System.Net.Http.HttpClient();\n    var streamTask = client.GetStringAsync(\"https://localHost:10000\");\n    try {\n        var responseText = await streamTask;\n        return responseText;\n    } catch (System.Net.Http.HttpRequestException e) when (e.Message.Contains(\"301\"))\n    {\n        await logError(\"Recovered from redirect\", e);\n        return \"Site Moved\";\n    }\n    finally\n    {\n        await logMethodExit();\n        client.Dispose();\n    }\n}\n```\n## <span style=\"color:#0366d6;\">使用索引器初始化关联集合</span>\n\n```csharp\nprivate Dictionary<int, string> messages = new Dictionary<int, string>\n{\n    { 404, \"Page not Found\"},\n    { 302, \"Page moved, but left a forwarding address.\"},\n    { 500, \"The web server can't come out to play today.\"}\n};\n```\n```csharp\nprivate Dictionary<int, string> webErrors = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n```\n## <span style=\"color:#0366d6;\">集合初始值设定项中的扩展 Add 方法</span>\n>todo\n## <span style=\"color:#0366d6;\">改进了Task.Run重载解析</span>\n```csharp\nstatic Task DoThings() \n{\n     return Task.FromResult(0); \n}\n```\n>早期版本的 C# 中，使用方法组语法调用该方法将失败\n```csharp\nTask.Run(DoThings); \n```\n>早期的编译器无法正确区分 Task.Run(Action) 和 Task.Run(Func<Task>()),\n早期版本中，需要使用 lambda 表达式作为参数,貌似对Action仍不支持（todo）\n```csharp\nTask.Run(() => DoThings());\n```","source":"_posts/csharpgrammar-8.md","raw":"---\ntitle: C#6.0语法\ndate: 2020-02-27\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#6.0语法（发布于 2015，.NET Framework 4.6 .NET Core 1.0 .NET Core 1.1）\nC# 在 3.0 版和 5.0 版对面向对象的语言添加了主要的新功能。 版本 6.0 随 Visual Studio 2015 一起发布，通过该版本，它不再推出主导性的杀手锏，而是发布了很多使得 C# 编程更有效率的小功能。\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#6.0语法</span>\n## <span style=\"color:#0366d6;\">只读自动属性</span>\n>只读自动属性 提供了更简洁的语法来创建不可变类型\n```csharp\npublic string FirstName { get; }\npublic string LastName { get;  }\n```\n>FirstName 和 LastName 属性只能在同一个类的构造函数的主体中设置\n```csharp\npublic Student(string firstName, string lastName)\n{\n    if (IsNullOrWhiteSpace(lastName))\n        throw new ArgumentException(message: \"Cannot be blank\", paramName: nameof(lastName));\n    FirstName = firstName;\n    LastName = lastName;\n}\n```\n## <span style=\"color:#0366d6;\">自动属性初始化表达式</span>\n>自动属性初始值设定项 可让你在属性声明中声明自动属性的初始值\n```csharp\npublic ICollection<double> Grades { get; } = new List<double>();\n```\n## <span style=\"color:#0366d6;\">Expression-bodied 函数成员</span>\n>你编写的许多成员是可以作为单个表达式的单个语句。 改为编写 expression-bodied 成员。 这适用于方法和只读属性。 例如，重写 ToString() 通常是理想之选\n```csharp\npublic override string ToString() => $\"{LastName}, {FirstName}\";\n```\n>也可以将此语法用于只读属性：\n```csharp\npublic string FullName => $\"{FirstName} {LastName}\";\n```\n## <span style=\"color:#0366d6;\">using static</span>\n>using static 增强功能可用于导入单个类的静态方法。 指定要使用的类\n```csharp\nusing static System.Math;\n```\n>使用using static时，扩展方法不作为静态方法导入，只有普通的静态方法导入\n```csharp\nusing static System.String;\n```\n## <span style=\"color:#0366d6;\">Null 条件运算符</span>\n>如果 Person 对象是 null，则将变量 first 赋值为 null。 否则，将 FirstName 属性的值分配给该变量。 最重要的是，?. 意味着当 person 变量为 null 时，此行代码不会生成 NullReferenceException。 它会短路并返回 null。\n```csharp\nvar first = person?.FirstName;\n```\n>还可以将 ?. 用于有条件地调用方法。 具有 null 条件运算符的成员函数的最常见用法是用于安全地调用可能为 null 的委托（或事件处理程序）。 通过使用 ?. 运算符调用该委托的 Invoke 方法来访问成员。\n```csharp\n// preferred in C# 6:\nthis.SomethingHappened?.Invoke(this, eventArgs);\n```\n## <span style=\"color:#0366d6;\">字符串内插</span>\n>使用 $ 作为字符串的开头，并使用 { 和 } 之间的表达式代替序号：\n```csharp\npublic string FullName => $\"{FirstName} {LastName}\";\n```\n## <span style=\"color:#0366d6;\">异常筛选器</span>\n>异常筛选器是确定何时应该应用给定的 catch 子句的子句 。 如果用于异常筛选器的表达式计算结果为 true，则 catch 子句将对异常执行正常处理。 如果表达式计算结果为 false，则将跳过 catch 子句。 一种用途是检查有关异常的信息，以确定 catch 子句是否可以处理该异常\n```csharp\npublic static async Task<string> MakeRequest()\n{\n    WebRequestHandler webRequestHandler = new WebRequestHandler();\n    webRequestHandler.AllowAutoRedirect = false;\n    using (HttpClient client = new HttpClient(webRequestHandler))\n    {\n        var stringTask = client.GetStringAsync(\"https://docs.microsoft.com/en-us/dotnet/about/\");\n        try\n        {\n            var responseText = await stringTask;\n            return responseText;\n        }\n        catch (System.Net.Http.HttpRequestException e) when (e.Message.Contains(\"301\"))\n        {\n            return \"Site Moved\";\n        }\n    }\n}\n```\n## <span style=\"color:#0366d6;\">nameof 表达式</span>\n>nameof 表达式的计算结果为符号的名称。 每当需要变量、属性或成员字段的名称时，这是让工具正常运行的好办法。 nameof 的其中一个最常见的用途是提供引起异常的符号的名称\n```csharp\nif (IsNullOrWhiteSpace(lastName))\n    throw new ArgumentException(message: \"Cannot be blank\", paramName: nameof(lastName));\n```\n## <span style=\"color:#0366d6;\">Catch 和 Finally 块中的 Await</span>\n>C# 5 对于可放置 await 表达式的位置有若干限制。 使用 C# 6，现在可以在 catch 或 finally 表达式中使用 await。 这通常用于日志记录方案：\n```csharp\npublic static async Task<string> MakeRequestAndLogFailures()\n{ \n    await logMethodEntrance();\n    var client = new System.Net.Http.HttpClient();\n    var streamTask = client.GetStringAsync(\"https://localHost:10000\");\n    try {\n        var responseText = await streamTask;\n        return responseText;\n    } catch (System.Net.Http.HttpRequestException e) when (e.Message.Contains(\"301\"))\n    {\n        await logError(\"Recovered from redirect\", e);\n        return \"Site Moved\";\n    }\n    finally\n    {\n        await logMethodExit();\n        client.Dispose();\n    }\n}\n```\n## <span style=\"color:#0366d6;\">使用索引器初始化关联集合</span>\n\n```csharp\nprivate Dictionary<int, string> messages = new Dictionary<int, string>\n{\n    { 404, \"Page not Found\"},\n    { 302, \"Page moved, but left a forwarding address.\"},\n    { 500, \"The web server can't come out to play today.\"}\n};\n```\n```csharp\nprivate Dictionary<int, string> webErrors = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n```\n## <span style=\"color:#0366d6;\">集合初始值设定项中的扩展 Add 方法</span>\n>todo\n## <span style=\"color:#0366d6;\">改进了Task.Run重载解析</span>\n```csharp\nstatic Task DoThings() \n{\n     return Task.FromResult(0); \n}\n```\n>早期版本的 C# 中，使用方法组语法调用该方法将失败\n```csharp\nTask.Run(DoThings); \n```\n>早期的编译器无法正确区分 Task.Run(Action) 和 Task.Run(Func<Task>()),\n早期版本中，需要使用 lambda 表达式作为参数,貌似对Action仍不支持（todo）\n```csharp\nTask.Run(() => DoThings());\n```","slug":"csharpgrammar-8","published":1,"updated":"2022-08-17T06:55:45.679Z","_id":"ck71yi564000glcri8rwydl3n","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#6.0语法（发布于 2015，.NET Framework 4.6 .NET Core 1.0 .NET Core 1.1）<br>C# 在 3.0 版和 5.0 版对面向对象的语言添加了主要的新功能。 版本 6.0 随 Visual Studio 2015 一起发布，通过该版本，它不再推出主导性的杀手锏，而是发布了很多使得 C# 编程更有效率的小功能。</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-6-0语法\"><a href=\"#C-6-0语法\" class=\"headerlink\" title=\"C#6.0语法\"></a><span style=\"color:#0366d6;\">C#6.0语法</span></h1><h2 id=\"只读自动属性\"><a href=\"#只读自动属性\" class=\"headerlink\" title=\"只读自动属性\"></a><span style=\"color:#0366d6;\">只读自动属性</span></h2><blockquote>\n<p>只读自动属性 提供了更简洁的语法来创建不可变类型</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FirstName &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> LastName &#123; <span class=\"keyword\">get</span>;  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>FirstName 和 LastName 属性只能在同一个类的构造函数的主体中设置</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span>(<span class=\"params\"><span class=\"keyword\">string</span> firstName, <span class=\"keyword\">string</span> lastName</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (IsNullOrWhiteSpace(lastName))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"Cannot be blank\"</span>, paramName: <span class=\"keyword\">nameof</span>(lastName));</span><br><span class=\"line\">    FirstName = firstName;</span><br><span class=\"line\">    LastName = lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动属性初始化表达式\"><a href=\"#自动属性初始化表达式\" class=\"headerlink\" title=\"自动属性初始化表达式\"></a><span style=\"color:#0366d6;\">自动属性初始化表达式</span></h2><blockquote>\n<p>自动属性初始值设定项 可让你在属性声明中声明自动属性的初始值</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ICollection&lt;<span class=\"keyword\">double</span>&gt; Grades &#123; <span class=\"keyword\">get</span>; &#125; = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">double</span>&gt;();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expression-bodied-函数成员\"><a href=\"#Expression-bodied-函数成员\" class=\"headerlink\" title=\"Expression-bodied 函数成员\"></a><span style=\"color:#0366d6;\">Expression-bodied 函数成员</span></h2><blockquote>\n<p>你编写的许多成员是可以作为单个表达式的单个语句。 改为编写 expression-bodied 成员。 这适用于方法和只读属性。 例如，重写 ToString() 通常是理想之选</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span> =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;LastName&#125;</span>, <span class=\"subst\">&#123;FirstName&#125;</span>\"</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>也可以将此语法用于只读属性：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FullName =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;FirstName&#125;</span> <span class=\"subst\">&#123;LastName&#125;</span>\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"using-static\"><a href=\"#using-static\" class=\"headerlink\" title=\"using static\"></a><span style=\"color:#0366d6;\">using static</span></h2><blockquote>\n<p>using static 增强功能可用于导入单个类的静态方法。 指定要使用的类</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.Math;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用using static时，扩展方法不作为静态方法导入，只有普通的静态方法导入</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.String;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Null-条件运算符\"><a href=\"#Null-条件运算符\" class=\"headerlink\" title=\"Null 条件运算符\"></a><span style=\"color:#0366d6;\">Null 条件运算符</span></h2><blockquote>\n<p>如果 Person 对象是 null，则将变量 first 赋值为 null。 否则，将 FirstName 属性的值分配给该变量。 最重要的是，?. 意味着当 person 变量为 null 时，此行代码不会生成 NullReferenceException。 它会短路并返回 null。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = person?.FirstName;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>还可以将 ?. 用于有条件地调用方法。 具有 null 条件运算符的成员函数的最常见用法是用于安全地调用可能为 null 的委托（或事件处理程序）。 通过使用 ?. 运算符调用该委托的 Invoke 方法来访问成员。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// preferred in C# 6:</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.SomethingHappened?.Invoke(<span class=\"keyword\">this</span>, eventArgs);</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串内插\"><a href=\"#字符串内插\" class=\"headerlink\" title=\"字符串内插\"></a><span style=\"color:#0366d6;\">字符串内插</span></h2><blockquote>\n<p>使用 $ 作为字符串的开头，并使用 { 和 } 之间的表达式代替序号：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FullName =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;FirstName&#125;</span> <span class=\"subst\">&#123;LastName&#125;</span>\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"异常筛选器\"><a href=\"#异常筛选器\" class=\"headerlink\" title=\"异常筛选器\"></a><span style=\"color:#0366d6;\">异常筛选器</span></h2><blockquote>\n<p>异常筛选器是确定何时应该应用给定的 catch 子句的子句 。 如果用于异常筛选器的表达式计算结果为 true，则 catch 子句将对异常执行正常处理。 如果表达式计算结果为 false，则将跳过 catch 子句。 一种用途是检查有关异常的信息，以确定 catch 子句是否可以处理该异常</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">MakeRequest</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    WebRequestHandler webRequestHandler = <span class=\"keyword\">new</span> WebRequestHandler();</span><br><span class=\"line\">    webRequestHandler.AllowAutoRedirect = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (HttpClient client = <span class=\"keyword\">new</span> HttpClient(webRequestHandler))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stringTask = client.GetStringAsync(<span class=\"string\">\"https://docs.microsoft.com/en-us/dotnet/about/\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> responseText = <span class=\"keyword\">await</span> stringTask;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> responseText;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (System.Net.Http.HttpRequestException e) <span class=\"keyword\">when</span> (e.Message.Contains(<span class=\"string\">\"301\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Site Moved\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"nameof-表达式\"><a href=\"#nameof-表达式\" class=\"headerlink\" title=\"nameof 表达式\"></a><span style=\"color:#0366d6;\">nameof 表达式</span></h2><blockquote>\n<p>nameof 表达式的计算结果为符号的名称。 每当需要变量、属性或成员字段的名称时，这是让工具正常运行的好办法。 nameof 的其中一个最常见的用途是提供引起异常的符号的名称</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (IsNullOrWhiteSpace(lastName))</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"Cannot be blank\"</span>, paramName: <span class=\"keyword\">nameof</span>(lastName));</span><br></pre></td></tr></table></figure>\n<h2 id=\"Catch-和-Finally-块中的-Await\"><a href=\"#Catch-和-Finally-块中的-Await\" class=\"headerlink\" title=\"Catch 和 Finally 块中的 Await\"></a><span style=\"color:#0366d6;\">Catch 和 Finally 块中的 Await</span></h2><blockquote>\n<p>C# 5 对于可放置 await 表达式的位置有若干限制。 使用 C# 6，现在可以在 catch 或 finally 表达式中使用 await。 这通常用于日志记录方案：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">MakeRequestAndLogFailures</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">await</span> logMethodEntrance();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> System.Net.Http.HttpClient();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> streamTask = client.GetStringAsync(<span class=\"string\">\"https://localHost:10000\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> responseText = <span class=\"keyword\">await</span> streamTask;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> responseText;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (System.Net.Http.HttpRequestException e) <span class=\"keyword\">when</span> (e.Message.Contains(<span class=\"string\">\"301\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> logError(<span class=\"string\">\"Recovered from redirect\"</span>, e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Site Moved\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> logMethodExit();</span><br><span class=\"line\">        client.Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用索引器初始化关联集合\"><a href=\"#使用索引器初始化关联集合\" class=\"headerlink\" title=\"使用索引器初始化关联集合\"></a><span style=\"color:#0366d6;\">使用索引器初始化关联集合</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Dictionary&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>&gt; messages = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#123; <span class=\"number\">404</span>, <span class=\"string\">\"Page not Found\"</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">302</span>, <span class=\"string\">\"Page moved, but left a forwarding address.\"</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">500</span>, <span class=\"string\">\"The web server can't come out to play today.\"</span>&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Dictionary&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>&gt; webErrors = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">404</span>] = <span class=\"string\">\"Page not Found\"</span>,</span><br><span class=\"line\">    [<span class=\"meta\">302</span>] = <span class=\"string\">\"Page moved, but left a forwarding address.\"</span>,</span><br><span class=\"line\">    [<span class=\"meta\">500</span>] = <span class=\"string\">\"The web server can't come out to play today.\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"集合初始值设定项中的扩展-Add-方法\"><a href=\"#集合初始值设定项中的扩展-Add-方法\" class=\"headerlink\" title=\"集合初始值设定项中的扩展 Add 方法\"></a><span style=\"color:#0366d6;\">集合初始值设定项中的扩展 Add 方法</span></h2><blockquote>\n<p>todo</p>\n</blockquote>\n<h2 id=\"改进了Task-Run重载解析\"><a href=\"#改进了Task-Run重载解析\" class=\"headerlink\" title=\"改进了Task.Run重载解析\"></a><span style=\"color:#0366d6;\">改进了Task.Run重载解析</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Task <span class=\"title\">DoThings</span>(<span class=\"params\"></span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Task.FromResult(<span class=\"number\">0</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>早期版本的 C# 中，使用方法组语法调用该方法将失败</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task.Run(DoThings);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>早期的编译器无法正确区分 Task.Run(Action) 和 Task.Run(Func<Task>()),<br>早期版本中，需要使用 lambda 表达式作为参数,貌似对Action仍不支持（todo）</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task.Run(() =&gt; DoThings());</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>C#6.0语法（发布于 2015，.NET Framework 4.6 .NET Core 1.0 .NET Core 1.1）<br>C# 在 3.0 版和 5.0 版对面向对象的语言添加了主要的新功能。 版本 6.0 随 Visual Studio 2015 一起发布，通过该版本，它不再推出主导性的杀手锏，而是发布了很多使得 C# 编程更有效率的小功能。</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-6-0语法\"><a href=\"#C-6-0语法\" class=\"headerlink\" title=\"C#6.0语法\"></a><span style=\"color:#0366d6;\">C#6.0语法</span></h1><h2 id=\"只读自动属性\"><a href=\"#只读自动属性\" class=\"headerlink\" title=\"只读自动属性\"></a><span style=\"color:#0366d6;\">只读自动属性</span></h2><blockquote>\n<p>只读自动属性 提供了更简洁的语法来创建不可变类型</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FirstName &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> LastName &#123; <span class=\"keyword\">get</span>;  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>FirstName 和 LastName 属性只能在同一个类的构造函数的主体中设置</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span>(<span class=\"params\"><span class=\"keyword\">string</span> firstName, <span class=\"keyword\">string</span> lastName</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (IsNullOrWhiteSpace(lastName))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"Cannot be blank\"</span>, paramName: <span class=\"keyword\">nameof</span>(lastName));</span><br><span class=\"line\">    FirstName = firstName;</span><br><span class=\"line\">    LastName = lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动属性初始化表达式\"><a href=\"#自动属性初始化表达式\" class=\"headerlink\" title=\"自动属性初始化表达式\"></a><span style=\"color:#0366d6;\">自动属性初始化表达式</span></h2><blockquote>\n<p>自动属性初始值设定项 可让你在属性声明中声明自动属性的初始值</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ICollection&lt;<span class=\"keyword\">double</span>&gt; Grades &#123; <span class=\"keyword\">get</span>; &#125; = <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">double</span>&gt;();</span><br></pre></td></tr></table></figure>\n<h2 id=\"Expression-bodied-函数成员\"><a href=\"#Expression-bodied-函数成员\" class=\"headerlink\" title=\"Expression-bodied 函数成员\"></a><span style=\"color:#0366d6;\">Expression-bodied 函数成员</span></h2><blockquote>\n<p>你编写的许多成员是可以作为单个表达式的单个语句。 改为编写 expression-bodied 成员。 这适用于方法和只读属性。 例如，重写 ToString() 通常是理想之选</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span> =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;LastName&#125;</span>, <span class=\"subst\">&#123;FirstName&#125;</span>\"</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>也可以将此语法用于只读属性：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FullName =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;FirstName&#125;</span> <span class=\"subst\">&#123;LastName&#125;</span>\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"using-static\"><a href=\"#using-static\" class=\"headerlink\" title=\"using static\"></a><span style=\"color:#0366d6;\">using static</span></h2><blockquote>\n<p>using static 增强功能可用于导入单个类的静态方法。 指定要使用的类</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.Math;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用using static时，扩展方法不作为静态方法导入，只有普通的静态方法导入</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.String;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Null-条件运算符\"><a href=\"#Null-条件运算符\" class=\"headerlink\" title=\"Null 条件运算符\"></a><span style=\"color:#0366d6;\">Null 条件运算符</span></h2><blockquote>\n<p>如果 Person 对象是 null，则将变量 first 赋值为 null。 否则，将 FirstName 属性的值分配给该变量。 最重要的是，?. 意味着当 person 变量为 null 时，此行代码不会生成 NullReferenceException。 它会短路并返回 null。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> first = person?.FirstName;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>还可以将 ?. 用于有条件地调用方法。 具有 null 条件运算符的成员函数的最常见用法是用于安全地调用可能为 null 的委托（或事件处理程序）。 通过使用 ?. 运算符调用该委托的 Invoke 方法来访问成员。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// preferred in C# 6:</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.SomethingHappened?.Invoke(<span class=\"keyword\">this</span>, eventArgs);</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串内插\"><a href=\"#字符串内插\" class=\"headerlink\" title=\"字符串内插\"></a><span style=\"color:#0366d6;\">字符串内插</span></h2><blockquote>\n<p>使用 $ 作为字符串的开头，并使用 { 和 } 之间的表达式代替序号：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FullName =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;FirstName&#125;</span> <span class=\"subst\">&#123;LastName&#125;</span>\"</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"异常筛选器\"><a href=\"#异常筛选器\" class=\"headerlink\" title=\"异常筛选器\"></a><span style=\"color:#0366d6;\">异常筛选器</span></h2><blockquote>\n<p>异常筛选器是确定何时应该应用给定的 catch 子句的子句 。 如果用于异常筛选器的表达式计算结果为 true，则 catch 子句将对异常执行正常处理。 如果表达式计算结果为 false，则将跳过 catch 子句。 一种用途是检查有关异常的信息，以确定 catch 子句是否可以处理该异常</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">MakeRequest</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    WebRequestHandler webRequestHandler = <span class=\"keyword\">new</span> WebRequestHandler();</span><br><span class=\"line\">    webRequestHandler.AllowAutoRedirect = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (HttpClient client = <span class=\"keyword\">new</span> HttpClient(webRequestHandler))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stringTask = client.GetStringAsync(<span class=\"string\">\"https://docs.microsoft.com/en-us/dotnet/about/\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> responseText = <span class=\"keyword\">await</span> stringTask;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> responseText;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (System.Net.Http.HttpRequestException e) <span class=\"keyword\">when</span> (e.Message.Contains(<span class=\"string\">\"301\"</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"Site Moved\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"nameof-表达式\"><a href=\"#nameof-表达式\" class=\"headerlink\" title=\"nameof 表达式\"></a><span style=\"color:#0366d6;\">nameof 表达式</span></h2><blockquote>\n<p>nameof 表达式的计算结果为符号的名称。 每当需要变量、属性或成员字段的名称时，这是让工具正常运行的好办法。 nameof 的其中一个最常见的用途是提供引起异常的符号的名称</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (IsNullOrWhiteSpace(lastName))</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"Cannot be blank\"</span>, paramName: <span class=\"keyword\">nameof</span>(lastName));</span><br></pre></td></tr></table></figure>\n<h2 id=\"Catch-和-Finally-块中的-Await\"><a href=\"#Catch-和-Finally-块中的-Await\" class=\"headerlink\" title=\"Catch 和 Finally 块中的 Await\"></a><span style=\"color:#0366d6;\">Catch 和 Finally 块中的 Await</span></h2><blockquote>\n<p>C# 5 对于可放置 await 表达式的位置有若干限制。 使用 C# 6，现在可以在 catch 或 finally 表达式中使用 await。 这通常用于日志记录方案：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">MakeRequestAndLogFailures</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">await</span> logMethodEntrance();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> System.Net.Http.HttpClient();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> streamTask = client.GetStringAsync(<span class=\"string\">\"https://localHost:10000\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> responseText = <span class=\"keyword\">await</span> streamTask;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> responseText;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (System.Net.Http.HttpRequestException e) <span class=\"keyword\">when</span> (e.Message.Contains(<span class=\"string\">\"301\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> logError(<span class=\"string\">\"Recovered from redirect\"</span>, e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Site Moved\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> logMethodExit();</span><br><span class=\"line\">        client.Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用索引器初始化关联集合\"><a href=\"#使用索引器初始化关联集合\" class=\"headerlink\" title=\"使用索引器初始化关联集合\"></a><span style=\"color:#0366d6;\">使用索引器初始化关联集合</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Dictionary&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>&gt; messages = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#123; <span class=\"number\">404</span>, <span class=\"string\">\"Page not Found\"</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">302</span>, <span class=\"string\">\"Page moved, but left a forwarding address.\"</span>&#125;,</span><br><span class=\"line\">    &#123; <span class=\"number\">500</span>, <span class=\"string\">\"The web server can't come out to play today.\"</span>&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Dictionary&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>&gt; webErrors = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">404</span>] = <span class=\"string\">\"Page not Found\"</span>,</span><br><span class=\"line\">    [<span class=\"meta\">302</span>] = <span class=\"string\">\"Page moved, but left a forwarding address.\"</span>,</span><br><span class=\"line\">    [<span class=\"meta\">500</span>] = <span class=\"string\">\"The web server can't come out to play today.\"</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"集合初始值设定项中的扩展-Add-方法\"><a href=\"#集合初始值设定项中的扩展-Add-方法\" class=\"headerlink\" title=\"集合初始值设定项中的扩展 Add 方法\"></a><span style=\"color:#0366d6;\">集合初始值设定项中的扩展 Add 方法</span></h2><blockquote>\n<p>todo</p>\n</blockquote>\n<h2 id=\"改进了Task-Run重载解析\"><a href=\"#改进了Task-Run重载解析\" class=\"headerlink\" title=\"改进了Task.Run重载解析\"></a><span style=\"color:#0366d6;\">改进了Task.Run重载解析</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Task <span class=\"title\">DoThings</span>(<span class=\"params\"></span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> Task.FromResult(<span class=\"number\">0</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>早期版本的 C# 中，使用方法组语法调用该方法将失败</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task.Run(DoThings);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>早期的编译器无法正确区分 Task.Run(Action) 和 Task.Run(Func<Task>()),<br>早期版本中，需要使用 lambda 表达式作为参数,貌似对Action仍不支持（todo）</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Task.Run(() =&gt; DoThings());</span><br></pre></td></tr></table></figure>"},{"title":"C#7.0语法","date":"2020-02-27T16:00:00.000Z","_content":"C#7.0语法  \n7.0-2017-05-.NET Framework 4.7\n7.1-2017-08-.NET Core 2.0\n7.2-2017-10\n7.3-2018-03-.NET Framework 4.8 .NET Core 2.1 .NET Core 2.2\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#7.0语法</span>\n## <span style=\"color:#0366d6;\">out 变量</span>\n>支持 out 参数的现有语法已在此版本中得到改进。 现在可以在方法调用的参数列表中声明 out 变量，而不是编写单独的声明语句\n```csharp\nif (int.TryParse(input, out int result))\n    Console.WriteLine(result);\nelse\n    Console.WriteLine(\"Could not parse input\");\n```\n>隐式类型的局部变量\n```csharp\nif (int.TryParse(input, out var answer))\n    Console.WriteLine(answer);\nelse\n    Console.WriteLine(\"Could not parse input\");\n```\n## <span style=\"color:#0366d6;\">更多的 expression-bodied 成员</span>\n>C# 6 为成员函数和只读属性引入了 expression-bodied 成员。 C# 7.0 扩展了可作为表达式实现的允许的成员。 在 C# 7.0 中，你可以在属性 和索引器 上实现构造函数 、终结器 以及 get 和 set 访问器。\n\n\n```csharp\n// Expression-bodied constructor\npublic ExpressionMembersExample(string label) => this.Label = label;\n\n// Expression-bodied finalizer\n~ExpressionMembersExample() => Console.Error.WriteLine(\"Finalized!\");\n\nprivate string label;\n\n// Expression-bodied get / set accessors.\npublic string Label\n{\n    get => label;\n    set => this.label = value ?? \"Default label\";\n}\n```\n## <span style=\"color:#0366d6;\">本地函数</span>\n>本地函数使你能够在另一个方法的上下文内声明方法 。 本地函数使得类的阅读者更容易看到本地方法仅从声明它的上下文中调用。\n```csharp\npublic static IEnumerable<char> AlphabetSubset3(char start, char end)\n{\n    if (start < 'a' || start > 'z')\n        throw new ArgumentOutOfRangeException(paramName: nameof(start), message: \"start must be a letter\");\n    if (end < 'a' || end > 'z')\n        throw new ArgumentOutOfRangeException(paramName: nameof(end), message: \"end must be a letter\");\n\n    if (end <= start)\n        throw new ArgumentException($\"{nameof(end)} must be greater than {nameof(start)}\");\n\n    return alphabetSubsetImplementation();\n\n    IEnumerable<char> alphabetSubsetImplementation()\n    {\n        for (var c = start; c < end; c++)\n            yield return c;\n    }\n}\n```\n>可以对 async 方法采用相同的技术，以确保在异步工作开始之前引发由参数验证引起的异常\n```csharp\npublic Task<string> PerformLongRunningWork(string address, int index, string name)\n{\n    if (string.IsNullOrWhiteSpace(address))\n        throw new ArgumentException(message: \"An address is required\", paramName: nameof(address));\n    if (index < 0)\n        throw new ArgumentOutOfRangeException(paramName: nameof(index), message: \"The index must be non-negative\");\n    if (string.IsNullOrWhiteSpace(name))\n        throw new ArgumentException(message: \"You must supply a name\", paramName: nameof(name));\n\n    return longRunningWorkImplementation();\n\n    async Task<string> longRunningWorkImplementation()\n    {\n        var interimResult = await FirstWork(address);\n        var secondResult = await SecondStep(index, name);\n        return $\"The results are {interimResult} and {secondResult}. Enjoy.\";\n    }\n}\n```\n## <span style=\"color:#0366d6;\">throw表达式</span>\n>从 C# 7.0 开始，throw 可以用作表达式和语句。 这允许在以前不支持的上下文中引发异常\n### 条件运算符\n```csharp\nprivate static void DisplayFirstNumber(string[] args)\n{\n   string arg = args.Length >= 1 ? args[0] : \n                              throw new ArgumentException(\"You must supply an argument\");\n   if (Int64.TryParse(arg, out var number))\n      Console.WriteLine($\"You entered {number:F0}\");\n   else\n      Console.WriteLine($\"{arg} is not a number.\");                            \n}\n```\n\n### null 合并运算符\n```csharp\npublic string Name\n{\n    get => name;\n    set => name = value ?? \n        throw new ArgumentNullException(paramName: nameof(value), message: \"Name cannot be null\");\n}  \n```\n### expression-bodied lambda 或方法\n```csharp\nDateTime ToDateTime(IFormatProvider provider) => \n         throw new InvalidCastException(\"Conversion to a DateTime is not supported.\");\n```\n## <span style=\"color:#0366d6;\">数字文本语法改进</span>\n>C# 7.0 包括两项新功能，可用于以最可读的方式写入数字来用于预期用途：二进制文本和数字分隔符\n```csharp\npublic const int Sixteen =   0b0001_0000;\npublic const int ThirtyTwo = 0b0010_0000;\npublic const int SixtyFour = 0b0100_0000;\npublic const int OneHundredTwentyEight = 0b1000_0000;\n```\n>对于十进制数字，通常将其用作千位分隔符：\n```csharp\npublic const long BillionsAndBillions = 100_000_000_000;\n```\n>数字分隔符也可以与 decimal、float 和 double 类型一起使用\n```csharp\npublic const double AvogadroConstant = 6.022_140_857_747_474e23;\npublic const decimal GoldenRatio = 1.618_033_988_749_894_848_204_586_834_365_638_117_720_309_179M;\n```\n## <span style=\"color:#0366d6;\">元组</span>\n>命名元组的新语言和库支持简化了设计工作：与类和结构一样，使用数据结构存储多个元素，但不定义行为。元组是包含多个字段以表示数据成员的轻量级数据结构,C# 7以前都是未命名的，只能通过 Item1 和 Item2 等引用，C# 7以后可以命名元祖的名字\n### 命名元组和未命名元组\n```csharp\nvar unnamed = (\"one\", \"two\");\n```\n\n```csharp\nvar named = (first: \"one\", second: \"two\");```\n\n### 赋值和元组\n>有相同元素数量的元组类型之间赋值，其中每个右侧元素都可被隐式转换为相应的左侧元素\n```csharp\n// The 'arity' and 'shape' of all these tuples are compatible. \n// The only difference is the field names being used.\nvar unnamed = (42, \"The meaning of life\");\nvar anonymous = (16, \"a perfect square\");\nvar named = (Answer: 42, Message: \"The meaning of life\");\nvar differentNamed = (SecretConstant: 42, Label: \"The meaning of life\");\n```\n>前两个变量（unnamed 和 anonymous）没有为元素提供语义名称。 字段名称为 Item1 和 Item2。 后两个变量（named 和 differentName）为元素提供了语义名称。 这两个元组具有不同的元素名称\n```csharp\nunnamed = named;\n\nnamed = unnamed;\n// 'named' still has fields that can be referred to\n// as 'answer', and 'message':\nConsole.WriteLine($\"{named.Answer}, {named.Message}\");\n\n// unnamed to unnamed:\nanonymous = unnamed;\n\n// named tuples.\nnamed = differentNamed;\n// The field names are not assigned. 'named' still has \n// fields that can be referred to as 'answer' and 'message':\nConsole.WriteLine($\"{named.Answer}, {named.Message}\");\n\n// With implicit conversions:\n// int can be implicitly converted to long\n(long, string) conversion = named;\n```\n### 作为方法返回值的元组\n>元组最常见的用途之一是作为方法返回值\n```csharp\nprivate static (double, double, int) ComputeSumAndSumOfSquares(IEnumerable<double> sequence)\n{\n    double sum = 0;\n    double sumOfSquares = 0;\n    int count = 0;\n\n    foreach (var item in sequence)\n    {\n        count++;\n        sum += item;\n        sumOfSquares += item * item;\n    }\n\n    return (sum, sumOfSquares, count);\n}\n```\n>建议为从方法返回的元组的元素提供语义名称\n```csharp\nprivate static (int Count, double Sum, double SumOfSquares) ComputeSumAndSumOfSquares(IEnumerable<double> sequence)\n{\n   //...\n}\n         \n```\n### 析构\n>通过对方法返回的元组进行析构，可以解封元组中的所有项\n```csharp\n(int count, double sum, double sumOfSquares) = ComputeSumAndSumOfSquares(sequence);\n\n```\n>在括号外使用 var 关键字，隐式声明元组中每个字段的类型化变量\n```csharp\nvar (sum, sumOfSquares, count) = ComputeSumAndSumOfSquares(sequence);\n```\n>在括号内将 var 关键字与任意或全部变量声明结合使用\n```csharp\n(double sum, var sumOfSquares, var count) = ComputeSumAndSumOfSquares(sequence);\n```\n### 析构用户定义类型\n>定义一个或多个赋值给任意数量的 out 变量的 Deconstruct 方法\n```csharp\npublic class Person\n{\n    public string FirstName { get; }\n    public string LastName { get; }\n\n    public Person(string first, string last)\n    {\n        FirstName = first;\n        LastName = last;\n    }\n\n    public void Deconstruct(out string firstName, out string lastName)\n    {\n        firstName = FirstName;\n        lastName = LastName;\n    }\n}\n```\n>该析构方法支持从 Person 赋值给两个表示 FirstName 和 LastName 属性的字符串\n```csharp\nvar p = new Person(\"Althea\", \"Goodwin\");\nvar (first, last) = p;\n```\n>Deconstruct 方法可以是一种扩展方法，用于解封对象的可访问数据成员。\n```csharp\npublic class Student : Person\n{\n    public double GPA { get; }\n    public Student(string first, string last, double gpa) :\n        base(first, last)\n    {\n        GPA = gpa;\n    }\n}\n\npublic static class Extensions\n{\n    public static void Deconstruct(this Student s, out string first, out string last, out double gpa)\n    {\n        first = s.FirstName;\n        last = s.LastName;\n        gpa = s.GPA;\n    }\n}\n```\n>析构运算符不参与测试相等。 下面的示例生成编译器错误 CS0019\n```csharp\nPerson p = new Person(\"Althea\", \"Goodwin\");\nif ((\"Althea\", \"Goodwin\") == p)\n    Console.WriteLine(p);\n```\n### 元组作为 out 参数\n>元组自身可用作 out 参数 。不要与前面提到的析构函数部分中的任何多义性混淆。在方法调用中，只需描述元组的形状：\n```csharp\nDictionary<int, (int, string)> dict = new Dictionary<int, (int, string)>();\ndict.Add(1, (234, \"First!\"));\ndict.Add(2, (345, \"Second\"));\ndict.Add(3, (456, \"Last\"));\n\n// TryGetValue already demonstrates using out parameters\ndict.TryGetValue(2, out (int num, string place) pair);\n\nConsole.WriteLine($\"{pair.num}: {pair.place}\");\n\n/*\n * Output:\n * 345: Second\n */\n```\n>还可以使用 unnamed 元组，并将其字段作为 Item1 和 Item2 引用\n```csharp\ndict.TryGetValue(2, out (int, string) pair);\n// ...\nConsole.WriteLine($\"{pair.Item1}: {pair.Item2}\");\n```\n## <span style=\"color:#0366d6;\">弃元</span>\n>是一种在应用程序代码中人为取消使用的临时虚拟变量。 弃元相当于未赋值的变量；\n通过将下划线 (_) 赋给一个变量作为其变量名，指示该变量为一个占位符变量。\n```csharp\n(_, _, area) = city.GetCityInformation(cityName);\n```\n### 元组和对象析构\n<details>\n<summary>展开查看 </summary>\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        var (_, _, _, pop1, _, pop2) = QueryCityDataForYears(\"New York City\", 1960, 2010);\n\n        Console.WriteLine($\"Population change, 1960 to 2010: {pop2 - pop1:N0}\");\n    }\n   \n    private static (string, double, int, int, int, int) QueryCityDataForYears(string name, int year1, int year2)\n    {\n        int population1 = 0, population2 = 0;\n        double area = 0;\n      \n        if (name == \"New York City\")\n        {\n            area = 468.48; \n            if (year1 == 1960)\n            {\n                population1 = 7781984;\n            }\n            if (year2 == 2010)\n            {\n                population2 = 8175133;\n            }\n            return (name, area, year1, population1, year2, population2);\n        }\n\n        return (\"\", 0, 0, 0, 0, 0);\n    }\n}\n// The example displays the following output:\n//     \n```\n</details>\n\n>类、结构或接口的 Deconstruct 方法还允许从对象中检索和析构一组特定的数据。 如果想只使用析构值的一个子集时，可使用弃元。\n<details>\n<summary>展开查看 </summary>\n\n```csharp\nusing System;\n\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string MiddleName { get; set; }\n    public string LastName { get; set; }\n    public string City { get; set; }\n    public string State { get; set; }\n\n    public Person(string fname, string mname, string lname, \n                  string cityName, string stateName)\n    {\n        FirstName = fname;\n        MiddleName = mname;\n        LastName = lname;\n        City = cityName;\n        State = stateName;\n    }\n\n    // Return the first and last name.\n    public void Deconstruct(out string fname, out string lname)\n    {\n        fname = FirstName;\n        lname = LastName;\n    }\n\n    public void Deconstruct(out string fname, out string mname, out string lname)\n    {\n        fname = FirstName;\n        mname = MiddleName;\n        lname = LastName;\n    }\n\n    public void Deconstruct(out string fname, out string lname, \n                            out string city, out string state)\n    {\n        fname = FirstName;\n        lname = LastName;\n        city = City;\n        state = State;\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        var p = new Person(\"John\", \"Quincy\", \"Adams\", \"Boston\", \"MA\");\n\n        // <Snippet1>\n        // Deconstruct the person object.\n        var (fName, _, city, _) = p;\n        Console.WriteLine($\"Hello {fName} of {city}!\");\n        // The example displays the following output:\n        //      Hello John of Boston!\n        // </Snippet1>\n    }\n}\n// The example displays the following output:\n//    Hello John Adams of Boston, MA!\n```\n</details>\n\n### 使用 switch 和 is 的模式匹配\n```csharp\nusing System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      object[] objects = { CultureInfo.CurrentCulture, \n                           CultureInfo.CurrentCulture.DateTimeFormat, \n                           CultureInfo.CurrentCulture.NumberFormat,\n                           new ArgumentException(), null };\n      foreach (var obj in objects)\n         ProvidesFormatInfo(obj);\n   }\n\n   private static void ProvidesFormatInfo(object obj)         \n   {\n      switch (obj)\n      {\n         case IFormatProvider fmt:\n            Console.WriteLine($\"{fmt} object\");\n            break;\n         case null:\n            Console.Write(\"A null object reference: \");\n            Console.WriteLine(\"Its use could result in a NullReferenceException\");\n            break;\n         case object _:\n            Console.WriteLine(\"Some object type without format information\");\n            break;\n      }\n   }\n}\n```\n### 使用 out 参数调用方法\n>因为该示例侧重验证日期字符串，而不是解析它来提取日期，所以方法的 out 参数为占位符。\n```csharp\nusing System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] dateStrings = {\"05/01/2018 14:57:32.8\", \"2018-05-01 14:57:32.8\",\n                              \"2018-05-01T14:57:32.8375298-04:00\", \"5/01/2018\",\n                              \"5/01/2018 14:57:32.80 -07:00\", \n                              \"1 May 2018 2:57:32.8 PM\", \"16-05-2018 1:00:32 PM\", \n                              \"Fri, 15 May 2018 20:10:57 GMT\" };\n      foreach (string dateString in dateStrings)\n      {\n         if (DateTime.TryParse(dateString, out _)) \n            Console.WriteLine($\"'{dateString}': valid\");\n         else\n            Console.WriteLine($\"'{dateString}': invalid\");\n      }\n   }\n}\n```\n### 独立弃元\n>可使用独立弃元来指示要忽略的任何变量\n```csharp\nusing System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      ExecuteAsyncMethods().Wait();\n   }\n\n   private static async Task ExecuteAsyncMethods()\n   {    \n      Console.WriteLine(\"About to launch a task...\");\n      _ = Task.Run(() => { var iterations = 0;  \n                           for (int ctr = 0; ctr < int.MaxValue; ctr++)\n                              iterations++;\n                           Console.WriteLine(\"Completed looping operation...\");\n                           throw new InvalidOperationException();\n                         });\n      await Task.Delay(5000);                        \n      Console.WriteLine(\"Exiting after 5 second delay\");\n   }\n}\n```\n>_ 也是有效标识符。 当在支持的上下文之外使用时，_ 不视为占位符，而视为有效变量。 如果名为 _ 的标识符已在范围内，则使用 _ 作为独立占位符可能导致\n```csharp\nprivate static void ShowValue(int _)\n{\n   byte[] arr = { 0, 0, 1, 2 };\n   _ = BitConverter.ToInt32(arr, 0);\n   Console.WriteLine(_);\n}\n// The example displays the following output:\n//    \n```\n```csharp\nprivate static bool RoundTrips(int _)\n{\n   string value = _.ToString();\n   int newValue = 0;\n   _ = Int32.TryParse(value, out newValue);\n   return _ == newValue;\n}\n// The example displays the following compiler error:\n//      error CS0029: Cannot implicitly convert type 'bool' to 'int'   \n```\n## <span style=\"color:#0366d6;\">模式匹配</span>\n### is 类型模式表达式\n>过使用 is 表达式的扩展在测试成功时对变量赋值\n```csharp\npublic static double ComputeAreaModernIs(object shape)\n{\n    if (shape is Square s)\n        return s.Side * s.Side;\n    else if (shape is Circle c)\n        return c.Radius * c.Radius * Math.PI;\n    else if (shape is Rectangle r)\n        return r.Height * r.Length;\n    // elided\n    throw new ArgumentException(\n        message: \"shape is not a recognized shape\",\n        paramName: nameof(shape));\n}\n```\n### 匹配 switch 语句\n>switch 语句支持的唯一模式是常量模式。 它进一步限制为数字类型和 string 类型。 这些限制已移除，现在可以使用类型模式编写 switch 语句\n```csharp\npublic static double ComputeAreaModernSwitch(object shape)\n{\n    switch (shape)\n    {\n        case Square s:\n            return s.Side * s.Side;\n        case Circle c:\n            return c.Radius * c.Radius * Math.PI;\n        case Rectangle r:\n            return r.Height * r.Length;\n        default:\n            throw new ArgumentException(\n                message: \"shape is not a recognized shape\",\n                paramName: nameof(shape));\n    }\n}\n```\n### case 表达式中的 when 语句\n>可以通过对 case 标签使用 when 子句，为面积为 0 的那些形状创建特殊 case。 边长为 0 的正方形，或半径为 0 的圆形的面积为 0。 可通过对 case 标签使用 when 语句来指定该条件\n```csharp\npublic static double ComputeArea_Version3(object shape)\n{\n    switch (shape)\n    {\n        case Square s when s.Side == 0:\n        case Circle c when c.Radius == 0:\n            return 0;\n\n        case Square s:\n            return s.Side * s.Side;\n        case Circle c:\n            return c.Radius * c.Radius * Math.PI;\n        default:\n            throw new ArgumentException(\n                message: \"shape is not a recognized shape\",\n                paramName: nameof(shape));\n    }\n}\n```\n### case 表达式中的 var 声明\n>第一条规则是 var 声明遵循正常的类型推理规则：推理出类型是 switch 表达式的静态类型。 根据此规则，类型始终匹配。\n第二个规则是，var 声明没有其他类型模式表达式中包含的 null 检查。 也就是说，变量可为 NULL，只有在这种情况下，才必须执行 NULL 检查。\n这两个规则表示，在许多情况下，case 表达式中的 var 声明匹配与 default 表达式相同的条件。 因为任何非默认事例都优先于 default 事例，所以永远不会执行 default 事例\n```csharp\nstatic object CreateShape(string shapeDescription)\n{\n    switch (shapeDescription)\n    {\n        case \"circle\":\n            return new Circle(2);\n\n        case \"square\":\n            return new Square(4);\n        \n        case \"large-circle\":\n            return new Circle(12);\n\n        case var o when (o?.Trim().Length ?? 0) == 0:\n            // white space\n            return null;\n        default:\n            return \"invalid shape description\";\n    }            \n}\n```\n## <span style=\"color:#0366d6;\">ref</span>\n### ref 返回值和 ref 局部变量示例\n>通过调用 GetBookByTitle 方法，可按引用返回个别 book 对象。\n<details>\n<summary>展开查看 </summary>\n\n```csharp\npublic class Book\n{\n    public string Author;\n    public string Title;\n}\n\npublic class BookCollection\n{\n    private Book[] books = { new Book { Title = \"Call of the Wild, The\", Author = \"Jack London\" },\n                        new Book { Title = \"Tale of Two Cities, A\", Author = \"Charles Dickens\" }\n                       };\n    private Book nobook = null;\n\n    public ref Book GetBookByTitle(string title)\n    {\n        for (int ctr = 0; ctr < books.Length; ctr++)\n        {\n            if (title == books[ctr].Title)\n                return ref books[ctr];\n        }\n        return ref nobook;\n    }\n\n    public void ListBooks()\n    {\n        foreach (var book in books)\n        {\n            Console.WriteLine($\"{book.Title}, by {book.Author}\");\n        }\n        Console.WriteLine();\n    }\n}\n```\n</details>\n\n>调用方将 GetBookByTitle 方法所返回的值存储为 ref 局部变量时，调用方对返回值所做的更改将反映在 BookCollection 对象中，如下例所示\n```csharp\nvar bc = new BookCollection();\nbc.ListBooks();\n\nref var book = ref bc.GetBookByTitle(\"Call of the Wild, The\");\nif (book != null)\n    book = new Book { Title = \"Republic, The\", Author = \"Plato\" };\nbc.ListBooks();\n// The example displays the following output:\n//       Call of the Wild, The, by Jack London\n//       Tale of Two Cities, A, by Charles Dickens\n//       \n//       Republic, The, by Plato\n//       Tale of Two Cities, A, by Charles Dickens\n```\n### Ref readonly 局部变量\n>Ref readonly 局部变量用于指代在其签名中具有 ref readonly 并使用 return ref 的方法或属性返回的值。 ref readonly 变量将 ref 本地变量的属性与 readonly 变量结合使用：它是所分配到的存储的别名，且无法修改\n```csharp\nref readonly Vector3 Test1()\n{\n    // can pass an RValue as \"in\" (via a temp copy)\n    // but the result is not safe to return\n    // because the RValue argument was not safe to return by reference\n    return ref Test2(default(Vector3));\n}\n\nref readonly Vector3 Test2(in Vector3 r)\n{\n    // this is ok, r is returnable\n    return ref r;\n}\n```\n### Ref 结构类型\n>将 ref 修饰符添加到 struct 声明定义了该类型的实例必须为堆栈分配。 换言之，永远不能在作为另一类的成员的堆上创建这些类型的实例。\n\n- 不能对ref struct装箱。无法向属于object、dynamic或任何接口类型的变量分配 ref struct 类型。\n- ref struct 类型不能实现接口。\n- 不能将 ref struct 声明为类或常规结构的字段成员。这包括声明自动实现的属性，后者会创建一个由编译器生成的支持字段。\n- 不能声明异步方法中属于 ref struct 类型的本地变量。不能在返回类似Task、Task<TResult>或Task 类型的同  步方法中声明它们。\n- 无法在迭代器中声明ref struct本地变量。\n- 无法捕获Lambda表达式或本地函数中的ref struct变量。\n\n>可以组合修饰符以将结构声明为 readonly ref。 readonly ref struct 兼具 ref struct 和 readonly struct \n\n# <span style=\"color:#0366d6;\">C#7.1语法</span>\n## <span style=\"color:#0366d6;\">异步 main 方法</span>\n>异步 Main 方法使你能够在 Main 方法中使用 await 关键字。 在过去，需要编写\n```csharp\nstatic int Main()\n{\n    return DoAsyncWork().GetAwaiter().GetResult();\n}\n```\n>现在\n```csharp\nstatic async Task<int> Main()\n{\n    // This could also be replaced with the body\n    // DoAsyncWork, including its await expressions:\n    return await DoAsyncWork();\n}\n```\n## <span style=\"color:#0366d6;\">泛型类型参数的模式匹配</span>\n>自 C# 7.1 起，is 和 switch 类型模式的模式表达式的类型可能为泛型类型参数。 这可能在检查 struct 或 class 类型且要避免装箱时最有用。\n```csharp\nvoid M<T1, T2>(T1 t1, T2 t2)\n{\n    switch (t2)\n    {\n        case T1 _:\n            break;\n        case T2 _:\n            break;\n        default:\n            break;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">元组</span>\n### 元组名称投影\n>元组名称投影，如果未提供显式名称，上述名称将优先于任何投影的名称。\n以下使用名称explicitFieldOne和explicitFieldTwo而不是localVariableOne和localVariableTwo\n```csharp\nvar localVariableOne = 5;\nvar localVariableTwo = \"some text\";\n\nvar tuple = (explicitFieldOne: localVariableOne, explicitFieldTwo: localVariableTwo);\n\n```\n>以下初始化表达式具有字段名称 Item1其值为 42和 stringContent（其值为“The answer to everything”）\n\n```csharp\nvar stringContent = \"The answer to everything\";\nvar mixedTuple = (42, stringContent);         \n```\n## <span style=\"color:#0366d6;\">默认文本表达式</span>\n>默认文本表达式是针对默认值表达式的一项增强功能。 这些表达式将变量初始化为默认值。 过去会这么编写\n```csharp\nFunc<string, bool> whereClause = default(Func<string, bool>);\n```\n>现在，可以省略掉初始化右侧的类型：\n```csharp\nFunc<string, bool> whereClause = default;\n```\n## <span style=\"color:#0366d6;\">引用程序集生成</span>\n>有两个新编译器选项可生成仅引用程序集：-refout 和 -refonly\n# <span style=\"color:#0366d6;\">C#7.2语法</span>\n## <span style=\"color:#0366d6;\">非尾随命名参数</span>\n>没有后接任何位置实参或\n```csharp\n以 C# 7.2 开头，则它们就有效并用在正确位置 。 在以下示例中，形参 orderNum 位于正确的位置，但未显式命名。\n```\n>以 C# 7.2 开头，则它们就有效并用在正确位置 。 在以下示例中，形参 orderNum 位于正确的位置，但未显式命名。\n```csharp\nPrintOrderDetails(sellerName: \"Gift Shop\", 31, productName: \"Red Mug\");\n```\n>遵循任何无序命名参数的位置参数无效。\n```csharp\n// This generates CS1738: Named argument specifications must appear after all fixed arguments have been specified.\nPrintOrderDetails(productName: \"Red Mug\", 31, \"Gift Shop\");\n```\n## <span style=\"color:#0366d6;\">in</span>\n>作为 in 参数传递的变量在方法调用中传递之前必须进行初始化。 但是，所调用的方法可能不会分配值或修改参数。\nin 参数修饰符可在 C# 7.2 及更高版本中使用。 以前的版本生成编译器错误 CS8107（“‘readonly 引用’功能在 C# 7.0 中不可用。 请使用语言版本 7.2 或更高版本。”）\n\n>通过理解使用 in 参数的动机，可以理解使用按值方法和使用 in 参数方法的重载决策规则。 定义使用 in 参数的方法是一项潜在的性能优化。 某些 struct 类型参数可能很大，在紧凑的循环或关键代码路径中调用方法时，复制这些结构的成本就很高。 方法声明 in 参数以指定参数可能按引用安全传递，因为所调用的方法不修改该参数的状态。 按引用传递这些参数可以避免（可能产生的）高昂的复制成本。\n\n```csharp\nstatic void Method(int argument)\n{\n    // implementation removed\n}\n\nstatic void Method(in int argument)\n{\n    // implementation removed\n}\n\nMethod(5); // Calls overload passed by value\nMethod(5L); // CS1503: no implicit conversion from long to int\nshort s = 0;\nMethod(s); // Calls overload passed by value.\nMethod(in s); // CS1503: cannot convert from in short to in int\nint i = 42;\nMethod(i); // Calls overload passed by value\nMethod(in i); // passed by readonly reference, explicitly using `in`\n```\n## <span style=\"color:#0366d6;\">private protected 访问修饰符</span>\n>新的复合访问修饰符：private protected 指示可通过包含同一程序集中声明的类或派生类来访问成员。 虽然 protected internal 允许通过同一程序集中的类或派生类进行访问，但 private protected 限制对同一程序集中声明的派生类的访问。\n```csharp\n// Assembly1.cs  \n// Compile with: /target:library  \npublic class BaseClass\n{\n    private protected int myValue = 0;\n}\n\npublic class DerivedClass1 : BaseClass\n{\n    void Access()\n    {\n        var baseObject = new BaseClass();\n\n        // Error CS1540, because myValue can only be accessed by\n        // classes derived from BaseClass.\n        // baseObject.myValue = 5;  \n\n        // OK, accessed through the current derived class instance\n        myValue = 5;\n    }\n}\n```\n```csharp\n// Assembly2.cs  \n// Compile with: /reference:Assembly1.dll  \nclass DerivedClass2 : BaseClass\n{\n    void Access()\n    {\n        // Error CS0122, because myValue can only be\n        // accessed by types in Assembly1\n        // myValue = 10;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">数值文字中的前导下划线</span>\n>C# 7.0 中实现了对数字分隔符的支持，但这不允许文字值的第一个字符是 _。 十六进制文本和二进制文件现可以 _ 开头。\n```csharp\nint binaryValue = 0b_0101_0101;\n```\n## <span style=\"color:#0366d6;\">条件 ref 表达式</span>\n>条件表达式可能生成 ref 结果而不是值\n```csharp\nref var r = ref (arr != null ? ref arr[0] : ref otherArr[0]);\n```\n## <span style=\"color:#0366d6;\">安全高效的代码的增强功能</span>\n>todo\n## <span style=\"color:#0366d6;\">C# 7.3</span>\n### <span style=\"color:#0366d6;\">相等和元组</span>\n>从 C# 7.3 开始，元组类型支持 == 和 != 运算符。 这些运算符按顺序将左边参数的每个成员与右边参数的每个成员进行比较。 这些比较将发生短路。 只要有一对不相等，它们即会停止计算成员。 以下代码示例使用 ==，但比较规则均适用于 !=。\n```csharp\nvar left = (a: 5, b: 10);\nvar right = (a: 5, b: 10);\nConsole.WriteLine(left == right); // displays 'true'\n```\n>元组成员名称不参与相等测试。 但是，如果其中一个操作数是含有显式名称的元组文本，则当这些名称与其他操作数的名称不匹配时，编译器将生成警告 CS8383。 在两个操作数都为元组文本的情况下，警告位于右侧操作数，\n```csharp\n(int a, string b) pair = (1, \"Hello\");\n(int z, string y) another = (1, \"Hello\");\nConsole.WriteLine(pair == another); // true. Member names don't participate.\nConsole.WriteLine(pair == (z: 1, y: \"Hello\")); // warning: literal contains different member nam\n```\n### <span style=\"color:#0366d6;\">其它todo</span>\n\n\n","source":"_posts/csharpgrammar-9.md","raw":"---\ntitle: C#7.0语法\ndate: 2020-02-28\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#7.0语法  \n7.0-2017-05-.NET Framework 4.7\n7.1-2017-08-.NET Core 2.0\n7.2-2017-10\n7.3-2018-03-.NET Framework 4.8 .NET Core 2.1 .NET Core 2.2\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#7.0语法</span>\n## <span style=\"color:#0366d6;\">out 变量</span>\n>支持 out 参数的现有语法已在此版本中得到改进。 现在可以在方法调用的参数列表中声明 out 变量，而不是编写单独的声明语句\n```csharp\nif (int.TryParse(input, out int result))\n    Console.WriteLine(result);\nelse\n    Console.WriteLine(\"Could not parse input\");\n```\n>隐式类型的局部变量\n```csharp\nif (int.TryParse(input, out var answer))\n    Console.WriteLine(answer);\nelse\n    Console.WriteLine(\"Could not parse input\");\n```\n## <span style=\"color:#0366d6;\">更多的 expression-bodied 成员</span>\n>C# 6 为成员函数和只读属性引入了 expression-bodied 成员。 C# 7.0 扩展了可作为表达式实现的允许的成员。 在 C# 7.0 中，你可以在属性 和索引器 上实现构造函数 、终结器 以及 get 和 set 访问器。\n\n\n```csharp\n// Expression-bodied constructor\npublic ExpressionMembersExample(string label) => this.Label = label;\n\n// Expression-bodied finalizer\n~ExpressionMembersExample() => Console.Error.WriteLine(\"Finalized!\");\n\nprivate string label;\n\n// Expression-bodied get / set accessors.\npublic string Label\n{\n    get => label;\n    set => this.label = value ?? \"Default label\";\n}\n```\n## <span style=\"color:#0366d6;\">本地函数</span>\n>本地函数使你能够在另一个方法的上下文内声明方法 。 本地函数使得类的阅读者更容易看到本地方法仅从声明它的上下文中调用。\n```csharp\npublic static IEnumerable<char> AlphabetSubset3(char start, char end)\n{\n    if (start < 'a' || start > 'z')\n        throw new ArgumentOutOfRangeException(paramName: nameof(start), message: \"start must be a letter\");\n    if (end < 'a' || end > 'z')\n        throw new ArgumentOutOfRangeException(paramName: nameof(end), message: \"end must be a letter\");\n\n    if (end <= start)\n        throw new ArgumentException($\"{nameof(end)} must be greater than {nameof(start)}\");\n\n    return alphabetSubsetImplementation();\n\n    IEnumerable<char> alphabetSubsetImplementation()\n    {\n        for (var c = start; c < end; c++)\n            yield return c;\n    }\n}\n```\n>可以对 async 方法采用相同的技术，以确保在异步工作开始之前引发由参数验证引起的异常\n```csharp\npublic Task<string> PerformLongRunningWork(string address, int index, string name)\n{\n    if (string.IsNullOrWhiteSpace(address))\n        throw new ArgumentException(message: \"An address is required\", paramName: nameof(address));\n    if (index < 0)\n        throw new ArgumentOutOfRangeException(paramName: nameof(index), message: \"The index must be non-negative\");\n    if (string.IsNullOrWhiteSpace(name))\n        throw new ArgumentException(message: \"You must supply a name\", paramName: nameof(name));\n\n    return longRunningWorkImplementation();\n\n    async Task<string> longRunningWorkImplementation()\n    {\n        var interimResult = await FirstWork(address);\n        var secondResult = await SecondStep(index, name);\n        return $\"The results are {interimResult} and {secondResult}. Enjoy.\";\n    }\n}\n```\n## <span style=\"color:#0366d6;\">throw表达式</span>\n>从 C# 7.0 开始，throw 可以用作表达式和语句。 这允许在以前不支持的上下文中引发异常\n### 条件运算符\n```csharp\nprivate static void DisplayFirstNumber(string[] args)\n{\n   string arg = args.Length >= 1 ? args[0] : \n                              throw new ArgumentException(\"You must supply an argument\");\n   if (Int64.TryParse(arg, out var number))\n      Console.WriteLine($\"You entered {number:F0}\");\n   else\n      Console.WriteLine($\"{arg} is not a number.\");                            \n}\n```\n\n### null 合并运算符\n```csharp\npublic string Name\n{\n    get => name;\n    set => name = value ?? \n        throw new ArgumentNullException(paramName: nameof(value), message: \"Name cannot be null\");\n}  \n```\n### expression-bodied lambda 或方法\n```csharp\nDateTime ToDateTime(IFormatProvider provider) => \n         throw new InvalidCastException(\"Conversion to a DateTime is not supported.\");\n```\n## <span style=\"color:#0366d6;\">数字文本语法改进</span>\n>C# 7.0 包括两项新功能，可用于以最可读的方式写入数字来用于预期用途：二进制文本和数字分隔符\n```csharp\npublic const int Sixteen =   0b0001_0000;\npublic const int ThirtyTwo = 0b0010_0000;\npublic const int SixtyFour = 0b0100_0000;\npublic const int OneHundredTwentyEight = 0b1000_0000;\n```\n>对于十进制数字，通常将其用作千位分隔符：\n```csharp\npublic const long BillionsAndBillions = 100_000_000_000;\n```\n>数字分隔符也可以与 decimal、float 和 double 类型一起使用\n```csharp\npublic const double AvogadroConstant = 6.022_140_857_747_474e23;\npublic const decimal GoldenRatio = 1.618_033_988_749_894_848_204_586_834_365_638_117_720_309_179M;\n```\n## <span style=\"color:#0366d6;\">元组</span>\n>命名元组的新语言和库支持简化了设计工作：与类和结构一样，使用数据结构存储多个元素，但不定义行为。元组是包含多个字段以表示数据成员的轻量级数据结构,C# 7以前都是未命名的，只能通过 Item1 和 Item2 等引用，C# 7以后可以命名元祖的名字\n### 命名元组和未命名元组\n```csharp\nvar unnamed = (\"one\", \"two\");\n```\n\n```csharp\nvar named = (first: \"one\", second: \"two\");```\n\n### 赋值和元组\n>有相同元素数量的元组类型之间赋值，其中每个右侧元素都可被隐式转换为相应的左侧元素\n```csharp\n// The 'arity' and 'shape' of all these tuples are compatible. \n// The only difference is the field names being used.\nvar unnamed = (42, \"The meaning of life\");\nvar anonymous = (16, \"a perfect square\");\nvar named = (Answer: 42, Message: \"The meaning of life\");\nvar differentNamed = (SecretConstant: 42, Label: \"The meaning of life\");\n```\n>前两个变量（unnamed 和 anonymous）没有为元素提供语义名称。 字段名称为 Item1 和 Item2。 后两个变量（named 和 differentName）为元素提供了语义名称。 这两个元组具有不同的元素名称\n```csharp\nunnamed = named;\n\nnamed = unnamed;\n// 'named' still has fields that can be referred to\n// as 'answer', and 'message':\nConsole.WriteLine($\"{named.Answer}, {named.Message}\");\n\n// unnamed to unnamed:\nanonymous = unnamed;\n\n// named tuples.\nnamed = differentNamed;\n// The field names are not assigned. 'named' still has \n// fields that can be referred to as 'answer' and 'message':\nConsole.WriteLine($\"{named.Answer}, {named.Message}\");\n\n// With implicit conversions:\n// int can be implicitly converted to long\n(long, string) conversion = named;\n```\n### 作为方法返回值的元组\n>元组最常见的用途之一是作为方法返回值\n```csharp\nprivate static (double, double, int) ComputeSumAndSumOfSquares(IEnumerable<double> sequence)\n{\n    double sum = 0;\n    double sumOfSquares = 0;\n    int count = 0;\n\n    foreach (var item in sequence)\n    {\n        count++;\n        sum += item;\n        sumOfSquares += item * item;\n    }\n\n    return (sum, sumOfSquares, count);\n}\n```\n>建议为从方法返回的元组的元素提供语义名称\n```csharp\nprivate static (int Count, double Sum, double SumOfSquares) ComputeSumAndSumOfSquares(IEnumerable<double> sequence)\n{\n   //...\n}\n         \n```\n### 析构\n>通过对方法返回的元组进行析构，可以解封元组中的所有项\n```csharp\n(int count, double sum, double sumOfSquares) = ComputeSumAndSumOfSquares(sequence);\n\n```\n>在括号外使用 var 关键字，隐式声明元组中每个字段的类型化变量\n```csharp\nvar (sum, sumOfSquares, count) = ComputeSumAndSumOfSquares(sequence);\n```\n>在括号内将 var 关键字与任意或全部变量声明结合使用\n```csharp\n(double sum, var sumOfSquares, var count) = ComputeSumAndSumOfSquares(sequence);\n```\n### 析构用户定义类型\n>定义一个或多个赋值给任意数量的 out 变量的 Deconstruct 方法\n```csharp\npublic class Person\n{\n    public string FirstName { get; }\n    public string LastName { get; }\n\n    public Person(string first, string last)\n    {\n        FirstName = first;\n        LastName = last;\n    }\n\n    public void Deconstruct(out string firstName, out string lastName)\n    {\n        firstName = FirstName;\n        lastName = LastName;\n    }\n}\n```\n>该析构方法支持从 Person 赋值给两个表示 FirstName 和 LastName 属性的字符串\n```csharp\nvar p = new Person(\"Althea\", \"Goodwin\");\nvar (first, last) = p;\n```\n>Deconstruct 方法可以是一种扩展方法，用于解封对象的可访问数据成员。\n```csharp\npublic class Student : Person\n{\n    public double GPA { get; }\n    public Student(string first, string last, double gpa) :\n        base(first, last)\n    {\n        GPA = gpa;\n    }\n}\n\npublic static class Extensions\n{\n    public static void Deconstruct(this Student s, out string first, out string last, out double gpa)\n    {\n        first = s.FirstName;\n        last = s.LastName;\n        gpa = s.GPA;\n    }\n}\n```\n>析构运算符不参与测试相等。 下面的示例生成编译器错误 CS0019\n```csharp\nPerson p = new Person(\"Althea\", \"Goodwin\");\nif ((\"Althea\", \"Goodwin\") == p)\n    Console.WriteLine(p);\n```\n### 元组作为 out 参数\n>元组自身可用作 out 参数 。不要与前面提到的析构函数部分中的任何多义性混淆。在方法调用中，只需描述元组的形状：\n```csharp\nDictionary<int, (int, string)> dict = new Dictionary<int, (int, string)>();\ndict.Add(1, (234, \"First!\"));\ndict.Add(2, (345, \"Second\"));\ndict.Add(3, (456, \"Last\"));\n\n// TryGetValue already demonstrates using out parameters\ndict.TryGetValue(2, out (int num, string place) pair);\n\nConsole.WriteLine($\"{pair.num}: {pair.place}\");\n\n/*\n * Output:\n * 345: Second\n */\n```\n>还可以使用 unnamed 元组，并将其字段作为 Item1 和 Item2 引用\n```csharp\ndict.TryGetValue(2, out (int, string) pair);\n// ...\nConsole.WriteLine($\"{pair.Item1}: {pair.Item2}\");\n```\n## <span style=\"color:#0366d6;\">弃元</span>\n>是一种在应用程序代码中人为取消使用的临时虚拟变量。 弃元相当于未赋值的变量；\n通过将下划线 (_) 赋给一个变量作为其变量名，指示该变量为一个占位符变量。\n```csharp\n(_, _, area) = city.GetCityInformation(cityName);\n```\n### 元组和对象析构\n<details>\n<summary>展开查看 </summary>\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Example\n{\n    public static void Main()\n    {\n        var (_, _, _, pop1, _, pop2) = QueryCityDataForYears(\"New York City\", 1960, 2010);\n\n        Console.WriteLine($\"Population change, 1960 to 2010: {pop2 - pop1:N0}\");\n    }\n   \n    private static (string, double, int, int, int, int) QueryCityDataForYears(string name, int year1, int year2)\n    {\n        int population1 = 0, population2 = 0;\n        double area = 0;\n      \n        if (name == \"New York City\")\n        {\n            area = 468.48; \n            if (year1 == 1960)\n            {\n                population1 = 7781984;\n            }\n            if (year2 == 2010)\n            {\n                population2 = 8175133;\n            }\n            return (name, area, year1, population1, year2, population2);\n        }\n\n        return (\"\", 0, 0, 0, 0, 0);\n    }\n}\n// The example displays the following output:\n//     \n```\n</details>\n\n>类、结构或接口的 Deconstruct 方法还允许从对象中检索和析构一组特定的数据。 如果想只使用析构值的一个子集时，可使用弃元。\n<details>\n<summary>展开查看 </summary>\n\n```csharp\nusing System;\n\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string MiddleName { get; set; }\n    public string LastName { get; set; }\n    public string City { get; set; }\n    public string State { get; set; }\n\n    public Person(string fname, string mname, string lname, \n                  string cityName, string stateName)\n    {\n        FirstName = fname;\n        MiddleName = mname;\n        LastName = lname;\n        City = cityName;\n        State = stateName;\n    }\n\n    // Return the first and last name.\n    public void Deconstruct(out string fname, out string lname)\n    {\n        fname = FirstName;\n        lname = LastName;\n    }\n\n    public void Deconstruct(out string fname, out string mname, out string lname)\n    {\n        fname = FirstName;\n        mname = MiddleName;\n        lname = LastName;\n    }\n\n    public void Deconstruct(out string fname, out string lname, \n                            out string city, out string state)\n    {\n        fname = FirstName;\n        lname = LastName;\n        city = City;\n        state = State;\n    }\n}\n\npublic class Example\n{\n    public static void Main()\n    {\n        var p = new Person(\"John\", \"Quincy\", \"Adams\", \"Boston\", \"MA\");\n\n        // <Snippet1>\n        // Deconstruct the person object.\n        var (fName, _, city, _) = p;\n        Console.WriteLine($\"Hello {fName} of {city}!\");\n        // The example displays the following output:\n        //      Hello John of Boston!\n        // </Snippet1>\n    }\n}\n// The example displays the following output:\n//    Hello John Adams of Boston, MA!\n```\n</details>\n\n### 使用 switch 和 is 的模式匹配\n```csharp\nusing System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      object[] objects = { CultureInfo.CurrentCulture, \n                           CultureInfo.CurrentCulture.DateTimeFormat, \n                           CultureInfo.CurrentCulture.NumberFormat,\n                           new ArgumentException(), null };\n      foreach (var obj in objects)\n         ProvidesFormatInfo(obj);\n   }\n\n   private static void ProvidesFormatInfo(object obj)         \n   {\n      switch (obj)\n      {\n         case IFormatProvider fmt:\n            Console.WriteLine($\"{fmt} object\");\n            break;\n         case null:\n            Console.Write(\"A null object reference: \");\n            Console.WriteLine(\"Its use could result in a NullReferenceException\");\n            break;\n         case object _:\n            Console.WriteLine(\"Some object type without format information\");\n            break;\n      }\n   }\n}\n```\n### 使用 out 参数调用方法\n>因为该示例侧重验证日期字符串，而不是解析它来提取日期，所以方法的 out 参数为占位符。\n```csharp\nusing System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string[] dateStrings = {\"05/01/2018 14:57:32.8\", \"2018-05-01 14:57:32.8\",\n                              \"2018-05-01T14:57:32.8375298-04:00\", \"5/01/2018\",\n                              \"5/01/2018 14:57:32.80 -07:00\", \n                              \"1 May 2018 2:57:32.8 PM\", \"16-05-2018 1:00:32 PM\", \n                              \"Fri, 15 May 2018 20:10:57 GMT\" };\n      foreach (string dateString in dateStrings)\n      {\n         if (DateTime.TryParse(dateString, out _)) \n            Console.WriteLine($\"'{dateString}': valid\");\n         else\n            Console.WriteLine($\"'{dateString}': invalid\");\n      }\n   }\n}\n```\n### 独立弃元\n>可使用独立弃元来指示要忽略的任何变量\n```csharp\nusing System;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      ExecuteAsyncMethods().Wait();\n   }\n\n   private static async Task ExecuteAsyncMethods()\n   {    \n      Console.WriteLine(\"About to launch a task...\");\n      _ = Task.Run(() => { var iterations = 0;  \n                           for (int ctr = 0; ctr < int.MaxValue; ctr++)\n                              iterations++;\n                           Console.WriteLine(\"Completed looping operation...\");\n                           throw new InvalidOperationException();\n                         });\n      await Task.Delay(5000);                        \n      Console.WriteLine(\"Exiting after 5 second delay\");\n   }\n}\n```\n>_ 也是有效标识符。 当在支持的上下文之外使用时，_ 不视为占位符，而视为有效变量。 如果名为 _ 的标识符已在范围内，则使用 _ 作为独立占位符可能导致\n```csharp\nprivate static void ShowValue(int _)\n{\n   byte[] arr = { 0, 0, 1, 2 };\n   _ = BitConverter.ToInt32(arr, 0);\n   Console.WriteLine(_);\n}\n// The example displays the following output:\n//    \n```\n```csharp\nprivate static bool RoundTrips(int _)\n{\n   string value = _.ToString();\n   int newValue = 0;\n   _ = Int32.TryParse(value, out newValue);\n   return _ == newValue;\n}\n// The example displays the following compiler error:\n//      error CS0029: Cannot implicitly convert type 'bool' to 'int'   \n```\n## <span style=\"color:#0366d6;\">模式匹配</span>\n### is 类型模式表达式\n>过使用 is 表达式的扩展在测试成功时对变量赋值\n```csharp\npublic static double ComputeAreaModernIs(object shape)\n{\n    if (shape is Square s)\n        return s.Side * s.Side;\n    else if (shape is Circle c)\n        return c.Radius * c.Radius * Math.PI;\n    else if (shape is Rectangle r)\n        return r.Height * r.Length;\n    // elided\n    throw new ArgumentException(\n        message: \"shape is not a recognized shape\",\n        paramName: nameof(shape));\n}\n```\n### 匹配 switch 语句\n>switch 语句支持的唯一模式是常量模式。 它进一步限制为数字类型和 string 类型。 这些限制已移除，现在可以使用类型模式编写 switch 语句\n```csharp\npublic static double ComputeAreaModernSwitch(object shape)\n{\n    switch (shape)\n    {\n        case Square s:\n            return s.Side * s.Side;\n        case Circle c:\n            return c.Radius * c.Radius * Math.PI;\n        case Rectangle r:\n            return r.Height * r.Length;\n        default:\n            throw new ArgumentException(\n                message: \"shape is not a recognized shape\",\n                paramName: nameof(shape));\n    }\n}\n```\n### case 表达式中的 when 语句\n>可以通过对 case 标签使用 when 子句，为面积为 0 的那些形状创建特殊 case。 边长为 0 的正方形，或半径为 0 的圆形的面积为 0。 可通过对 case 标签使用 when 语句来指定该条件\n```csharp\npublic static double ComputeArea_Version3(object shape)\n{\n    switch (shape)\n    {\n        case Square s when s.Side == 0:\n        case Circle c when c.Radius == 0:\n            return 0;\n\n        case Square s:\n            return s.Side * s.Side;\n        case Circle c:\n            return c.Radius * c.Radius * Math.PI;\n        default:\n            throw new ArgumentException(\n                message: \"shape is not a recognized shape\",\n                paramName: nameof(shape));\n    }\n}\n```\n### case 表达式中的 var 声明\n>第一条规则是 var 声明遵循正常的类型推理规则：推理出类型是 switch 表达式的静态类型。 根据此规则，类型始终匹配。\n第二个规则是，var 声明没有其他类型模式表达式中包含的 null 检查。 也就是说，变量可为 NULL，只有在这种情况下，才必须执行 NULL 检查。\n这两个规则表示，在许多情况下，case 表达式中的 var 声明匹配与 default 表达式相同的条件。 因为任何非默认事例都优先于 default 事例，所以永远不会执行 default 事例\n```csharp\nstatic object CreateShape(string shapeDescription)\n{\n    switch (shapeDescription)\n    {\n        case \"circle\":\n            return new Circle(2);\n\n        case \"square\":\n            return new Square(4);\n        \n        case \"large-circle\":\n            return new Circle(12);\n\n        case var o when (o?.Trim().Length ?? 0) == 0:\n            // white space\n            return null;\n        default:\n            return \"invalid shape description\";\n    }            \n}\n```\n## <span style=\"color:#0366d6;\">ref</span>\n### ref 返回值和 ref 局部变量示例\n>通过调用 GetBookByTitle 方法，可按引用返回个别 book 对象。\n<details>\n<summary>展开查看 </summary>\n\n```csharp\npublic class Book\n{\n    public string Author;\n    public string Title;\n}\n\npublic class BookCollection\n{\n    private Book[] books = { new Book { Title = \"Call of the Wild, The\", Author = \"Jack London\" },\n                        new Book { Title = \"Tale of Two Cities, A\", Author = \"Charles Dickens\" }\n                       };\n    private Book nobook = null;\n\n    public ref Book GetBookByTitle(string title)\n    {\n        for (int ctr = 0; ctr < books.Length; ctr++)\n        {\n            if (title == books[ctr].Title)\n                return ref books[ctr];\n        }\n        return ref nobook;\n    }\n\n    public void ListBooks()\n    {\n        foreach (var book in books)\n        {\n            Console.WriteLine($\"{book.Title}, by {book.Author}\");\n        }\n        Console.WriteLine();\n    }\n}\n```\n</details>\n\n>调用方将 GetBookByTitle 方法所返回的值存储为 ref 局部变量时，调用方对返回值所做的更改将反映在 BookCollection 对象中，如下例所示\n```csharp\nvar bc = new BookCollection();\nbc.ListBooks();\n\nref var book = ref bc.GetBookByTitle(\"Call of the Wild, The\");\nif (book != null)\n    book = new Book { Title = \"Republic, The\", Author = \"Plato\" };\nbc.ListBooks();\n// The example displays the following output:\n//       Call of the Wild, The, by Jack London\n//       Tale of Two Cities, A, by Charles Dickens\n//       \n//       Republic, The, by Plato\n//       Tale of Two Cities, A, by Charles Dickens\n```\n### Ref readonly 局部变量\n>Ref readonly 局部变量用于指代在其签名中具有 ref readonly 并使用 return ref 的方法或属性返回的值。 ref readonly 变量将 ref 本地变量的属性与 readonly 变量结合使用：它是所分配到的存储的别名，且无法修改\n```csharp\nref readonly Vector3 Test1()\n{\n    // can pass an RValue as \"in\" (via a temp copy)\n    // but the result is not safe to return\n    // because the RValue argument was not safe to return by reference\n    return ref Test2(default(Vector3));\n}\n\nref readonly Vector3 Test2(in Vector3 r)\n{\n    // this is ok, r is returnable\n    return ref r;\n}\n```\n### Ref 结构类型\n>将 ref 修饰符添加到 struct 声明定义了该类型的实例必须为堆栈分配。 换言之，永远不能在作为另一类的成员的堆上创建这些类型的实例。\n\n- 不能对ref struct装箱。无法向属于object、dynamic或任何接口类型的变量分配 ref struct 类型。\n- ref struct 类型不能实现接口。\n- 不能将 ref struct 声明为类或常规结构的字段成员。这包括声明自动实现的属性，后者会创建一个由编译器生成的支持字段。\n- 不能声明异步方法中属于 ref struct 类型的本地变量。不能在返回类似Task、Task<TResult>或Task 类型的同  步方法中声明它们。\n- 无法在迭代器中声明ref struct本地变量。\n- 无法捕获Lambda表达式或本地函数中的ref struct变量。\n\n>可以组合修饰符以将结构声明为 readonly ref。 readonly ref struct 兼具 ref struct 和 readonly struct \n\n# <span style=\"color:#0366d6;\">C#7.1语法</span>\n## <span style=\"color:#0366d6;\">异步 main 方法</span>\n>异步 Main 方法使你能够在 Main 方法中使用 await 关键字。 在过去，需要编写\n```csharp\nstatic int Main()\n{\n    return DoAsyncWork().GetAwaiter().GetResult();\n}\n```\n>现在\n```csharp\nstatic async Task<int> Main()\n{\n    // This could also be replaced with the body\n    // DoAsyncWork, including its await expressions:\n    return await DoAsyncWork();\n}\n```\n## <span style=\"color:#0366d6;\">泛型类型参数的模式匹配</span>\n>自 C# 7.1 起，is 和 switch 类型模式的模式表达式的类型可能为泛型类型参数。 这可能在检查 struct 或 class 类型且要避免装箱时最有用。\n```csharp\nvoid M<T1, T2>(T1 t1, T2 t2)\n{\n    switch (t2)\n    {\n        case T1 _:\n            break;\n        case T2 _:\n            break;\n        default:\n            break;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">元组</span>\n### 元组名称投影\n>元组名称投影，如果未提供显式名称，上述名称将优先于任何投影的名称。\n以下使用名称explicitFieldOne和explicitFieldTwo而不是localVariableOne和localVariableTwo\n```csharp\nvar localVariableOne = 5;\nvar localVariableTwo = \"some text\";\n\nvar tuple = (explicitFieldOne: localVariableOne, explicitFieldTwo: localVariableTwo);\n\n```\n>以下初始化表达式具有字段名称 Item1其值为 42和 stringContent（其值为“The answer to everything”）\n\n```csharp\nvar stringContent = \"The answer to everything\";\nvar mixedTuple = (42, stringContent);         \n```\n## <span style=\"color:#0366d6;\">默认文本表达式</span>\n>默认文本表达式是针对默认值表达式的一项增强功能。 这些表达式将变量初始化为默认值。 过去会这么编写\n```csharp\nFunc<string, bool> whereClause = default(Func<string, bool>);\n```\n>现在，可以省略掉初始化右侧的类型：\n```csharp\nFunc<string, bool> whereClause = default;\n```\n## <span style=\"color:#0366d6;\">引用程序集生成</span>\n>有两个新编译器选项可生成仅引用程序集：-refout 和 -refonly\n# <span style=\"color:#0366d6;\">C#7.2语法</span>\n## <span style=\"color:#0366d6;\">非尾随命名参数</span>\n>没有后接任何位置实参或\n```csharp\n以 C# 7.2 开头，则它们就有效并用在正确位置 。 在以下示例中，形参 orderNum 位于正确的位置，但未显式命名。\n```\n>以 C# 7.2 开头，则它们就有效并用在正确位置 。 在以下示例中，形参 orderNum 位于正确的位置，但未显式命名。\n```csharp\nPrintOrderDetails(sellerName: \"Gift Shop\", 31, productName: \"Red Mug\");\n```\n>遵循任何无序命名参数的位置参数无效。\n```csharp\n// This generates CS1738: Named argument specifications must appear after all fixed arguments have been specified.\nPrintOrderDetails(productName: \"Red Mug\", 31, \"Gift Shop\");\n```\n## <span style=\"color:#0366d6;\">in</span>\n>作为 in 参数传递的变量在方法调用中传递之前必须进行初始化。 但是，所调用的方法可能不会分配值或修改参数。\nin 参数修饰符可在 C# 7.2 及更高版本中使用。 以前的版本生成编译器错误 CS8107（“‘readonly 引用’功能在 C# 7.0 中不可用。 请使用语言版本 7.2 或更高版本。”）\n\n>通过理解使用 in 参数的动机，可以理解使用按值方法和使用 in 参数方法的重载决策规则。 定义使用 in 参数的方法是一项潜在的性能优化。 某些 struct 类型参数可能很大，在紧凑的循环或关键代码路径中调用方法时，复制这些结构的成本就很高。 方法声明 in 参数以指定参数可能按引用安全传递，因为所调用的方法不修改该参数的状态。 按引用传递这些参数可以避免（可能产生的）高昂的复制成本。\n\n```csharp\nstatic void Method(int argument)\n{\n    // implementation removed\n}\n\nstatic void Method(in int argument)\n{\n    // implementation removed\n}\n\nMethod(5); // Calls overload passed by value\nMethod(5L); // CS1503: no implicit conversion from long to int\nshort s = 0;\nMethod(s); // Calls overload passed by value.\nMethod(in s); // CS1503: cannot convert from in short to in int\nint i = 42;\nMethod(i); // Calls overload passed by value\nMethod(in i); // passed by readonly reference, explicitly using `in`\n```\n## <span style=\"color:#0366d6;\">private protected 访问修饰符</span>\n>新的复合访问修饰符：private protected 指示可通过包含同一程序集中声明的类或派生类来访问成员。 虽然 protected internal 允许通过同一程序集中的类或派生类进行访问，但 private protected 限制对同一程序集中声明的派生类的访问。\n```csharp\n// Assembly1.cs  \n// Compile with: /target:library  \npublic class BaseClass\n{\n    private protected int myValue = 0;\n}\n\npublic class DerivedClass1 : BaseClass\n{\n    void Access()\n    {\n        var baseObject = new BaseClass();\n\n        // Error CS1540, because myValue can only be accessed by\n        // classes derived from BaseClass.\n        // baseObject.myValue = 5;  \n\n        // OK, accessed through the current derived class instance\n        myValue = 5;\n    }\n}\n```\n```csharp\n// Assembly2.cs  \n// Compile with: /reference:Assembly1.dll  \nclass DerivedClass2 : BaseClass\n{\n    void Access()\n    {\n        // Error CS0122, because myValue can only be\n        // accessed by types in Assembly1\n        // myValue = 10;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">数值文字中的前导下划线</span>\n>C# 7.0 中实现了对数字分隔符的支持，但这不允许文字值的第一个字符是 _。 十六进制文本和二进制文件现可以 _ 开头。\n```csharp\nint binaryValue = 0b_0101_0101;\n```\n## <span style=\"color:#0366d6;\">条件 ref 表达式</span>\n>条件表达式可能生成 ref 结果而不是值\n```csharp\nref var r = ref (arr != null ? ref arr[0] : ref otherArr[0]);\n```\n## <span style=\"color:#0366d6;\">安全高效的代码的增强功能</span>\n>todo\n## <span style=\"color:#0366d6;\">C# 7.3</span>\n### <span style=\"color:#0366d6;\">相等和元组</span>\n>从 C# 7.3 开始，元组类型支持 == 和 != 运算符。 这些运算符按顺序将左边参数的每个成员与右边参数的每个成员进行比较。 这些比较将发生短路。 只要有一对不相等，它们即会停止计算成员。 以下代码示例使用 ==，但比较规则均适用于 !=。\n```csharp\nvar left = (a: 5, b: 10);\nvar right = (a: 5, b: 10);\nConsole.WriteLine(left == right); // displays 'true'\n```\n>元组成员名称不参与相等测试。 但是，如果其中一个操作数是含有显式名称的元组文本，则当这些名称与其他操作数的名称不匹配时，编译器将生成警告 CS8383。 在两个操作数都为元组文本的情况下，警告位于右侧操作数，\n```csharp\n(int a, string b) pair = (1, \"Hello\");\n(int z, string y) another = (1, \"Hello\");\nConsole.WriteLine(pair == another); // true. Member names don't participate.\nConsole.WriteLine(pair == (z: 1, y: \"Hello\")); // warning: literal contains different member nam\n```\n### <span style=\"color:#0366d6;\">其它todo</span>\n\n\n","slug":"csharpgrammar-9","published":1,"updated":"2022-08-17T06:55:45.679Z","_id":"ck71yk8bw000plcri011oafs7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#7.0语法<br>7.0-2017-05-.NET Framework 4.7<br>7.1-2017-08-.NET Core 2.0<br>7.2-2017-10<br>7.3-2018-03-.NET Framework 4.8 .NET Core 2.1 .NET Core 2.2</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-7-0语法\"><a href=\"#C-7-0语法\" class=\"headerlink\" title=\"C#7.0语法\"></a><span style=\"color:#0366d6;\">C#7.0语法</span></h1><h2 id=\"out-变量\"><a href=\"#out-变量\" class=\"headerlink\" title=\"out 变量\"></a><span style=\"color:#0366d6;\">out 变量</span></h2><blockquote>\n<p>支持 out 参数的现有语法已在此版本中得到改进。 现在可以在方法调用的参数列表中声明 out 变量，而不是编写单独的声明语句</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">int</span>.TryParse(input, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> result))</span><br><span class=\"line\">    Console.WriteLine(result);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Could not parse input\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>隐式类型的局部变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">int</span>.TryParse(input, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> answer))</span><br><span class=\"line\">    Console.WriteLine(answer);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Could not parse input\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多的-expression-bodied-成员\"><a href=\"#更多的-expression-bodied-成员\" class=\"headerlink\" title=\"更多的 expression-bodied 成员\"></a><span style=\"color:#0366d6;\">更多的 expression-bodied 成员</span></h2><blockquote>\n<p>C# 6 为成员函数和只读属性引入了 expression-bodied 成员。 C# 7.0 扩展了可作为表达式实现的允许的成员。 在 C# 7.0 中，你可以在属性 和索引器 上实现构造函数 、终结器 以及 get 和 set 访问器。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Expression-bodied constructor</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExpressionMembersExample</span>(<span class=\"params\"><span class=\"keyword\">string</span> label</span>)</span> =&gt; <span class=\"keyword\">this</span>.Label = label;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Expression-bodied finalizer</span></span><br><span class=\"line\">~ExpressionMembersExample() =&gt; Console.Error.WriteLine(<span class=\"string\">\"Finalized!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> label;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Expression-bodied get / set accessors.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Label</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> =&gt; label;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> =&gt; <span class=\"keyword\">this</span>.label = <span class=\"keyword\">value</span> ?? <span class=\"string\">\"Default label\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地函数\"><a href=\"#本地函数\" class=\"headerlink\" title=\"本地函数\"></a><span style=\"color:#0366d6;\">本地函数</span></h2><blockquote>\n<p>本地函数使你能够在另一个方法的上下文内声明方法 。 本地函数使得类的阅读者更容易看到本地方法仅从声明它的上下文中调用。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">char</span>&gt; <span class=\"title\">AlphabetSubset3</span>(<span class=\"params\"><span class=\"keyword\">char</span> start, <span class=\"keyword\">char</span> end</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; <span class=\"string\">'a'</span> || start &gt; <span class=\"string\">'z'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(paramName: <span class=\"keyword\">nameof</span>(start), message: <span class=\"string\">\"start must be a letter\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (end &lt; <span class=\"string\">'a'</span> || end &gt; <span class=\"string\">'z'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(paramName: <span class=\"keyword\">nameof</span>(end), message: <span class=\"string\">\"end must be a letter\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (end &lt;= start)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">$\"<span class=\"subst\">&#123;<span class=\"keyword\">nameof</span>(end)&#125;</span> must be greater than <span class=\"subst\">&#123;<span class=\"keyword\">nameof</span>(start)&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> alphabetSubsetImplementation();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">IEnumerable&lt;<span class=\"keyword\">char</span>&gt; <span class=\"title\">alphabetSubsetImplementation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> c = start; c &lt; end; c++)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以对 async 方法采用相同的技术，以确保在异步工作开始之前引发由参数验证引起的异常</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">PerformLongRunningWork</span>(<span class=\"params\"><span class=\"keyword\">string</span> address, <span class=\"keyword\">int</span> index, <span class=\"keyword\">string</span> name</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(address))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"An address is required\"</span>, paramName: <span class=\"keyword\">nameof</span>(address));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(paramName: <span class=\"keyword\">nameof</span>(index), message: <span class=\"string\">\"The index must be non-negative\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(name))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"You must supply a name\"</span>, paramName: <span class=\"keyword\">nameof</span>(name));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> longRunningWorkImplementation();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">longRunningWorkImplementation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> interimResult = <span class=\"keyword\">await</span> FirstWork(address);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> secondResult = <span class=\"keyword\">await</span> SecondStep(index, name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$\"The results are <span class=\"subst\">&#123;interimResult&#125;</span> and <span class=\"subst\">&#123;secondResult&#125;</span>. Enjoy.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"throw表达式\"><a href=\"#throw表达式\" class=\"headerlink\" title=\"throw表达式\"></a><span style=\"color:#0366d6;\">throw表达式</span></h2><blockquote>\n<p>从 C# 7.0 开始，throw 可以用作表达式和语句。 这允许在以前不支持的上下文中引发异常</p>\n</blockquote>\n<h3 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DisplayFirstNumber</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">string</span> arg = args.Length &gt;= <span class=\"number\">1</span> ? args[<span class=\"number\">0</span>] : </span><br><span class=\"line\">                              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"You must supply an argument\"</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (Int64.TryParse(arg, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> number))</span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">$\"You entered <span class=\"subst\">&#123;number:F0&#125;</span>\"</span>);</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;arg&#125;</span> is not a number.\"</span>);                            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"null-合并运算符\"><a href=\"#null-合并运算符\" class=\"headerlink\" title=\"null 合并运算符\"></a>null 合并运算符</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> =&gt; name;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> =&gt; name = <span class=\"keyword\">value</span> ?? </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(paramName: <span class=\"keyword\">nameof</span>(<span class=\"keyword\">value</span>), message: <span class=\"string\">\"Name cannot be null\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"expression-bodied-lambda-或方法\"><a href=\"#expression-bodied-lambda-或方法\" class=\"headerlink\" title=\"expression-bodied lambda 或方法\"></a>expression-bodied lambda 或方法</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DateTime <span class=\"title\">ToDateTime</span>(<span class=\"params\">IFormatProvider provider</span>)</span> =&gt; </span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidCastException(<span class=\"string\">\"Conversion to a DateTime is not supported.\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"数字文本语法改进\"><a href=\"#数字文本语法改进\" class=\"headerlink\" title=\"数字文本语法改进\"></a><span style=\"color:#0366d6;\">数字文本语法改进</span></h2><blockquote>\n<p>C# 7.0 包括两项新功能，可用于以最可读的方式写入数字来用于预期用途：二进制文本和数字分隔符</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Sixteen =   <span class=\"number\">0b0001</span>_0000;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> ThirtyTwo = <span class=\"number\">0b0010</span>_0000;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SixtyFour = <span class=\"number\">0b0100</span>_0000;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> OneHundredTwentyEight = <span class=\"number\">0b1000</span>_0000;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于十进制数字，通常将其用作千位分隔符：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> BillionsAndBillions = <span class=\"number\">100</span>_000_000_000;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>数字分隔符也可以与 decimal、float 和 double 类型一起使用</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> AvogadroConstant = <span class=\"number\">6.022</span>_140_857_747_474e23;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">decimal</span> GoldenRatio = <span class=\"number\">1.618</span>_033_988_749_894_848_204_586_834_365_638_117_720_309_179M;</span><br></pre></td></tr></table></figure>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a><span style=\"color:#0366d6;\">元组</span></h2><blockquote>\n<p>命名元组的新语言和库支持简化了设计工作：与类和结构一样，使用数据结构存储多个元素，但不定义行为。元组是包含多个字段以表示数据成员的轻量级数据结构,C# 7以前都是未命名的，只能通过 Item1 和 Item2 等引用，C# 7以后可以命名元祖的名字</p>\n</blockquote>\n<h3 id=\"命名元组和未命名元组\"><a href=\"#命名元组和未命名元组\" class=\"headerlink\" title=\"命名元组和未命名元组\"></a>命名元组和未命名元组</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unnamed = (<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> named = (first: <span class=\"string\">\"one\"</span>, second: <span class=\"string\">\"two\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值和元组\"><a href=\"#赋值和元组\" class=\"headerlink\" title=\"赋值和元组\"></a>赋值和元组</h3><blockquote>\n<p>有相同元素数量的元组类型之间赋值，其中每个右侧元素都可被隐式转换为相应的左侧元素</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The 'arity' and 'shape' of all these tuples are compatible. </span></span><br><span class=\"line\"><span class=\"comment\">// The only difference is the field names being used.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> unnamed = (<span class=\"number\">42</span>, <span class=\"string\">\"The meaning of life\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> anonymous = (<span class=\"number\">16</span>, <span class=\"string\">\"a perfect square\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> named = (Answer: <span class=\"number\">42</span>, Message: <span class=\"string\">\"The meaning of life\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> differentNamed = (SecretConstant: <span class=\"number\">42</span>, Label: <span class=\"string\">\"The meaning of life\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>前两个变量（unnamed 和 anonymous）没有为元素提供语义名称。 字段名称为 Item1 和 Item2。 后两个变量（named 和 differentName）为元素提供了语义名称。 这两个元组具有不同的元素名称</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unnamed = named;</span><br><span class=\"line\"></span><br><span class=\"line\">named = unnamed;</span><br><span class=\"line\"><span class=\"comment\">// 'named' still has fields that can be referred to</span></span><br><span class=\"line\"><span class=\"comment\">// as 'answer', and 'message':</span></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;named.Answer&#125;</span>, <span class=\"subst\">&#123;named.Message&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unnamed to unnamed:</span></span><br><span class=\"line\">anonymous = unnamed;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// named tuples.</span></span><br><span class=\"line\">named = differentNamed;</span><br><span class=\"line\"><span class=\"comment\">// The field names are not assigned. 'named' still has </span></span><br><span class=\"line\"><span class=\"comment\">// fields that can be referred to as 'answer' and 'message':</span></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;named.Answer&#125;</span>, <span class=\"subst\">&#123;named.Message&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With implicit conversions:</span></span><br><span class=\"line\"><span class=\"comment\">// int can be implicitly converted to long</span></span><br><span class=\"line\">(<span class=\"keyword\">long</span>, <span class=\"keyword\">string</span>) conversion = named;</span><br></pre></td></tr></table></figure>\n<h3 id=\"作为方法返回值的元组\"><a href=\"#作为方法返回值的元组\" class=\"headerlink\" title=\"作为方法返回值的元组\"></a>作为方法返回值的元组</h3><blockquote>\n<p>元组最常见的用途之一是作为方法返回值</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">static</span> (<span class=\"params\"><span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>, <span class=\"keyword\">int</span></span>) <span class=\"title\">ComputeSumAndSumOfSquares</span>(<span class=\"params\">IEnumerable&lt;<span class=\"keyword\">double</span>&gt; sequence</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sumOfSquares = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> sequence)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        sum += item;</span><br><span class=\"line\">        sumOfSquares += item * item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (sum, sumOfSquares, count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>建议为从方法返回的元组的元素提供语义名称</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">static</span> (<span class=\"params\"><span class=\"keyword\">int</span> Count, <span class=\"keyword\">double</span> Sum, <span class=\"keyword\">double</span> SumOfSquares</span>) <span class=\"title\">ComputeSumAndSumOfSquares</span>(<span class=\"params\">IEnumerable&lt;<span class=\"keyword\">double</span>&gt; sequence</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"析构\"><a href=\"#析构\" class=\"headerlink\" title=\"析构\"></a>析构</h3><blockquote>\n<p>通过对方法返回的元组进行析构，可以解封元组中的所有项</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">int</span> count, <span class=\"keyword\">double</span> sum, <span class=\"keyword\">double</span> sumOfSquares) = ComputeSumAndSumOfSquares(sequence);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在括号外使用 var 关键字，隐式声明元组中每个字段的类型化变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (sum, sumOfSquares, count) = ComputeSumAndSumOfSquares(sequence);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在括号内将 var 关键字与任意或全部变量声明结合使用</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">double</span> sum, <span class=\"keyword\">var</span> sumOfSquares, <span class=\"keyword\">var</span> count) = ComputeSumAndSumOfSquares(sequence);</span><br></pre></td></tr></table></figure>\n<h3 id=\"析构用户定义类型\"><a href=\"#析构用户定义类型\" class=\"headerlink\" title=\"析构用户定义类型\"></a>析构用户定义类型</h3><blockquote>\n<p>定义一个或多个赋值给任意数量的 out 变量的 Deconstruct 方法</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FirstName &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> LastName &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>(<span class=\"params\"><span class=\"keyword\">string</span> first, <span class=\"keyword\">string</span> last</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        FirstName = first;</span><br><span class=\"line\">        LastName = last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> firstName, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> lastName</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        firstName = FirstName;</span><br><span class=\"line\">        lastName = LastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>该析构方法支持从 Person 赋值给两个表示 FirstName 和 LastName 属性的字符串</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Althea\"</span>, <span class=\"string\">\"Goodwin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> (first, last) = p;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Deconstruct 方法可以是一种扩展方法，用于解封对象的可访问数据成员。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Student</span> : <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> GPA &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span>(<span class=\"params\"><span class=\"keyword\">string</span> first, <span class=\"keyword\">string</span> last, <span class=\"keyword\">double</span> gpa</span>) :</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">base</span>(<span class=\"params\">first, last</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        GPA = gpa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Extensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">this</span> Student s, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> first, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> last, <span class=\"keyword\">out</span> <span class=\"keyword\">double</span> gpa</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        first = s.FirstName;</span><br><span class=\"line\">        last = s.LastName;</span><br><span class=\"line\">        gpa = s.GPA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>析构运算符不参与测试相等。 下面的示例生成编译器错误 CS0019</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Althea\"</span>, <span class=\"string\">\"Goodwin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((<span class=\"string\">\"Althea\"</span>, <span class=\"string\">\"Goodwin\"</span>) == p)</span><br><span class=\"line\">    Console.WriteLine(p);</span><br></pre></td></tr></table></figure>\n<h3 id=\"元组作为-out-参数\"><a href=\"#元组作为-out-参数\" class=\"headerlink\" title=\"元组作为 out 参数\"></a>元组作为 out 参数</h3><blockquote>\n<p>元组自身可用作 out 参数 。不要与前面提到的析构函数部分中的任何多义性混淆。在方法调用中，只需描述元组的形状：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dictionary&lt;<span class=\"keyword\">int</span>, (<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>)&gt; dict = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">int</span>, (<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>)&gt;();</span><br><span class=\"line\">dict.Add(<span class=\"number\">1</span>, (<span class=\"number\">234</span>, <span class=\"string\">\"First!\"</span>));</span><br><span class=\"line\">dict.Add(<span class=\"number\">2</span>, (<span class=\"number\">345</span>, <span class=\"string\">\"Second\"</span>));</span><br><span class=\"line\">dict.Add(<span class=\"number\">3</span>, (<span class=\"number\">456</span>, <span class=\"string\">\"Last\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TryGetValue already demonstrates using out parameters</span></span><br><span class=\"line\">dict.TryGetValue(<span class=\"number\">2</span>, <span class=\"keyword\">out</span> (<span class=\"keyword\">int</span> num, <span class=\"keyword\">string</span> place) pair);</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;pair.num&#125;</span>: <span class=\"subst\">&#123;pair.place&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Output:</span></span><br><span class=\"line\"><span class=\"comment\"> * 345: Second</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>还可以使用 unnamed 元组，并将其字段作为 Item1 和 Item2 引用</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict.TryGetValue(<span class=\"number\">2</span>, <span class=\"keyword\">out</span> (<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>) pair);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;pair.Item1&#125;</span>: <span class=\"subst\">&#123;pair.Item2&#125;</span>\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"弃元\"><a href=\"#弃元\" class=\"headerlink\" title=\"弃元\"></a><span style=\"color:#0366d6;\">弃元</span></h2><blockquote>\n<p>是一种在应用程序代码中人为取消使用的临时虚拟变量。 弃元相当于未赋值的变量；<br>通过将下划线 (_) 赋给一个变量作为其变量名，指示该变量为一个占位符变量。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(_, _, area) = city.GetCityInformation(cityName);</span><br></pre></td></tr></table></figure>\n<h3 id=\"元组和对象析构\"><a href=\"#元组和对象析构\" class=\"headerlink\" title=\"元组和对象析构\"></a>元组和对象析构</h3><details>\n<summary>展开查看 </summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> (_, _, _, pop1, _, pop2) = QueryCityDataForYears(<span class=\"string\">\"New York City\"</span>, <span class=\"number\">1960</span>, <span class=\"number\">2010</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"Population change, 1960 to 2010: <span class=\"subst\">&#123;pop2 - pop1:N0&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">static</span> (<span class=\"params\"><span class=\"keyword\">string</span>, <span class=\"keyword\">double</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span></span>) <span class=\"title\">QueryCityDataForYears</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, <span class=\"keyword\">int</span> year1, <span class=\"keyword\">int</span> year2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> population1 = <span class=\"number\">0</span>, population2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> area = <span class=\"number\">0</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"string\">\"New York City\"</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            area = <span class=\"number\">468.48</span>; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (year1 == <span class=\"number\">1960</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                population1 = <span class=\"number\">7781984</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (year2 == <span class=\"number\">2010</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                population2 = <span class=\"number\">8175133</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (name, area, year1, population1, year2, population2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The example displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<blockquote>\n<p>类、结构或接口的 Deconstruct 方法还允许从对象中检索和析构一组特定的数据。 如果想只使用析构值的一个子集时，可使用弃元。</p>\n</blockquote>\n<details>\n<summary>展开查看 </summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FirstName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> MiddleName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> LastName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> City &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> State &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>(<span class=\"params\"><span class=\"keyword\">string</span> fname, <span class=\"keyword\">string</span> mname, <span class=\"keyword\">string</span> lname, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">string</span> cityName, <span class=\"keyword\">string</span> stateName</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        FirstName = fname;</span><br><span class=\"line\">        MiddleName = mname;</span><br><span class=\"line\">        LastName = lname;</span><br><span class=\"line\">        City = cityName;</span><br><span class=\"line\">        State = stateName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Return the first and last name.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> fname, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> lname</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        fname = FirstName;</span><br><span class=\"line\">        lname = LastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> fname, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> mname, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> lname</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        fname = FirstName;</span><br><span class=\"line\">        mname = MiddleName;</span><br><span class=\"line\">        lname = LastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> fname, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> lname, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> city, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> state</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        fname = FirstName;</span><br><span class=\"line\">        lname = LastName;</span><br><span class=\"line\">        city = City;</span><br><span class=\"line\">        state = State;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"John\"</span>, <span class=\"string\">\"Quincy\"</span>, <span class=\"string\">\"Adams\"</span>, <span class=\"string\">\"Boston\"</span>, <span class=\"string\">\"MA\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// &lt;Snippet1&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">// Deconstruct the person object.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> (fName, _, city, _) = p;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"Hello <span class=\"subst\">&#123;fName&#125;</span> of <span class=\"subst\">&#123;city&#125;</span>!\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// The example displays the following output:</span></span><br><span class=\"line\">        <span class=\"comment\">//      Hello John of Boston!</span></span><br><span class=\"line\">        <span class=\"comment\">// &lt;/Snippet1&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The example displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">//    Hello John Adams of Boston, MA!</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"使用-switch-和-is-的模式匹配\"><a href=\"#使用-switch-和-is-的模式匹配\" class=\"headerlink\" title=\"使用 switch 和 is 的模式匹配\"></a>使用 switch 和 is 的模式匹配</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Globalization;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">object</span>[] objects = &#123; CultureInfo.CurrentCulture, </span><br><span class=\"line\">                           CultureInfo.CurrentCulture.DateTimeFormat, </span><br><span class=\"line\">                           CultureInfo.CurrentCulture.NumberFormat,</span><br><span class=\"line\">                           <span class=\"keyword\">new</span> ArgumentException(), <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> obj <span class=\"keyword\">in</span> objects)</span><br><span class=\"line\">         ProvidesFormatInfo(obj);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ProvidesFormatInfo</span>(<span class=\"params\"><span class=\"keyword\">object</span> obj</span>)         </span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (obj)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> IFormatProvider fmt:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;fmt&#125;</span> object\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"literal\">null</span>:</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"A null object reference: \"</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Its use could result in a NullReferenceException\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"keyword\">object</span> _:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Some object type without format information\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-out-参数调用方法\"><a href=\"#使用-out-参数调用方法\" class=\"headerlink\" title=\"使用 out 参数调用方法\"></a>使用 out 参数调用方法</h3><blockquote>\n<p>因为该示例侧重验证日期字符串，而不是解析它来提取日期，所以方法的 out 参数为占位符。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">string</span>[] dateStrings = &#123;<span class=\"string\">\"05/01/2018 14:57:32.8\"</span>, <span class=\"string\">\"2018-05-01 14:57:32.8\"</span>,</span><br><span class=\"line\">                              <span class=\"string\">\"2018-05-01T14:57:32.8375298-04:00\"</span>, <span class=\"string\">\"5/01/2018\"</span>,</span><br><span class=\"line\">                              <span class=\"string\">\"5/01/2018 14:57:32.80 -07:00\"</span>, </span><br><span class=\"line\">                              <span class=\"string\">\"1 May 2018 2:57:32.8 PM\"</span>, <span class=\"string\">\"16-05-2018 1:00:32 PM\"</span>, </span><br><span class=\"line\">                              <span class=\"string\">\"Fri, 15 May 2018 20:10:57 GMT\"</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> dateString <span class=\"keyword\">in</span> dateStrings)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (DateTime.TryParse(dateString, <span class=\"keyword\">out</span> _)) </span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"'<span class=\"subst\">&#123;dateString&#125;</span>': valid\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"'<span class=\"subst\">&#123;dateString&#125;</span>': invalid\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"独立弃元\"><a href=\"#独立弃元\" class=\"headerlink\" title=\"独立弃元\"></a>独立弃元</h3><blockquote>\n<p>可使用独立弃元来指示要忽略的任何变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">      ExecuteAsyncMethods().Wait();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">ExecuteAsyncMethods</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;    </span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">\"About to launch a task...\"</span>);</span><br><span class=\"line\">      _ = Task.Run(() =&gt; &#123; <span class=\"keyword\">var</span> iterations = <span class=\"number\">0</span>;  </span><br><span class=\"line\">                           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> ctr = <span class=\"number\">0</span>; ctr &lt; <span class=\"keyword\">int</span>.MaxValue; ctr++)</span><br><span class=\"line\">                              iterations++;</span><br><span class=\"line\">                           Console.WriteLine(<span class=\"string\">\"Completed looping operation...\"</span>);</span><br><span class=\"line\">                           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException();</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">await</span> Task.Delay(<span class=\"number\">5000</span>);                        </span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">\"Exiting after 5 second delay\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>_ 也是有效标识符。 当在支持的上下文之外使用时，_ 不视为占位符，而视为有效变量。 如果名为 _ 的标识符已在范围内，则使用 _ 作为独立占位符可能导致</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ShowValue</span>(<span class=\"params\"><span class=\"keyword\">int</span> _</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">byte</span>[] arr = &#123; <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">   _ = BitConverter.ToInt32(arr, <span class=\"number\">0</span>);</span><br><span class=\"line\">   Console.WriteLine(_);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The example displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">RoundTrips</span>(<span class=\"params\"><span class=\"keyword\">int</span> _</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = _.ToString();</span><br><span class=\"line\">   <span class=\"keyword\">int</span> newValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">   _ = Int32.TryParse(<span class=\"keyword\">value</span>, <span class=\"keyword\">out</span> newValue);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> _ == newValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The example displays the following compiler error:</span></span><br><span class=\"line\"><span class=\"comment\">//      error CS0029: Cannot implicitly convert type 'bool' to 'int'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a><span style=\"color:#0366d6;\">模式匹配</span></h2><h3 id=\"is-类型模式表达式\"><a href=\"#is-类型模式表达式\" class=\"headerlink\" title=\"is 类型模式表达式\"></a>is 类型模式表达式</h3><blockquote>\n<p>过使用 is 表达式的扩展在测试成功时对变量赋值</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">ComputeAreaModernIs</span>(<span class=\"params\"><span class=\"keyword\">object</span> shape</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shape <span class=\"keyword\">is</span> Square s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.Side * s.Side;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shape <span class=\"keyword\">is</span> Circle c)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c.Radius * c.Radius * Math.PI;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shape <span class=\"keyword\">is</span> Rectangle r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.Height * r.Length;</span><br><span class=\"line\">    <span class=\"comment\">// elided</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(</span><br><span class=\"line\">        message: <span class=\"string\">\"shape is not a recognized shape\"</span>,</span><br><span class=\"line\">        paramName: <span class=\"keyword\">nameof</span>(shape));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配-switch-语句\"><a href=\"#匹配-switch-语句\" class=\"headerlink\" title=\"匹配 switch 语句\"></a>匹配 switch 语句</h3><blockquote>\n<p>switch 语句支持的唯一模式是常量模式。 它进一步限制为数字类型和 string 类型。 这些限制已移除，现在可以使用类型模式编写 switch 语句</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">ComputeAreaModernSwitch</span>(<span class=\"params\"><span class=\"keyword\">object</span> shape</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (shape)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Square s:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.Side * s.Side;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Circle c:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c.Radius * c.Radius * Math.PI;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Rectangle r:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r.Height * r.Length;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(</span><br><span class=\"line\">                message: <span class=\"string\">\"shape is not a recognized shape\"</span>,</span><br><span class=\"line\">                paramName: <span class=\"keyword\">nameof</span>(shape));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"case-表达式中的-when-语句\"><a href=\"#case-表达式中的-when-语句\" class=\"headerlink\" title=\"case 表达式中的 when 语句\"></a>case 表达式中的 when 语句</h3><blockquote>\n<p>可以通过对 case 标签使用 when 子句，为面积为 0 的那些形状创建特殊 case。 边长为 0 的正方形，或半径为 0 的圆形的面积为 0。 可通过对 case 标签使用 when 语句来指定该条件</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">ComputeArea_Version3</span>(<span class=\"params\"><span class=\"keyword\">object</span> shape</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (shape)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Square s <span class=\"keyword\">when</span> s.Side == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Circle c <span class=\"keyword\">when</span> c.Radius == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> Square s:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.Side * s.Side;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Circle c:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c.Radius * c.Radius * Math.PI;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(</span><br><span class=\"line\">                message: <span class=\"string\">\"shape is not a recognized shape\"</span>,</span><br><span class=\"line\">                paramName: <span class=\"keyword\">nameof</span>(shape));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"case-表达式中的-var-声明\"><a href=\"#case-表达式中的-var-声明\" class=\"headerlink\" title=\"case 表达式中的 var 声明\"></a>case 表达式中的 var 声明</h3><blockquote>\n<p>第一条规则是 var 声明遵循正常的类型推理规则：推理出类型是 switch 表达式的静态类型。 根据此规则，类型始终匹配。<br>第二个规则是，var 声明没有其他类型模式表达式中包含的 null 检查。 也就是说，变量可为 NULL，只有在这种情况下，才必须执行 NULL 检查。<br>这两个规则表示，在许多情况下，case 表达式中的 var 声明匹配与 default 表达式相同的条件。 因为任何非默认事例都优先于 default 事例，所以永远不会执行 default 事例</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">CreateShape</span>(<span class=\"params\"><span class=\"keyword\">string</span> shapeDescription</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (shapeDescription)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"circle\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Circle(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"square\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Square(<span class=\"number\">4</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"large-circle\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Circle(<span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">case</span> <span class=\"keyword\">var</span> o <span class=\"title\">when</span> (<span class=\"params\">o?.Trim(</span>).Length ?? 0)</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\">// white space</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"invalid shape description\"</span>;</span><br><span class=\"line\">    &#125;            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a><span style=\"color:#0366d6;\">ref</span></h2><h3 id=\"ref-返回值和-ref-局部变量示例\"><a href=\"#ref-返回值和-ref-局部变量示例\" class=\"headerlink\" title=\"ref 返回值和 ref 局部变量示例\"></a>ref 返回值和 ref 局部变量示例</h3><blockquote>\n<p>通过调用 GetBookByTitle 方法，可按引用返回个别 book 对象。</p>\n</blockquote>\n<details>\n<summary>展开查看 </summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Book</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Author;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BookCollection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Book[] books = &#123; <span class=\"keyword\">new</span> Book &#123; Title = <span class=\"string\">\"Call of the Wild, The\"</span>, Author = <span class=\"string\">\"Jack London\"</span> &#125;,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> Book &#123; Title = <span class=\"string\">\"Tale of Two Cities, A\"</span>, Author = <span class=\"string\">\"Charles Dickens\"</span> &#125;</span><br><span class=\"line\">                       &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Book nobook = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">ref</span> Book <span class=\"title\">GetBookByTitle</span>(<span class=\"params\"><span class=\"keyword\">string</span> title</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> ctr = <span class=\"number\">0</span>; ctr &lt; books.Length; ctr++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (title == books[ctr].Title)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">ref</span> books[ctr];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">ref</span> nobook;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ListBooks</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> book <span class=\"keyword\">in</span> books)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;book.Title&#125;</span>, by <span class=\"subst\">&#123;book.Author&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<blockquote>\n<p>调用方将 GetBookByTitle 方法所返回的值存储为 ref 局部变量时，调用方对返回值所做的更改将反映在 BookCollection 对象中，如下例所示</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bc = <span class=\"keyword\">new</span> BookCollection();</span><br><span class=\"line\">bc.ListBooks();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ref</span> <span class=\"keyword\">var</span> book = <span class=\"keyword\">ref</span> bc.GetBookByTitle(<span class=\"string\">\"Call of the Wild, The\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (book != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    book = <span class=\"keyword\">new</span> Book &#123; Title = <span class=\"string\">\"Republic, The\"</span>, Author = <span class=\"string\">\"Plato\"</span> &#125;;</span><br><span class=\"line\">bc.ListBooks();</span><br><span class=\"line\"><span class=\"comment\">// The example displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">//       Call of the Wild, The, by Jack London</span></span><br><span class=\"line\"><span class=\"comment\">//       Tale of Two Cities, A, by Charles Dickens</span></span><br><span class=\"line\"><span class=\"comment\">//       </span></span><br><span class=\"line\"><span class=\"comment\">//       Republic, The, by Plato</span></span><br><span class=\"line\"><span class=\"comment\">//       Tale of Two Cities, A, by Charles Dickens</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Ref-readonly-局部变量\"><a href=\"#Ref-readonly-局部变量\" class=\"headerlink\" title=\"Ref readonly 局部变量\"></a>Ref readonly 局部变量</h3><blockquote>\n<p>Ref readonly 局部变量用于指代在其签名中具有 ref readonly 并使用 return ref 的方法或属性返回的值。 ref readonly 变量将 ref 本地变量的属性与 readonly 变量结合使用：它是所分配到的存储的别名，且无法修改</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ref</span> <span class=\"keyword\">readonly</span> Vector3 <span class=\"title\">Test1</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// can pass an RValue as \"in\" (via a temp copy)</span></span><br><span class=\"line\">    <span class=\"comment\">// but the result is not safe to return</span></span><br><span class=\"line\">    <span class=\"comment\">// because the RValue argument was not safe to return by reference</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">ref</span> <span class=\"title\">Test2</span>(<span class=\"params\"><span class=\"keyword\">default</span>(Vector3</span>))</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ref</span> <span class=\"keyword\">readonly</span> Vector3 <span class=\"title\">Test2</span>(<span class=\"params\"><span class=\"keyword\">in</span> Vector3 r</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this is ok, r is returnable</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">ref</span> r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Ref-结构类型\"><a href=\"#Ref-结构类型\" class=\"headerlink\" title=\"Ref 结构类型\"></a>Ref 结构类型</h3><blockquote>\n<p>将 ref 修饰符添加到 struct 声明定义了该类型的实例必须为堆栈分配。 换言之，永远不能在作为另一类的成员的堆上创建这些类型的实例。</p>\n</blockquote>\n<ul>\n<li>不能对ref struct装箱。无法向属于object、dynamic或任何接口类型的变量分配 ref struct 类型。</li>\n<li>ref struct 类型不能实现接口。</li>\n<li>不能将 ref struct 声明为类或常规结构的字段成员。这包括声明自动实现的属性，后者会创建一个由编译器生成的支持字段。</li>\n<li>不能声明异步方法中属于 ref struct 类型的本地变量。不能在返回类似Task、Task<TResult>或Task 类型的同  步方法中声明它们。</li>\n<li>无法在迭代器中声明ref struct本地变量。</li>\n<li>无法捕获Lambda表达式或本地函数中的ref struct变量。</li>\n</ul>\n<blockquote>\n<p>可以组合修饰符以将结构声明为 readonly ref。 readonly ref struct 兼具 ref struct 和 readonly struct </p>\n</blockquote>\n<h1 id=\"C-7-1语法\"><a href=\"#C-7-1语法\" class=\"headerlink\" title=\"C#7.1语法\"></a><span style=\"color:#0366d6;\">C#7.1语法</span></h1><h2 id=\"异步-main-方法\"><a href=\"#异步-main-方法\" class=\"headerlink\" title=\"异步 main 方法\"></a><span style=\"color:#0366d6;\">异步 main 方法</span></h2><blockquote>\n<p>异步 Main 方法使你能够在 Main 方法中使用 await 关键字。 在过去，需要编写</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DoAsyncWork().GetAwaiter().GetResult();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现在</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// This could also be replaced with the body</span></span><br><span class=\"line\">    <span class=\"comment\">// DoAsyncWork, including its await expressions:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> DoAsyncWork();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型类型参数的模式匹配\"><a href=\"#泛型类型参数的模式匹配\" class=\"headerlink\" title=\"泛型类型参数的模式匹配\"></a><span style=\"color:#0366d6;\">泛型类型参数的模式匹配</span></h2><blockquote>\n<p>自 C# 7.1 起，is 和 switch 类型模式的模式表达式的类型可能为泛型类型参数。 这可能在检查 struct 或 class 类型且要避免装箱时最有用。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> M&lt;T1, T2&gt;(T1 t1, T2 t2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (t2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> T1 _:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> T2 _:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"元组-1\"><a href=\"#元组-1\" class=\"headerlink\" title=\"元组\"></a><span style=\"color:#0366d6;\">元组</span></h2><h3 id=\"元组名称投影\"><a href=\"#元组名称投影\" class=\"headerlink\" title=\"元组名称投影\"></a>元组名称投影</h3><blockquote>\n<p>元组名称投影，如果未提供显式名称，上述名称将优先于任何投影的名称。<br>以下使用名称explicitFieldOne和explicitFieldTwo而不是localVariableOne和localVariableTwo</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> localVariableOne = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> localVariableTwo = <span class=\"string\">\"some text\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tuple = (explicitFieldOne: localVariableOne, explicitFieldTwo: localVariableTwo);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下初始化表达式具有字段名称 Item1其值为 42和 stringContent（其值为“The answer to everything”）</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringContent = <span class=\"string\">\"The answer to everything\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mixedTuple = (<span class=\"number\">42</span>, stringContent);</span><br></pre></td></tr></table></figure>\n<h2 id=\"默认文本表达式\"><a href=\"#默认文本表达式\" class=\"headerlink\" title=\"默认文本表达式\"></a><span style=\"color:#0366d6;\">默认文本表达式</span></h2><blockquote>\n<p>默认文本表达式是针对默认值表达式的一项增强功能。 这些表达式将变量初始化为默认值。 过去会这么编写</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">bool</span>&gt; whereClause = <span class=\"keyword\">default</span>(Func&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">bool</span>&gt;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现在，可以省略掉初始化右侧的类型：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">bool</span>&gt; whereClause = <span class=\"keyword\">default</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用程序集生成\"><a href=\"#引用程序集生成\" class=\"headerlink\" title=\"引用程序集生成\"></a><span style=\"color:#0366d6;\">引用程序集生成</span></h2><blockquote>\n<p>有两个新编译器选项可生成仅引用程序集：-refout 和 -refonly</p>\n</blockquote>\n<h1 id=\"C-7-2语法\"><a href=\"#C-7-2语法\" class=\"headerlink\" title=\"C#7.2语法\"></a><span style=\"color:#0366d6;\">C#7.2语法</span></h1><h2 id=\"非尾随命名参数\"><a href=\"#非尾随命名参数\" class=\"headerlink\" title=\"非尾随命名参数\"></a><span style=\"color:#0366d6;\">非尾随命名参数</span></h2><blockquote>\n<p>没有后接任何位置实参或</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以 C<span class=\"meta\"># 7.2 开头，则它们就有效并用在正确位置 。 在以下示例中，形参 orderNum 位于正确的位置，但未显式命名。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以 C# 7.2 开头，则它们就有效并用在正确位置 。 在以下示例中，形参 orderNum 位于正确的位置，但未显式命名。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrintOrderDetails(sellerName: <span class=\"string\">\"Gift Shop\"</span>, <span class=\"number\">31</span>, productName: <span class=\"string\">\"Red Mug\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>遵循任何无序命名参数的位置参数无效。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This generates CS1738: Named argument specifications must appear after all fixed arguments have been specified.</span></span><br><span class=\"line\">PrintOrderDetails(productName: <span class=\"string\">\"Red Mug\"</span>, <span class=\"number\">31</span>, <span class=\"string\">\"Gift Shop\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a><span style=\"color:#0366d6;\">in</span></h2><blockquote>\n<p>作为 in 参数传递的变量在方法调用中传递之前必须进行初始化。 但是，所调用的方法可能不会分配值或修改参数。<br>in 参数修饰符可在 C# 7.2 及更高版本中使用。 以前的版本生成编译器错误 CS8107（“‘readonly 引用’功能在 C# 7.0 中不可用。 请使用语言版本 7.2 或更高版本。”）</p>\n</blockquote>\n<blockquote>\n<p>通过理解使用 in 参数的动机，可以理解使用按值方法和使用 in 参数方法的重载决策规则。 定义使用 in 参数的方法是一项潜在的性能优化。 某些 struct 类型参数可能很大，在紧凑的循环或关键代码路径中调用方法时，复制这些结构的成本就很高。 方法声明 in 参数以指定参数可能按引用安全传递，因为所调用的方法不修改该参数的状态。 按引用传递这些参数可以避免（可能产生的）高昂的复制成本。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Method</span>(<span class=\"params\"><span class=\"keyword\">int</span> argument</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// implementation removed</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Method</span>(<span class=\"params\"><span class=\"keyword\">in</span> <span class=\"keyword\">int</span> argument</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// implementation removed</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Method(<span class=\"number\">5</span>); <span class=\"comment\">// Calls overload passed by value</span></span><br><span class=\"line\">Method(<span class=\"number\">5L</span>); <span class=\"comment\">// CS1503: no implicit conversion from long to int</span></span><br><span class=\"line\"><span class=\"keyword\">short</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">Method(s); <span class=\"comment\">// Calls overload passed by value.</span></span><br><span class=\"line\">Method(<span class=\"keyword\">in</span> s); <span class=\"comment\">// CS1503: cannot convert from in short to in int</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">42</span>;</span><br><span class=\"line\">Method(i); <span class=\"comment\">// Calls overload passed by value</span></span><br><span class=\"line\">Method(<span class=\"keyword\">in</span> i); <span class=\"comment\">// passed by readonly reference, explicitly using `in`</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"private-protected-访问修饰符\"><a href=\"#private-protected-访问修饰符\" class=\"headerlink\" title=\"private protected 访问修饰符\"></a><span style=\"color:#0366d6;\">private protected 访问修饰符</span></h2><blockquote>\n<p>新的复合访问修饰符：private protected 指示可通过包含同一程序集中声明的类或派生类来访问成员。 虽然 protected internal 允许通过同一程序集中的类或派生类进行访问，但 private protected 限制对同一程序集中声明的派生类的访问。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Assembly1.cs  </span></span><br><span class=\"line\"><span class=\"comment\">// Compile with: /target:library  </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> myValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedClass1</span> : <span class=\"title\">BaseClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Access</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> baseObject = <span class=\"keyword\">new</span> BaseClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Error CS1540, because myValue can only be accessed by</span></span><br><span class=\"line\">        <span class=\"comment\">// classes derived from BaseClass.</span></span><br><span class=\"line\">        <span class=\"comment\">// baseObject.myValue = 5;  </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// OK, accessed through the current derived class instance</span></span><br><span class=\"line\">        myValue = <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Assembly2.cs  </span></span><br><span class=\"line\"><span class=\"comment\">// Compile with: /reference:Assembly1.dll  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">DerivedClass2</span> : <span class=\"title\">BaseClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Access</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Error CS0122, because myValue can only be</span></span><br><span class=\"line\">        <span class=\"comment\">// accessed by types in Assembly1</span></span><br><span class=\"line\">        <span class=\"comment\">// myValue = 10;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数值文字中的前导下划线\"><a href=\"#数值文字中的前导下划线\" class=\"headerlink\" title=\"数值文字中的前导下划线\"></a><span style=\"color:#0366d6;\">数值文字中的前导下划线</span></h2><blockquote>\n<p>C# 7.0 中实现了对数字分隔符的支持，但这不允许文字值的第一个字符是 _。 十六进制文本和二进制文件现可以 _ 开头。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> binaryValue = <span class=\"number\">0b</span>_0101_0101;</span><br></pre></td></tr></table></figure>\n<h2 id=\"条件-ref-表达式\"><a href=\"#条件-ref-表达式\" class=\"headerlink\" title=\"条件 ref 表达式\"></a><span style=\"color:#0366d6;\">条件 ref 表达式</span></h2><blockquote>\n<p>条件表达式可能生成 ref 结果而不是值</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ref</span> <span class=\"keyword\">var</span> r = <span class=\"keyword\">ref</span> (arr != <span class=\"literal\">null</span> ? <span class=\"keyword\">ref</span> arr[<span class=\"number\">0</span>] : <span class=\"keyword\">ref</span> otherArr[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"安全高效的代码的增强功能\"><a href=\"#安全高效的代码的增强功能\" class=\"headerlink\" title=\"安全高效的代码的增强功能\"></a><span style=\"color:#0366d6;\">安全高效的代码的增强功能</span></h2><blockquote>\n<p>todo</p>\n</blockquote>\n<h2 id=\"C-7-3\"><a href=\"#C-7-3\" class=\"headerlink\" title=\"C# 7.3\"></a><span style=\"color:#0366d6;\">C# 7.3</span></h2><h3 id=\"相等和元组\"><a href=\"#相等和元组\" class=\"headerlink\" title=\"相等和元组\"></a><span style=\"color:#0366d6;\">相等和元组</span></h3><blockquote>\n<p>从 C# 7.3 开始，元组类型支持 == 和 != 运算符。 这些运算符按顺序将左边参数的每个成员与右边参数的每个成员进行比较。 这些比较将发生短路。 只要有一对不相等，它们即会停止计算成员。 以下代码示例使用 ==，但比较规则均适用于 !=。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> left = (a: <span class=\"number\">5</span>, b: <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> right = (a: <span class=\"number\">5</span>, b: <span class=\"number\">10</span>);</span><br><span class=\"line\">Console.WriteLine(left == right); <span class=\"comment\">// displays 'true'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>元组成员名称不参与相等测试。 但是，如果其中一个操作数是含有显式名称的元组文本，则当这些名称与其他操作数的名称不匹配时，编译器将生成警告 CS8383。 在两个操作数都为元组文本的情况下，警告位于右侧操作数，</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">string</span> b) pair = (<span class=\"number\">1</span>, <span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">(<span class=\"keyword\">int</span> z, <span class=\"keyword\">string</span> y) another = (<span class=\"number\">1</span>, <span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">Console.WriteLine(pair == another); <span class=\"comment\">// true. Member names don't participate.</span></span><br><span class=\"line\">Console.WriteLine(pair == (z: <span class=\"number\">1</span>, y: <span class=\"string\">\"Hello\"</span>)); <span class=\"comment\">// warning: literal contains different member nam</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其它todo\"><a href=\"#其它todo\" class=\"headerlink\" title=\"其它todo\"></a><span style=\"color:#0366d6;\">其它todo</span></h3>","site":{"data":{}},"excerpt":"<p>C#7.0语法<br>7.0-2017-05-.NET Framework 4.7<br>7.1-2017-08-.NET Core 2.0<br>7.2-2017-10<br>7.3-2018-03-.NET Framework 4.8 .NET Core 2.1 .NET Core 2.2</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-7-0语法\"><a href=\"#C-7-0语法\" class=\"headerlink\" title=\"C#7.0语法\"></a><span style=\"color:#0366d6;\">C#7.0语法</span></h1><h2 id=\"out-变量\"><a href=\"#out-变量\" class=\"headerlink\" title=\"out 变量\"></a><span style=\"color:#0366d6;\">out 变量</span></h2><blockquote>\n<p>支持 out 参数的现有语法已在此版本中得到改进。 现在可以在方法调用的参数列表中声明 out 变量，而不是编写单独的声明语句</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">int</span>.TryParse(input, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> result))</span><br><span class=\"line\">    Console.WriteLine(result);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Could not parse input\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>隐式类型的局部变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">int</span>.TryParse(input, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> answer))</span><br><span class=\"line\">    Console.WriteLine(answer);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    Console.WriteLine(<span class=\"string\">\"Could not parse input\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"更多的-expression-bodied-成员\"><a href=\"#更多的-expression-bodied-成员\" class=\"headerlink\" title=\"更多的 expression-bodied 成员\"></a><span style=\"color:#0366d6;\">更多的 expression-bodied 成员</span></h2><blockquote>\n<p>C# 6 为成员函数和只读属性引入了 expression-bodied 成员。 C# 7.0 扩展了可作为表达式实现的允许的成员。 在 C# 7.0 中，你可以在属性 和索引器 上实现构造函数 、终结器 以及 get 和 set 访问器。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Expression-bodied constructor</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExpressionMembersExample</span>(<span class=\"params\"><span class=\"keyword\">string</span> label</span>)</span> =&gt; <span class=\"keyword\">this</span>.Label = label;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Expression-bodied finalizer</span></span><br><span class=\"line\">~ExpressionMembersExample() =&gt; Console.Error.WriteLine(<span class=\"string\">\"Finalized!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">string</span> label;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Expression-bodied get / set accessors.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Label</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> =&gt; label;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> =&gt; <span class=\"keyword\">this</span>.label = <span class=\"keyword\">value</span> ?? <span class=\"string\">\"Default label\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地函数\"><a href=\"#本地函数\" class=\"headerlink\" title=\"本地函数\"></a><span style=\"color:#0366d6;\">本地函数</span></h2><blockquote>\n<p>本地函数使你能够在另一个方法的上下文内声明方法 。 本地函数使得类的阅读者更容易看到本地方法仅从声明它的上下文中调用。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"keyword\">char</span>&gt; <span class=\"title\">AlphabetSubset3</span>(<span class=\"params\"><span class=\"keyword\">char</span> start, <span class=\"keyword\">char</span> end</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &lt; <span class=\"string\">'a'</span> || start &gt; <span class=\"string\">'z'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(paramName: <span class=\"keyword\">nameof</span>(start), message: <span class=\"string\">\"start must be a letter\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (end &lt; <span class=\"string\">'a'</span> || end &gt; <span class=\"string\">'z'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(paramName: <span class=\"keyword\">nameof</span>(end), message: <span class=\"string\">\"end must be a letter\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (end &lt;= start)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">$\"<span class=\"subst\">&#123;<span class=\"keyword\">nameof</span>(end)&#125;</span> must be greater than <span class=\"subst\">&#123;<span class=\"keyword\">nameof</span>(start)&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> alphabetSubsetImplementation();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">IEnumerable&lt;<span class=\"keyword\">char</span>&gt; <span class=\"title\">alphabetSubsetImplementation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> c = start; c &lt; end; c++)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以对 async 方法采用相同的技术，以确保在异步工作开始之前引发由参数验证引起的异常</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">PerformLongRunningWork</span>(<span class=\"params\"><span class=\"keyword\">string</span> address, <span class=\"keyword\">int</span> index, <span class=\"keyword\">string</span> name</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(address))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"An address is required\"</span>, paramName: <span class=\"keyword\">nameof</span>(address));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(paramName: <span class=\"keyword\">nameof</span>(index), message: <span class=\"string\">\"The index must be non-negative\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">string</span>.IsNullOrWhiteSpace(name))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"You must supply a name\"</span>, paramName: <span class=\"keyword\">nameof</span>(name));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> longRunningWorkImplementation();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">string</span>&gt; <span class=\"title\">longRunningWorkImplementation</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> interimResult = <span class=\"keyword\">await</span> FirstWork(address);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> secondResult = <span class=\"keyword\">await</span> SecondStep(index, name);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$\"The results are <span class=\"subst\">&#123;interimResult&#125;</span> and <span class=\"subst\">&#123;secondResult&#125;</span>. Enjoy.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"throw表达式\"><a href=\"#throw表达式\" class=\"headerlink\" title=\"throw表达式\"></a><span style=\"color:#0366d6;\">throw表达式</span></h2><blockquote>\n<p>从 C# 7.0 开始，throw 可以用作表达式和语句。 这允许在以前不支持的上下文中引发异常</p>\n</blockquote>\n<h3 id=\"条件运算符\"><a href=\"#条件运算符\" class=\"headerlink\" title=\"条件运算符\"></a>条件运算符</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DisplayFirstNumber</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">string</span> arg = args.Length &gt;= <span class=\"number\">1</span> ? args[<span class=\"number\">0</span>] : </span><br><span class=\"line\">                              <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"string\">\"You must supply an argument\"</span>);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (Int64.TryParse(arg, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> number))</span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">$\"You entered <span class=\"subst\">&#123;number:F0&#125;</span>\"</span>);</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;arg&#125;</span> is not a number.\"</span>);                            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"null-合并运算符\"><a href=\"#null-合并运算符\" class=\"headerlink\" title=\"null 合并运算符\"></a>null 合并运算符</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> =&gt; name;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> =&gt; name = <span class=\"keyword\">value</span> ?? </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(paramName: <span class=\"keyword\">nameof</span>(<span class=\"keyword\">value</span>), message: <span class=\"string\">\"Name cannot be null\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"expression-bodied-lambda-或方法\"><a href=\"#expression-bodied-lambda-或方法\" class=\"headerlink\" title=\"expression-bodied lambda 或方法\"></a>expression-bodied lambda 或方法</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DateTime <span class=\"title\">ToDateTime</span>(<span class=\"params\">IFormatProvider provider</span>)</span> =&gt; </span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidCastException(<span class=\"string\">\"Conversion to a DateTime is not supported.\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"数字文本语法改进\"><a href=\"#数字文本语法改进\" class=\"headerlink\" title=\"数字文本语法改进\"></a><span style=\"color:#0366d6;\">数字文本语法改进</span></h2><blockquote>\n<p>C# 7.0 包括两项新功能，可用于以最可读的方式写入数字来用于预期用途：二进制文本和数字分隔符</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Sixteen =   <span class=\"number\">0b0001</span>_0000;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> ThirtyTwo = <span class=\"number\">0b0010</span>_0000;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> SixtyFour = <span class=\"number\">0b0100</span>_0000;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> OneHundredTwentyEight = <span class=\"number\">0b1000</span>_0000;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对于十进制数字，通常将其用作千位分隔符：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">long</span> BillionsAndBillions = <span class=\"number\">100</span>_000_000_000;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>数字分隔符也可以与 decimal、float 和 double 类型一起使用</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> AvogadroConstant = <span class=\"number\">6.022</span>_140_857_747_474e23;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">decimal</span> GoldenRatio = <span class=\"number\">1.618</span>_033_988_749_894_848_204_586_834_365_638_117_720_309_179M;</span><br></pre></td></tr></table></figure>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a><span style=\"color:#0366d6;\">元组</span></h2><blockquote>\n<p>命名元组的新语言和库支持简化了设计工作：与类和结构一样，使用数据结构存储多个元素，但不定义行为。元组是包含多个字段以表示数据成员的轻量级数据结构,C# 7以前都是未命名的，只能通过 Item1 和 Item2 等引用，C# 7以后可以命名元祖的名字</p>\n</blockquote>\n<h3 id=\"命名元组和未命名元组\"><a href=\"#命名元组和未命名元组\" class=\"headerlink\" title=\"命名元组和未命名元组\"></a>命名元组和未命名元组</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> unnamed = (<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> named = (first: <span class=\"string\">\"one\"</span>, second: <span class=\"string\">\"two\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"赋值和元组\"><a href=\"#赋值和元组\" class=\"headerlink\" title=\"赋值和元组\"></a>赋值和元组</h3><blockquote>\n<p>有相同元素数量的元组类型之间赋值，其中每个右侧元素都可被隐式转换为相应的左侧元素</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// The 'arity' and 'shape' of all these tuples are compatible. </span></span><br><span class=\"line\"><span class=\"comment\">// The only difference is the field names being used.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> unnamed = (<span class=\"number\">42</span>, <span class=\"string\">\"The meaning of life\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> anonymous = (<span class=\"number\">16</span>, <span class=\"string\">\"a perfect square\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> named = (Answer: <span class=\"number\">42</span>, Message: <span class=\"string\">\"The meaning of life\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> differentNamed = (SecretConstant: <span class=\"number\">42</span>, Label: <span class=\"string\">\"The meaning of life\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>前两个变量（unnamed 和 anonymous）没有为元素提供语义名称。 字段名称为 Item1 和 Item2。 后两个变量（named 和 differentName）为元素提供了语义名称。 这两个元组具有不同的元素名称</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unnamed = named;</span><br><span class=\"line\"></span><br><span class=\"line\">named = unnamed;</span><br><span class=\"line\"><span class=\"comment\">// 'named' still has fields that can be referred to</span></span><br><span class=\"line\"><span class=\"comment\">// as 'answer', and 'message':</span></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;named.Answer&#125;</span>, <span class=\"subst\">&#123;named.Message&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unnamed to unnamed:</span></span><br><span class=\"line\">anonymous = unnamed;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// named tuples.</span></span><br><span class=\"line\">named = differentNamed;</span><br><span class=\"line\"><span class=\"comment\">// The field names are not assigned. 'named' still has </span></span><br><span class=\"line\"><span class=\"comment\">// fields that can be referred to as 'answer' and 'message':</span></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;named.Answer&#125;</span>, <span class=\"subst\">&#123;named.Message&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// With implicit conversions:</span></span><br><span class=\"line\"><span class=\"comment\">// int can be implicitly converted to long</span></span><br><span class=\"line\">(<span class=\"keyword\">long</span>, <span class=\"keyword\">string</span>) conversion = named;</span><br></pre></td></tr></table></figure>\n<h3 id=\"作为方法返回值的元组\"><a href=\"#作为方法返回值的元组\" class=\"headerlink\" title=\"作为方法返回值的元组\"></a>作为方法返回值的元组</h3><blockquote>\n<p>元组最常见的用途之一是作为方法返回值</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">static</span> (<span class=\"params\"><span class=\"keyword\">double</span>, <span class=\"keyword\">double</span>, <span class=\"keyword\">int</span></span>) <span class=\"title\">ComputeSumAndSumOfSquares</span>(<span class=\"params\">IEnumerable&lt;<span class=\"keyword\">double</span>&gt; sequence</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> sumOfSquares = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> sequence)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        sum += item;</span><br><span class=\"line\">        sumOfSquares += item * item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (sum, sumOfSquares, count);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>建议为从方法返回的元组的元素提供语义名称</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">static</span> (<span class=\"params\"><span class=\"keyword\">int</span> Count, <span class=\"keyword\">double</span> Sum, <span class=\"keyword\">double</span> SumOfSquares</span>) <span class=\"title\">ComputeSumAndSumOfSquares</span>(<span class=\"params\">IEnumerable&lt;<span class=\"keyword\">double</span>&gt; sequence</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"析构\"><a href=\"#析构\" class=\"headerlink\" title=\"析构\"></a>析构</h3><blockquote>\n<p>通过对方法返回的元组进行析构，可以解封元组中的所有项</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">int</span> count, <span class=\"keyword\">double</span> sum, <span class=\"keyword\">double</span> sumOfSquares) = ComputeSumAndSumOfSquares(sequence);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在括号外使用 var 关键字，隐式声明元组中每个字段的类型化变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (sum, sumOfSquares, count) = ComputeSumAndSumOfSquares(sequence);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在括号内将 var 关键字与任意或全部变量声明结合使用</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">double</span> sum, <span class=\"keyword\">var</span> sumOfSquares, <span class=\"keyword\">var</span> count) = ComputeSumAndSumOfSquares(sequence);</span><br></pre></td></tr></table></figure>\n<h3 id=\"析构用户定义类型\"><a href=\"#析构用户定义类型\" class=\"headerlink\" title=\"析构用户定义类型\"></a>析构用户定义类型</h3><blockquote>\n<p>定义一个或多个赋值给任意数量的 out 变量的 Deconstruct 方法</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FirstName &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> LastName &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>(<span class=\"params\"><span class=\"keyword\">string</span> first, <span class=\"keyword\">string</span> last</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        FirstName = first;</span><br><span class=\"line\">        LastName = last;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> firstName, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> lastName</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        firstName = FirstName;</span><br><span class=\"line\">        lastName = LastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>该析构方法支持从 Person 赋值给两个表示 FirstName 和 LastName 属性的字符串</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Althea\"</span>, <span class=\"string\">\"Goodwin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> (first, last) = p;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Deconstruct 方法可以是一种扩展方法，用于解封对象的可访问数据成员。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Student</span> : <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> GPA &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Student</span>(<span class=\"params\"><span class=\"keyword\">string</span> first, <span class=\"keyword\">string</span> last, <span class=\"keyword\">double</span> gpa</span>) :</span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"title\">base</span>(<span class=\"params\">first, last</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        GPA = gpa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Extensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">this</span> Student s, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> first, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> last, <span class=\"keyword\">out</span> <span class=\"keyword\">double</span> gpa</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        first = s.FirstName;</span><br><span class=\"line\">        last = s.LastName;</span><br><span class=\"line\">        gpa = s.GPA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>析构运算符不参与测试相等。 下面的示例生成编译器错误 CS0019</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Althea\"</span>, <span class=\"string\">\"Goodwin\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((<span class=\"string\">\"Althea\"</span>, <span class=\"string\">\"Goodwin\"</span>) == p)</span><br><span class=\"line\">    Console.WriteLine(p);</span><br></pre></td></tr></table></figure>\n<h3 id=\"元组作为-out-参数\"><a href=\"#元组作为-out-参数\" class=\"headerlink\" title=\"元组作为 out 参数\"></a>元组作为 out 参数</h3><blockquote>\n<p>元组自身可用作 out 参数 。不要与前面提到的析构函数部分中的任何多义性混淆。在方法调用中，只需描述元组的形状：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dictionary&lt;<span class=\"keyword\">int</span>, (<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>)&gt; dict = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">int</span>, (<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>)&gt;();</span><br><span class=\"line\">dict.Add(<span class=\"number\">1</span>, (<span class=\"number\">234</span>, <span class=\"string\">\"First!\"</span>));</span><br><span class=\"line\">dict.Add(<span class=\"number\">2</span>, (<span class=\"number\">345</span>, <span class=\"string\">\"Second\"</span>));</span><br><span class=\"line\">dict.Add(<span class=\"number\">3</span>, (<span class=\"number\">456</span>, <span class=\"string\">\"Last\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TryGetValue already demonstrates using out parameters</span></span><br><span class=\"line\">dict.TryGetValue(<span class=\"number\">2</span>, <span class=\"keyword\">out</span> (<span class=\"keyword\">int</span> num, <span class=\"keyword\">string</span> place) pair);</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;pair.num&#125;</span>: <span class=\"subst\">&#123;pair.place&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Output:</span></span><br><span class=\"line\"><span class=\"comment\"> * 345: Second</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>还可以使用 unnamed 元组，并将其字段作为 Item1 和 Item2 引用</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict.TryGetValue(<span class=\"number\">2</span>, <span class=\"keyword\">out</span> (<span class=\"keyword\">int</span>, <span class=\"keyword\">string</span>) pair);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;pair.Item1&#125;</span>: <span class=\"subst\">&#123;pair.Item2&#125;</span>\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"弃元\"><a href=\"#弃元\" class=\"headerlink\" title=\"弃元\"></a><span style=\"color:#0366d6;\">弃元</span></h2><blockquote>\n<p>是一种在应用程序代码中人为取消使用的临时虚拟变量。 弃元相当于未赋值的变量；<br>通过将下划线 (_) 赋给一个变量作为其变量名，指示该变量为一个占位符变量。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(_, _, area) = city.GetCityInformation(cityName);</span><br></pre></td></tr></table></figure>\n<h3 id=\"元组和对象析构\"><a href=\"#元组和对象析构\" class=\"headerlink\" title=\"元组和对象析构\"></a>元组和对象析构</h3><details>\n<summary>展开查看 </summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> (_, _, _, pop1, _, pop2) = QueryCityDataForYears(<span class=\"string\">\"New York City\"</span>, <span class=\"number\">1960</span>, <span class=\"number\">2010</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"Population change, 1960 to 2010: <span class=\"subst\">&#123;pop2 - pop1:N0&#125;</span>\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">static</span> (<span class=\"params\"><span class=\"keyword\">string</span>, <span class=\"keyword\">double</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>, <span class=\"keyword\">int</span></span>) <span class=\"title\">QueryCityDataForYears</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, <span class=\"keyword\">int</span> year1, <span class=\"keyword\">int</span> year2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> population1 = <span class=\"number\">0</span>, population2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> area = <span class=\"number\">0</span>;</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name == <span class=\"string\">\"New York City\"</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            area = <span class=\"number\">468.48</span>; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (year1 == <span class=\"number\">1960</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                population1 = <span class=\"number\">7781984</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (year2 == <span class=\"number\">2010</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                population2 = <span class=\"number\">8175133</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (name, area, year1, population1, year2, population2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"string\">\"\"</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The example displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<blockquote>\n<p>类、结构或接口的 Deconstruct 方法还允许从对象中检索和析构一组特定的数据。 如果想只使用析构值的一个子集时，可使用弃元。</p>\n</blockquote>\n<details>\n<summary>展开查看 </summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> FirstName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> MiddleName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> LastName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> City &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> State &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span>(<span class=\"params\"><span class=\"keyword\">string</span> fname, <span class=\"keyword\">string</span> mname, <span class=\"keyword\">string</span> lname, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  <span class=\"keyword\">string</span> cityName, <span class=\"keyword\">string</span> stateName</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        FirstName = fname;</span><br><span class=\"line\">        MiddleName = mname;</span><br><span class=\"line\">        LastName = lname;</span><br><span class=\"line\">        City = cityName;</span><br><span class=\"line\">        State = stateName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Return the first and last name.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> fname, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> lname</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        fname = FirstName;</span><br><span class=\"line\">        lname = LastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> fname, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> mname, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> lname</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        fname = FirstName;</span><br><span class=\"line\">        mname = MiddleName;</span><br><span class=\"line\">        lname = LastName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">string</span> fname, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> lname, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                            <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> city, <span class=\"keyword\">out</span> <span class=\"keyword\">string</span> state</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        fname = FirstName;</span><br><span class=\"line\">        lname = LastName;</span><br><span class=\"line\">        city = City;</span><br><span class=\"line\">        state = State;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"John\"</span>, <span class=\"string\">\"Quincy\"</span>, <span class=\"string\">\"Adams\"</span>, <span class=\"string\">\"Boston\"</span>, <span class=\"string\">\"MA\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// &lt;Snippet1&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">// Deconstruct the person object.</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> (fName, _, city, _) = p;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">$\"Hello <span class=\"subst\">&#123;fName&#125;</span> of <span class=\"subst\">&#123;city&#125;</span>!\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// The example displays the following output:</span></span><br><span class=\"line\">        <span class=\"comment\">//      Hello John of Boston!</span></span><br><span class=\"line\">        <span class=\"comment\">// &lt;/Snippet1&gt;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The example displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">//    Hello John Adams of Boston, MA!</span></span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"使用-switch-和-is-的模式匹配\"><a href=\"#使用-switch-和-is-的模式匹配\" class=\"headerlink\" title=\"使用 switch 和 is 的模式匹配\"></a>使用 switch 和 is 的模式匹配</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Globalization;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">object</span>[] objects = &#123; CultureInfo.CurrentCulture, </span><br><span class=\"line\">                           CultureInfo.CurrentCulture.DateTimeFormat, </span><br><span class=\"line\">                           CultureInfo.CurrentCulture.NumberFormat,</span><br><span class=\"line\">                           <span class=\"keyword\">new</span> ArgumentException(), <span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> obj <span class=\"keyword\">in</span> objects)</span><br><span class=\"line\">         ProvidesFormatInfo(obj);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ProvidesFormatInfo</span>(<span class=\"params\"><span class=\"keyword\">object</span> obj</span>)         </span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (obj)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> IFormatProvider fmt:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;fmt&#125;</span> object\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"literal\">null</span>:</span><br><span class=\"line\">            Console.Write(<span class=\"string\">\"A null object reference: \"</span>);</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Its use could result in a NullReferenceException\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"keyword\">object</span> _:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"Some object type without format information\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-out-参数调用方法\"><a href=\"#使用-out-参数调用方法\" class=\"headerlink\" title=\"使用 out 参数调用方法\"></a>使用 out 参数调用方法</h3><blockquote>\n<p>因为该示例侧重验证日期字符串，而不是解析它来提取日期，所以方法的 out 参数为占位符。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">string</span>[] dateStrings = &#123;<span class=\"string\">\"05/01/2018 14:57:32.8\"</span>, <span class=\"string\">\"2018-05-01 14:57:32.8\"</span>,</span><br><span class=\"line\">                              <span class=\"string\">\"2018-05-01T14:57:32.8375298-04:00\"</span>, <span class=\"string\">\"5/01/2018\"</span>,</span><br><span class=\"line\">                              <span class=\"string\">\"5/01/2018 14:57:32.80 -07:00\"</span>, </span><br><span class=\"line\">                              <span class=\"string\">\"1 May 2018 2:57:32.8 PM\"</span>, <span class=\"string\">\"16-05-2018 1:00:32 PM\"</span>, </span><br><span class=\"line\">                              <span class=\"string\">\"Fri, 15 May 2018 20:10:57 GMT\"</span> &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> dateString <span class=\"keyword\">in</span> dateStrings)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (DateTime.TryParse(dateString, <span class=\"keyword\">out</span> _)) </span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"'<span class=\"subst\">&#123;dateString&#125;</span>': valid\"</span>);</span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"'<span class=\"subst\">&#123;dateString&#125;</span>': invalid\"</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"独立弃元\"><a href=\"#独立弃元\" class=\"headerlink\" title=\"独立弃元\"></a>独立弃元</h3><blockquote>\n<p>可使用独立弃元来指示要忽略的任何变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Threading.Tasks;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Example</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;</span><br><span class=\"line\">      ExecuteAsyncMethods().Wait();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">ExecuteAsyncMethods</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>   &#123;    </span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">\"About to launch a task...\"</span>);</span><br><span class=\"line\">      _ = Task.Run(() =&gt; &#123; <span class=\"keyword\">var</span> iterations = <span class=\"number\">0</span>;  </span><br><span class=\"line\">                           <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> ctr = <span class=\"number\">0</span>; ctr &lt; <span class=\"keyword\">int</span>.MaxValue; ctr++)</span><br><span class=\"line\">                              iterations++;</span><br><span class=\"line\">                           Console.WriteLine(<span class=\"string\">\"Completed looping operation...\"</span>);</span><br><span class=\"line\">                           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException();</span><br><span class=\"line\">                         &#125;);</span><br><span class=\"line\">      <span class=\"keyword\">await</span> Task.Delay(<span class=\"number\">5000</span>);                        </span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">\"Exiting after 5 second delay\"</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>_ 也是有效标识符。 当在支持的上下文之外使用时，_ 不视为占位符，而视为有效变量。 如果名为 _ 的标识符已在范围内，则使用 _ 作为独立占位符可能导致</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ShowValue</span>(<span class=\"params\"><span class=\"keyword\">int</span> _</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">byte</span>[] arr = &#123; <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\">   _ = BitConverter.ToInt32(arr, <span class=\"number\">0</span>);</span><br><span class=\"line\">   Console.WriteLine(_);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The example displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">RoundTrips</span>(<span class=\"params\"><span class=\"keyword\">int</span> _</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">string</span> <span class=\"keyword\">value</span> = _.ToString();</span><br><span class=\"line\">   <span class=\"keyword\">int</span> newValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">   _ = Int32.TryParse(<span class=\"keyword\">value</span>, <span class=\"keyword\">out</span> newValue);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> _ == newValue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// The example displays the following compiler error:</span></span><br><span class=\"line\"><span class=\"comment\">//      error CS0029: Cannot implicitly convert type 'bool' to 'int'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"模式匹配\"><a href=\"#模式匹配\" class=\"headerlink\" title=\"模式匹配\"></a><span style=\"color:#0366d6;\">模式匹配</span></h2><h3 id=\"is-类型模式表达式\"><a href=\"#is-类型模式表达式\" class=\"headerlink\" title=\"is 类型模式表达式\"></a>is 类型模式表达式</h3><blockquote>\n<p>过使用 is 表达式的扩展在测试成功时对变量赋值</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">ComputeAreaModernIs</span>(<span class=\"params\"><span class=\"keyword\">object</span> shape</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shape <span class=\"keyword\">is</span> Square s)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.Side * s.Side;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shape <span class=\"keyword\">is</span> Circle c)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c.Radius * c.Radius * Math.PI;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (shape <span class=\"keyword\">is</span> Rectangle r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r.Height * r.Length;</span><br><span class=\"line\">    <span class=\"comment\">// elided</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(</span><br><span class=\"line\">        message: <span class=\"string\">\"shape is not a recognized shape\"</span>,</span><br><span class=\"line\">        paramName: <span class=\"keyword\">nameof</span>(shape));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配-switch-语句\"><a href=\"#匹配-switch-语句\" class=\"headerlink\" title=\"匹配 switch 语句\"></a>匹配 switch 语句</h3><blockquote>\n<p>switch 语句支持的唯一模式是常量模式。 它进一步限制为数字类型和 string 类型。 这些限制已移除，现在可以使用类型模式编写 switch 语句</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">ComputeAreaModernSwitch</span>(<span class=\"params\"><span class=\"keyword\">object</span> shape</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (shape)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Square s:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.Side * s.Side;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Circle c:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c.Radius * c.Radius * Math.PI;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Rectangle r:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r.Height * r.Length;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(</span><br><span class=\"line\">                message: <span class=\"string\">\"shape is not a recognized shape\"</span>,</span><br><span class=\"line\">                paramName: <span class=\"keyword\">nameof</span>(shape));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"case-表达式中的-when-语句\"><a href=\"#case-表达式中的-when-语句\" class=\"headerlink\" title=\"case 表达式中的 when 语句\"></a>case 表达式中的 when 语句</h3><blockquote>\n<p>可以通过对 case 标签使用 when 子句，为面积为 0 的那些形状创建特殊 case。 边长为 0 的正方形，或半径为 0 的圆形的面积为 0。 可通过对 case 标签使用 when 语句来指定该条件</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">ComputeArea_Version3</span>(<span class=\"params\"><span class=\"keyword\">object</span> shape</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (shape)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Square s <span class=\"keyword\">when</span> s.Side == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Circle c <span class=\"keyword\">when</span> c.Radius == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> Square s:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> s.Side * s.Side;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Circle c:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c.Radius * c.Radius * Math.PI;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(</span><br><span class=\"line\">                message: <span class=\"string\">\"shape is not a recognized shape\"</span>,</span><br><span class=\"line\">                paramName: <span class=\"keyword\">nameof</span>(shape));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"case-表达式中的-var-声明\"><a href=\"#case-表达式中的-var-声明\" class=\"headerlink\" title=\"case 表达式中的 var 声明\"></a>case 表达式中的 var 声明</h3><blockquote>\n<p>第一条规则是 var 声明遵循正常的类型推理规则：推理出类型是 switch 表达式的静态类型。 根据此规则，类型始终匹配。<br>第二个规则是，var 声明没有其他类型模式表达式中包含的 null 检查。 也就是说，变量可为 NULL，只有在这种情况下，才必须执行 NULL 检查。<br>这两个规则表示，在许多情况下，case 表达式中的 var 声明匹配与 default 表达式相同的条件。 因为任何非默认事例都优先于 default 事例，所以永远不会执行 default 事例</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">CreateShape</span>(<span class=\"params\"><span class=\"keyword\">string</span> shapeDescription</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (shapeDescription)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"circle\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Circle(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"square\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Square(<span class=\"number\">4</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"large-circle\"</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Circle(<span class=\"number\">12</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">case</span> <span class=\"keyword\">var</span> o <span class=\"title\">when</span> (<span class=\"params\">o?.Trim(</span>).Length ?? 0)</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\">// white space</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"invalid shape description\"</span>;</span><br><span class=\"line\">    &#125;            </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a><span style=\"color:#0366d6;\">ref</span></h2><h3 id=\"ref-返回值和-ref-局部变量示例\"><a href=\"#ref-返回值和-ref-局部变量示例\" class=\"headerlink\" title=\"ref 返回值和 ref 局部变量示例\"></a>ref 返回值和 ref 局部变量示例</h3><blockquote>\n<p>通过调用 GetBookByTitle 方法，可按引用返回个别 book 对象。</p>\n</blockquote>\n<details>\n<summary>展开查看 </summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Book</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Author;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Title;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BookCollection</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Book[] books = &#123; <span class=\"keyword\">new</span> Book &#123; Title = <span class=\"string\">\"Call of the Wild, The\"</span>, Author = <span class=\"string\">\"Jack London\"</span> &#125;,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> Book &#123; Title = <span class=\"string\">\"Tale of Two Cities, A\"</span>, Author = <span class=\"string\">\"Charles Dickens\"</span> &#125;</span><br><span class=\"line\">                       &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Book nobook = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">ref</span> Book <span class=\"title\">GetBookByTitle</span>(<span class=\"params\"><span class=\"keyword\">string</span> title</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> ctr = <span class=\"number\">0</span>; ctr &lt; books.Length; ctr++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (title == books[ctr].Title)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">ref</span> books[ctr];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">ref</span> nobook;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ListBooks</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> book <span class=\"keyword\">in</span> books)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;book.Title&#125;</span>, by <span class=\"subst\">&#123;book.Author&#125;</span>\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Console.WriteLine();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<blockquote>\n<p>调用方将 GetBookByTitle 方法所返回的值存储为 ref 局部变量时，调用方对返回值所做的更改将反映在 BookCollection 对象中，如下例所示</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> bc = <span class=\"keyword\">new</span> BookCollection();</span><br><span class=\"line\">bc.ListBooks();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ref</span> <span class=\"keyword\">var</span> book = <span class=\"keyword\">ref</span> bc.GetBookByTitle(<span class=\"string\">\"Call of the Wild, The\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (book != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    book = <span class=\"keyword\">new</span> Book &#123; Title = <span class=\"string\">\"Republic, The\"</span>, Author = <span class=\"string\">\"Plato\"</span> &#125;;</span><br><span class=\"line\">bc.ListBooks();</span><br><span class=\"line\"><span class=\"comment\">// The example displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">//       Call of the Wild, The, by Jack London</span></span><br><span class=\"line\"><span class=\"comment\">//       Tale of Two Cities, A, by Charles Dickens</span></span><br><span class=\"line\"><span class=\"comment\">//       </span></span><br><span class=\"line\"><span class=\"comment\">//       Republic, The, by Plato</span></span><br><span class=\"line\"><span class=\"comment\">//       Tale of Two Cities, A, by Charles Dickens</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Ref-readonly-局部变量\"><a href=\"#Ref-readonly-局部变量\" class=\"headerlink\" title=\"Ref readonly 局部变量\"></a>Ref readonly 局部变量</h3><blockquote>\n<p>Ref readonly 局部变量用于指代在其签名中具有 ref readonly 并使用 return ref 的方法或属性返回的值。 ref readonly 变量将 ref 本地变量的属性与 readonly 变量结合使用：它是所分配到的存储的别名，且无法修改</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ref</span> <span class=\"keyword\">readonly</span> Vector3 <span class=\"title\">Test1</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// can pass an RValue as \"in\" (via a temp copy)</span></span><br><span class=\"line\">    <span class=\"comment\">// but the result is not safe to return</span></span><br><span class=\"line\">    <span class=\"comment\">// because the RValue argument was not safe to return by reference</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">ref</span> <span class=\"title\">Test2</span>(<span class=\"params\"><span class=\"keyword\">default</span>(Vector3</span>))</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ref</span> <span class=\"keyword\">readonly</span> Vector3 <span class=\"title\">Test2</span>(<span class=\"params\"><span class=\"keyword\">in</span> Vector3 r</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this is ok, r is returnable</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">ref</span> r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Ref-结构类型\"><a href=\"#Ref-结构类型\" class=\"headerlink\" title=\"Ref 结构类型\"></a>Ref 结构类型</h3><blockquote>\n<p>将 ref 修饰符添加到 struct 声明定义了该类型的实例必须为堆栈分配。 换言之，永远不能在作为另一类的成员的堆上创建这些类型的实例。</p>\n</blockquote>\n<ul>\n<li>不能对ref struct装箱。无法向属于object、dynamic或任何接口类型的变量分配 ref struct 类型。</li>\n<li>ref struct 类型不能实现接口。</li>\n<li>不能将 ref struct 声明为类或常规结构的字段成员。这包括声明自动实现的属性，后者会创建一个由编译器生成的支持字段。</li>\n<li>不能声明异步方法中属于 ref struct 类型的本地变量。不能在返回类似Task、Task<TResult>或Task 类型的同  步方法中声明它们。</li>\n<li>无法在迭代器中声明ref struct本地变量。</li>\n<li>无法捕获Lambda表达式或本地函数中的ref struct变量。</li>\n</ul>\n<blockquote>\n<p>可以组合修饰符以将结构声明为 readonly ref。 readonly ref struct 兼具 ref struct 和 readonly struct </p>\n</blockquote>\n<h1 id=\"C-7-1语法\"><a href=\"#C-7-1语法\" class=\"headerlink\" title=\"C#7.1语法\"></a><span style=\"color:#0366d6;\">C#7.1语法</span></h1><h2 id=\"异步-main-方法\"><a href=\"#异步-main-方法\" class=\"headerlink\" title=\"异步 main 方法\"></a><span style=\"color:#0366d6;\">异步 main 方法</span></h2><blockquote>\n<p>异步 Main 方法使你能够在 Main 方法中使用 await 关键字。 在过去，需要编写</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DoAsyncWork().GetAwaiter().GetResult();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现在</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// This could also be replaced with the body</span></span><br><span class=\"line\">    <span class=\"comment\">// DoAsyncWork, including its await expressions:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> DoAsyncWork();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型类型参数的模式匹配\"><a href=\"#泛型类型参数的模式匹配\" class=\"headerlink\" title=\"泛型类型参数的模式匹配\"></a><span style=\"color:#0366d6;\">泛型类型参数的模式匹配</span></h2><blockquote>\n<p>自 C# 7.1 起，is 和 switch 类型模式的模式表达式的类型可能为泛型类型参数。 这可能在检查 struct 或 class 类型且要避免装箱时最有用。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> M&lt;T1, T2&gt;(T1 t1, T2 t2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (t2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> T1 _:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> T2 _:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"元组-1\"><a href=\"#元组-1\" class=\"headerlink\" title=\"元组\"></a><span style=\"color:#0366d6;\">元组</span></h2><h3 id=\"元组名称投影\"><a href=\"#元组名称投影\" class=\"headerlink\" title=\"元组名称投影\"></a>元组名称投影</h3><blockquote>\n<p>元组名称投影，如果未提供显式名称，上述名称将优先于任何投影的名称。<br>以下使用名称explicitFieldOne和explicitFieldTwo而不是localVariableOne和localVariableTwo</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> localVariableOne = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> localVariableTwo = <span class=\"string\">\"some text\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> tuple = (explicitFieldOne: localVariableOne, explicitFieldTwo: localVariableTwo);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下初始化表达式具有字段名称 Item1其值为 42和 stringContent（其值为“The answer to everything”）</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stringContent = <span class=\"string\">\"The answer to everything\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mixedTuple = (<span class=\"number\">42</span>, stringContent);</span><br></pre></td></tr></table></figure>\n<h2 id=\"默认文本表达式\"><a href=\"#默认文本表达式\" class=\"headerlink\" title=\"默认文本表达式\"></a><span style=\"color:#0366d6;\">默认文本表达式</span></h2><blockquote>\n<p>默认文本表达式是针对默认值表达式的一项增强功能。 这些表达式将变量初始化为默认值。 过去会这么编写</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">bool</span>&gt; whereClause = <span class=\"keyword\">default</span>(Func&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">bool</span>&gt;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现在，可以省略掉初始化右侧的类型：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Func&lt;<span class=\"keyword\">string</span>, <span class=\"keyword\">bool</span>&gt; whereClause = <span class=\"keyword\">default</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"引用程序集生成\"><a href=\"#引用程序集生成\" class=\"headerlink\" title=\"引用程序集生成\"></a><span style=\"color:#0366d6;\">引用程序集生成</span></h2><blockquote>\n<p>有两个新编译器选项可生成仅引用程序集：-refout 和 -refonly</p>\n</blockquote>\n<h1 id=\"C-7-2语法\"><a href=\"#C-7-2语法\" class=\"headerlink\" title=\"C#7.2语法\"></a><span style=\"color:#0366d6;\">C#7.2语法</span></h1><h2 id=\"非尾随命名参数\"><a href=\"#非尾随命名参数\" class=\"headerlink\" title=\"非尾随命名参数\"></a><span style=\"color:#0366d6;\">非尾随命名参数</span></h2><blockquote>\n<p>没有后接任何位置实参或</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以 C<span class=\"meta\"># 7.2 开头，则它们就有效并用在正确位置 。 在以下示例中，形参 orderNum 位于正确的位置，但未显式命名。</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以 C# 7.2 开头，则它们就有效并用在正确位置 。 在以下示例中，形参 orderNum 位于正确的位置，但未显式命名。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrintOrderDetails(sellerName: <span class=\"string\">\"Gift Shop\"</span>, <span class=\"number\">31</span>, productName: <span class=\"string\">\"Red Mug\"</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>遵循任何无序命名参数的位置参数无效。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This generates CS1738: Named argument specifications must appear after all fixed arguments have been specified.</span></span><br><span class=\"line\">PrintOrderDetails(productName: <span class=\"string\">\"Red Mug\"</span>, <span class=\"number\">31</span>, <span class=\"string\">\"Gift Shop\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"in\"><a href=\"#in\" class=\"headerlink\" title=\"in\"></a><span style=\"color:#0366d6;\">in</span></h2><blockquote>\n<p>作为 in 参数传递的变量在方法调用中传递之前必须进行初始化。 但是，所调用的方法可能不会分配值或修改参数。<br>in 参数修饰符可在 C# 7.2 及更高版本中使用。 以前的版本生成编译器错误 CS8107（“‘readonly 引用’功能在 C# 7.0 中不可用。 请使用语言版本 7.2 或更高版本。”）</p>\n</blockquote>\n<blockquote>\n<p>通过理解使用 in 参数的动机，可以理解使用按值方法和使用 in 参数方法的重载决策规则。 定义使用 in 参数的方法是一项潜在的性能优化。 某些 struct 类型参数可能很大，在紧凑的循环或关键代码路径中调用方法时，复制这些结构的成本就很高。 方法声明 in 参数以指定参数可能按引用安全传递，因为所调用的方法不修改该参数的状态。 按引用传递这些参数可以避免（可能产生的）高昂的复制成本。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Method</span>(<span class=\"params\"><span class=\"keyword\">int</span> argument</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// implementation removed</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Method</span>(<span class=\"params\"><span class=\"keyword\">in</span> <span class=\"keyword\">int</span> argument</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// implementation removed</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Method(<span class=\"number\">5</span>); <span class=\"comment\">// Calls overload passed by value</span></span><br><span class=\"line\">Method(<span class=\"number\">5L</span>); <span class=\"comment\">// CS1503: no implicit conversion from long to int</span></span><br><span class=\"line\"><span class=\"keyword\">short</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">Method(s); <span class=\"comment\">// Calls overload passed by value.</span></span><br><span class=\"line\">Method(<span class=\"keyword\">in</span> s); <span class=\"comment\">// CS1503: cannot convert from in short to in int</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">42</span>;</span><br><span class=\"line\">Method(i); <span class=\"comment\">// Calls overload passed by value</span></span><br><span class=\"line\">Method(<span class=\"keyword\">in</span> i); <span class=\"comment\">// passed by readonly reference, explicitly using `in`</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"private-protected-访问修饰符\"><a href=\"#private-protected-访问修饰符\" class=\"headerlink\" title=\"private protected 访问修饰符\"></a><span style=\"color:#0366d6;\">private protected 访问修饰符</span></h2><blockquote>\n<p>新的复合访问修饰符：private protected 指示可通过包含同一程序集中声明的类或派生类来访问成员。 虽然 protected internal 允许通过同一程序集中的类或派生类进行访问，但 private protected 限制对同一程序集中声明的派生类的访问。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Assembly1.cs  </span></span><br><span class=\"line\"><span class=\"comment\">// Compile with: /target:library  </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> myValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedClass1</span> : <span class=\"title\">BaseClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Access</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> baseObject = <span class=\"keyword\">new</span> BaseClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Error CS1540, because myValue can only be accessed by</span></span><br><span class=\"line\">        <span class=\"comment\">// classes derived from BaseClass.</span></span><br><span class=\"line\">        <span class=\"comment\">// baseObject.myValue = 5;  </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// OK, accessed through the current derived class instance</span></span><br><span class=\"line\">        myValue = <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Assembly2.cs  </span></span><br><span class=\"line\"><span class=\"comment\">// Compile with: /reference:Assembly1.dll  </span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">DerivedClass2</span> : <span class=\"title\">BaseClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Access</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Error CS0122, because myValue can only be</span></span><br><span class=\"line\">        <span class=\"comment\">// accessed by types in Assembly1</span></span><br><span class=\"line\">        <span class=\"comment\">// myValue = 10;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数值文字中的前导下划线\"><a href=\"#数值文字中的前导下划线\" class=\"headerlink\" title=\"数值文字中的前导下划线\"></a><span style=\"color:#0366d6;\">数值文字中的前导下划线</span></h2><blockquote>\n<p>C# 7.0 中实现了对数字分隔符的支持，但这不允许文字值的第一个字符是 _。 十六进制文本和二进制文件现可以 _ 开头。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> binaryValue = <span class=\"number\">0b</span>_0101_0101;</span><br></pre></td></tr></table></figure>\n<h2 id=\"条件-ref-表达式\"><a href=\"#条件-ref-表达式\" class=\"headerlink\" title=\"条件 ref 表达式\"></a><span style=\"color:#0366d6;\">条件 ref 表达式</span></h2><blockquote>\n<p>条件表达式可能生成 ref 结果而不是值</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ref</span> <span class=\"keyword\">var</span> r = <span class=\"keyword\">ref</span> (arr != <span class=\"literal\">null</span> ? <span class=\"keyword\">ref</span> arr[<span class=\"number\">0</span>] : <span class=\"keyword\">ref</span> otherArr[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<h2 id=\"安全高效的代码的增强功能\"><a href=\"#安全高效的代码的增强功能\" class=\"headerlink\" title=\"安全高效的代码的增强功能\"></a><span style=\"color:#0366d6;\">安全高效的代码的增强功能</span></h2><blockquote>\n<p>todo</p>\n</blockquote>\n<h2 id=\"C-7-3\"><a href=\"#C-7-3\" class=\"headerlink\" title=\"C# 7.3\"></a><span style=\"color:#0366d6;\">C# 7.3</span></h2><h3 id=\"相等和元组\"><a href=\"#相等和元组\" class=\"headerlink\" title=\"相等和元组\"></a><span style=\"color:#0366d6;\">相等和元组</span></h3><blockquote>\n<p>从 C# 7.3 开始，元组类型支持 == 和 != 运算符。 这些运算符按顺序将左边参数的每个成员与右边参数的每个成员进行比较。 这些比较将发生短路。 只要有一对不相等，它们即会停止计算成员。 以下代码示例使用 ==，但比较规则均适用于 !=。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> left = (a: <span class=\"number\">5</span>, b: <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> right = (a: <span class=\"number\">5</span>, b: <span class=\"number\">10</span>);</span><br><span class=\"line\">Console.WriteLine(left == right); <span class=\"comment\">// displays 'true'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>元组成员名称不参与相等测试。 但是，如果其中一个操作数是含有显式名称的元组文本，则当这些名称与其他操作数的名称不匹配时，编译器将生成警告 CS8383。 在两个操作数都为元组文本的情况下，警告位于右侧操作数，</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">string</span> b) pair = (<span class=\"number\">1</span>, <span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">(<span class=\"keyword\">int</span> z, <span class=\"keyword\">string</span> y) another = (<span class=\"number\">1</span>, <span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">Console.WriteLine(pair == another); <span class=\"comment\">// true. Member names don't participate.</span></span><br><span class=\"line\">Console.WriteLine(pair == (z: <span class=\"number\">1</span>, y: <span class=\"string\">\"Hello\"</span>)); <span class=\"comment\">// warning: literal contains different member nam</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"其它todo\"><a href=\"#其它todo\" class=\"headerlink\" title=\"其它todo\"></a><span style=\"color:#0366d6;\">其它todo</span></h3>"},{"title":"C#8.0语法","date":"2020-02-28T16:00:00.000Z","_content":"C#8.0语法（发布于 2019，.NET Core 3.0）\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#8.0语法</span>\n## <span style=\"color:#0366d6;\">内插逐字字符串的增强功能</span>\n>内插逐字字符串中 $ 和 @ 标记的顺序可以任意安排：$@\"...\" 和 @$\"...\" 均为有效的内插逐字字符串。 在早期 C# 版本中，$ 标记必须出现在 @ 标记之前\n## <span style=\"color:#0366d6;\">Null 合并赋值</span>\n>C# 8.0 引入了 null 合并赋值运算符 ??=。 仅当左操作数计算为 null 时，才能使用运算符 ??= 将其右操作数的值分配给左操作数\n```csharp\nList<int> numbers = null;\nint? i = null;\n\nnumbers ??= new List<int>();\nnumbers.Add(i ??= 17);\nnumbers.Add(i ??= 20);\n\nConsole.WriteLine(string.Join(\" \", numbers));  // output: 17 17\nConsole.WriteLine(i);  // output: 17\n```\n## <span style=\"color:#0366d6;\">using 声明</span>\n>using 声明 是前面带 using 关键字的变量声明。 它指示编译器声明的变量应在封闭范围的末尾进行处理\n```csharp\nstatic int WriteLinesToFile(IEnumerable<string> lines)\n{\nusing var file = new System.IO.StreamWriter(\"WriteLines2.txt\");\n// Notice how we declare skippedLines after the using statement.\nint skippedLines = 0;\nforeach (string line in lines)\n{\n    if (!line.Contains(\"Second\"))\n    {\n        file.WriteLine(line);\n    }\n    else\n    {\n        skippedLines++;\n    }\n}\n// Notice how skippedLines is in scope here.\nreturn skippedLines;\n// file is disposed here\n}\n```\n## <span style=\"color:#0366d6;\">可处置的 ref 结构</span>\n>用 ref 修饰符声明的 struct 可能无法实现任何接口，因此无法实现 IDisposable。 因此，要能够处理 ref struct，它必须有一个可访问的 void Dispose() 方法。 此功能同样适用于 readonly ref struct 声明。\n## <span style=\"color:#0366d6;\">静态本地函数</span>\n>考虑下列代码。 本地函数 LocalFunction 访问在封闭范围（方法 M）中声明的变量 y。 因此，不能用 static 修饰符来声明 LocalFunction：\n```csharp\nint M()\n{\nint y;\nLocalFunction();\nreturn y;\n\nvoid LocalFunction() => y = 0;\n}\n```\n>下面的代码包含一个静态本地函数。 它可以是静态的，因为它不访问封闭范围中的任何变量\n```csharp\nint M()\n{\nint y = 5;\nint x = 7;\nreturn Add(x, y);\n\nstatic int Add(int left, int right) => left + right;\n}\n```\n## <span style=\"color:#0366d6;\">Readonly 成员</span>\n>在 readonly 成员定义中，readonly 表示 struct 的成员不会改变结构的内部状态\n其他情况下，你可以创建支持可变的结构。 在这些情况下，多个实例成员可能不会修改结构的内部状态。 可以使用 readonly 修饰符声明那些实例成员。 编译器会强制执行你的意图。 如果该成员直接修改状态或访问未使用 readonly 修饰符声明的成员，则结果为编译时错误。 readonly 修饰符对 struct 成员有效，而对 class 或 interface 成员声明无效\n\n>readonly 修饰符对 struct 的大多数成员有效，包括重写在 System.Object 中声明的方法的方法。 但存在一些限制：\n不能声明 readonly 静态方法或属性。\n无法声明 readonly 构造函数。\n\n```csharp\npublic struct Point\n{\npublic double X { get; set; }\npublic double Y { get; set; }\npublic readonly double Distance => Math.Sqrt(X * X + Y * Y);\n\npublic readonly override string ToString() =>\n$\"({X}, {Y}) is {Distance} from the origin\";\n}\n```\n## <span style=\"color:#0366d6;\">索引和范围</span>\n>让我们从索引规则开始。 请考虑数组 sequence。 0 索引与 sequence[0] 相同。 ^0 索引与 sequence[sequence.Length] 相同。 请注意，sequence[^0] 不会引发异常，就像 sequence[sequence.Length] 一样。 对于任何数字 n，索引 ^n 与 sequence.Length - n 相同。\n```csharp\nvar words = new string[]\n{\n                // index from start    index from end\n    \"The\",      // 0                   ^9\n    \"quick\",    // 1                   ^8\n    \"brown\",    // 2                   ^7\n    \"fox\",      // 3                   ^6\n    \"jumped\",   // 4                   ^5\n    \"over\",     // 5                   ^4\n    \"the\",      // 6                   ^3\n    \"lazy\",     // 7                   ^2\n    \"dog\"       // 8                   ^1\n};        \n```\n>可以使用 ^1 索引检索最后一个词：\n```csharp\nConsole.WriteLine($\"The last word is {words[^1]}\");\n// writes \"dog\"\n```\n>以下代码创建了一个包含单词“quick”、“brown”和“fox”的子范围。 它包括 words[1] 到 words[3]。 元素 words[4] 不在该范围内。\n```csharp\nvar quickBrownFox = words[1..4];\n```\n>以下代码使用“lazy”和“dog”创建一个子范围。 它包括 words[^2] 和 words[^1]。 末尾索引 words[^0] 不包括在内：\n```csharp\nvar lazyDog = words[^2..^0];\n```\n>下面的示例为开始和/或结束创建了开放范围：\n```csharp\nvar allWords = words[..]; // contains \"The\" through \"dog\".\nvar firstPhrase = words[..4]; // contains \"The\" through \"fox\"\nvar lastPhrase = words[6..]; // contains \"the\", \"lazy\" and \"dog\"\n```\n\n>此外可以将范围声明为变量：\n```csharp\nRange phrase = 1..4;\nvar text = words[phrase];\n```\n## <span style=\"color:#0366d6;\">默认接口方法</span>\n>默认接口实现使开发人员能够升级接口，同时仍允许任何实现器替代该实现。 库的用户可以接受默认实现作为非中断性变更\n<details>\n<summary>展开查看</summary>\n\n>ICustomer\n```csharp\npublic interface ICustomer\n{\nIEnumerable<IOrder> PreviousOrders { get; }\nDateTime DateJoined { get; }\nDateTime? LastOrder { get; }\nstring Name { get; }\nIDictionary<DateTime, string> Reminders { get; }\n\npublic static void SetLoyaltyThresholds(TimeSpan ago, int minimumOrders, decimal percentageDiscount)\n{\nlength = ago; \norderCount = minimumOrders;\ndiscountPercent = percentageDiscount;\n}\nprivate static TimeSpan length = new TimeSpan(365 * 2, 0, 0, 0); // two years\nprivate static int orderCount = 10;\nprivate static decimal discountPercent = 0.10m;\n\n// <SnippetFinalVersion>\npublic decimal ComputeLoyaltyDiscount() => DefaultLoyaltyDiscount(this);\nprotected static decimal DefaultLoyaltyDiscount(ICustomer c)\n{\nDateTime start = DateTime.Now - length;\n\nif ((c.DateJoined < start) && (c.PreviousOrders.Count() > orderCount))\n{\nreturn discountPercent;\n}\nreturn 0;\n}\n// </SnippetFinalVersion>\n}\n```\n>IOrder\n```csharp\npublic interface IOrder\n{\n    DateTime Purchased { get; }\n    decimal Cost { get; }\n}\n```\n>SampleCustomer\n```csharp\npublic class SampleCustomer : ICustomer\n{\npublic SampleCustomer(string name, DateTime dateJoined) => \n(Name, DateJoined) = (name, dateJoined);\n\nprivate List<IOrder> allOrders = new List<IOrder>();\n\npublic IEnumerable<IOrder> PreviousOrders => allOrders;\n\npublic DateTime DateJoined { get; }\n\npublic DateTime? LastOrder { get; private set; }\n\npublic string Name { get; }\n\nprivate Dictionary<DateTime, string> reminders = new Dictionary<DateTime, string>();\npublic IDictionary<DateTime, string> Reminders => reminders;\n\npublic void AddOrder(IOrder order)\n{\nif (order.Purchased > (LastOrder ?? DateTime.MinValue))\nLastOrder = order.Purchased;\nallOrders.Add(order);\n}\n\n// <SnippetOverrideAndExtend>\npublic decimal ComputeLoyaltyDiscount()\n{\nif (PreviousOrders.Any() == false)\nreturn 0.50m;\nelse\nreturn ICustomer.DefaultLoyaltyDiscount(this);\n}\n// </SnippetOverrideAndExtend>\n}\n```\n>SampleOrder\n```csharp\n public class SampleOrder : IOrder\n{\n    public SampleOrder(DateTime purchase, decimal cost) =>\n        (Purchased, Cost) = (purchase, cost);\n\n    public DateTime Purchased { get; }\n\n    public decimal Cost { get; }\n}\n```\n```csharp\n static void Main(string[] args)\n{\n// <SnippetTestDefaultImplementation>\nSampleCustomer c = new SampleCustomer(\"customer one\", new DateTime(2010, 5, 31))\n{\nReminders =\n{\n{ new DateTime(2010, 08, 12), \"childs's birthday\" },\n{ new DateTime(1012, 11, 15), \"anniversary\" }\n}\n};\n\nSampleOrder o = new SampleOrder(new DateTime(2012, 6, 1), 5m);\nc.AddOrder(o);\n\no = new SampleOrder(new DateTime(2103, 7, 4), 25m);\nc.AddOrder(o);\n\n// <SnippetHighlightCast>\n// Check the discount:\nICustomer theCustomer = c;\nConsole.WriteLine($\"Current discount: {theCustomer.ComputeLoyaltyDiscount()}\");\n// </SnippetHighlightCast>\n// </SnippetTestDefaultImplementation>\n\n// Add more orders to get the discount:\nDateTime recurring = new DateTime(2013, 3, 15);\nfor(int i = 0; i < 15; i++)\n{\no = new SampleOrder(recurring, 19.23m * i);\nc.AddOrder(o);\n\nrecurring.AddMonths(2);\n}\n\nConsole.WriteLine($\"Data about {c.Name}\");\nConsole.WriteLine($\"Joined on {c.DateJoined}. Made {c.PreviousOrders.Count()} orders, the last on {c.LastOrder}\");\nConsole.WriteLine(\"Reminders:\");\nforeach(var item in c.Reminders)\n{\nConsole.WriteLine($\"\\t{item.Value} on {item.Key}\");\n}\nforeach (IOrder order in c.PreviousOrders)\nConsole.WriteLine($\"Order on {order.Purchased} for {order.Cost}\");\n\nConsole.WriteLine($\"Current discount: {theCustomer.ComputeLoyaltyDiscount()}\");\n\n// <SnippetSetLoyaltyThresholds>\nICustomer.SetLoyaltyThresholds(new TimeSpan(30, 0, 0, 0), 1, 0.25m);\nConsole.WriteLine($\"Current discount: {theCustomer.ComputeLoyaltyDiscount()}\");\n// </SnippetSetLoyaltyThresholds>\n}\n```\n</details>\n\n## <span style=\"color:#0366d6;\">更多位模式</span>\n### switch\n```csharp\npublic enum Rainbow\n{\n    Red,\n    Orange,\n    Yellow,\n    Green,\n    Blue,\n    Indigo,\n    Violet\n}\n```\n```csharp\npublic static RGBColor FromRainbow(Rainbow colorBand) =>\ncolorBand switch\n{\n    Rainbow.Red    => new RGBColor(0xFF, 0x00, 0x00),\n    Rainbow.Orange => new RGBColor(0xFF, 0x7F, 0x00),\n    Rainbow.Yellow => new RGBColor(0xFF, 0xFF, 0x00),\n    Rainbow.Green  => new RGBColor(0x00, 0xFF, 0x00),\n    Rainbow.Blue   => new RGBColor(0x00, 0x00, 0xFF),\n    Rainbow.Indigo => new RGBColor(0x4B, 0x00, 0x82),\n    Rainbow.Violet => new RGBColor(0x94, 0x00, 0xD3),\n    _              => throw new ArgumentException(message: \"invalid enum value\", paramName: nameof(colorBand)),\n};\n```\n>1.变量位于 switch 关键字之前。 不同的顺序使得在视觉上可以很轻松地区分 switch 表达式和 switch 语句。\n2.将 case 和 : 元素替换为 =>。 它更简洁，更直观。\n3.将 default 事例替换为 _ 弃元。\n4.正文是表达式，不是语句。\n\n>原来的格式：\n```csharp\npublic static RGBColor FromRainbowClassic(Rainbow colorBand)\n{\nswitch (colorBand)\n{\ncase Rainbow.Red:\n    return new RGBColor(0xFF, 0x00, 0x00);\ncase Rainbow.Orange:\n    return new RGBColor(0xFF, 0x7F, 0x00);\ncase Rainbow.Yellow:\n    return new RGBColor(0xFF, 0xFF, 0x00);\ncase Rainbow.Green:\n    return new RGBColor(0x00, 0xFF, 0x00);\ncase Rainbow.Blue:\n    return new RGBColor(0x00, 0x00, 0xFF);\ncase Rainbow.Indigo:\n    return new RGBColor(0x4B, 0x00, 0x82);\ncase Rainbow.Violet:\n    return new RGBColor(0x94, 0x00, 0xD3);\ndefault:\n    throw new ArgumentException(message: \"invalid enum value\", paramName: nameof(colorBand));\n};\n}\n```\n### 属性模式\n```csharp\npublic static decimal ComputeSalesTax(Address location, decimal salePrice) =>\n    location switch\n    {\n        { State: \"WA\" } => salePrice * 0.06M,\n        { State: \"MN\" } => salePrice * 0.75M,\n        { State: \"MI\" } => salePrice * 0.05M,\n        // other cases removed for brevity...\n        _ => 0M\n    };\n```\n### 元组模式\n```csharp\npublic static string RockPaperScissors(string first, string second)\n    => (first, second) switch\n    {\n        (\"rock\", \"paper\") => \"rock is covered by paper. Paper wins.\",\n        (\"rock\", \"scissors\") => \"rock breaks scissors. Rock wins.\",\n        (\"paper\", \"rock\") => \"paper covers rock. Paper wins.\",\n        (\"paper\", \"scissors\") => \"paper is cut by scissors. Scissors wins.\",\n        (\"scissors\", \"rock\") => \"scissors is broken by rock. Rock wins.\",\n        (\"scissors\", \"paper\") => \"scissors cuts paper. Scissors wins.\",\n        (_, _) => \"tie\"\n    };\n```\n### 位置模式\n\n<details>\n<summary>展开查看</summary>\n\n```csharp\npublic class Point\n{\n    public int X { get; }\n    public int Y { get; }\n\n    public Point(int x, int y) => (X, Y) = (x, y);\n\n    public void Deconstruct(out int x, out int y) =>\n        (x, y) = (X, Y);\n}\n```\n```csharp\npublic enum Quadrant\n{\n    Unknown,\n    Origin,\n    One,\n    Two,\n    Three,\n    Four,\n    OnBorder\n}\n```\n```csharp\nstatic Quadrant GetQuadrant(Point point) => point switch\n{\n    (0, 0) => Quadrant.Origin,\n    var (x, y) when x > 0 && y > 0 => Quadrant.One,\n    var (x, y) when x < 0 && y > 0 => Quadrant.Two,\n    var (x, y) when x < 0 && y < 0 => Quadrant.Three,\n    var (x, y) when x > 0 && y < 0 => Quadrant.Four,\n    var (_, _) => Quadrant.OnBorder,\n    _ => Quadrant.Unknown\n};\n```\n</details>\n\n## <span style=\"color:#0366d6;\">异步流</span>\n>todo\n","source":"_posts/csharpgrammar-10.md","raw":"---\ntitle: C#8.0语法\ndate: 2020-02-29\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#8.0语法（发布于 2019，.NET Core 3.0）\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n# <span style=\"color:#0366d6;\">C#8.0语法</span>\n## <span style=\"color:#0366d6;\">内插逐字字符串的增强功能</span>\n>内插逐字字符串中 $ 和 @ 标记的顺序可以任意安排：$@\"...\" 和 @$\"...\" 均为有效的内插逐字字符串。 在早期 C# 版本中，$ 标记必须出现在 @ 标记之前\n## <span style=\"color:#0366d6;\">Null 合并赋值</span>\n>C# 8.0 引入了 null 合并赋值运算符 ??=。 仅当左操作数计算为 null 时，才能使用运算符 ??= 将其右操作数的值分配给左操作数\n```csharp\nList<int> numbers = null;\nint? i = null;\n\nnumbers ??= new List<int>();\nnumbers.Add(i ??= 17);\nnumbers.Add(i ??= 20);\n\nConsole.WriteLine(string.Join(\" \", numbers));  // output: 17 17\nConsole.WriteLine(i);  // output: 17\n```\n## <span style=\"color:#0366d6;\">using 声明</span>\n>using 声明 是前面带 using 关键字的变量声明。 它指示编译器声明的变量应在封闭范围的末尾进行处理\n```csharp\nstatic int WriteLinesToFile(IEnumerable<string> lines)\n{\nusing var file = new System.IO.StreamWriter(\"WriteLines2.txt\");\n// Notice how we declare skippedLines after the using statement.\nint skippedLines = 0;\nforeach (string line in lines)\n{\n    if (!line.Contains(\"Second\"))\n    {\n        file.WriteLine(line);\n    }\n    else\n    {\n        skippedLines++;\n    }\n}\n// Notice how skippedLines is in scope here.\nreturn skippedLines;\n// file is disposed here\n}\n```\n## <span style=\"color:#0366d6;\">可处置的 ref 结构</span>\n>用 ref 修饰符声明的 struct 可能无法实现任何接口，因此无法实现 IDisposable。 因此，要能够处理 ref struct，它必须有一个可访问的 void Dispose() 方法。 此功能同样适用于 readonly ref struct 声明。\n## <span style=\"color:#0366d6;\">静态本地函数</span>\n>考虑下列代码。 本地函数 LocalFunction 访问在封闭范围（方法 M）中声明的变量 y。 因此，不能用 static 修饰符来声明 LocalFunction：\n```csharp\nint M()\n{\nint y;\nLocalFunction();\nreturn y;\n\nvoid LocalFunction() => y = 0;\n}\n```\n>下面的代码包含一个静态本地函数。 它可以是静态的，因为它不访问封闭范围中的任何变量\n```csharp\nint M()\n{\nint y = 5;\nint x = 7;\nreturn Add(x, y);\n\nstatic int Add(int left, int right) => left + right;\n}\n```\n## <span style=\"color:#0366d6;\">Readonly 成员</span>\n>在 readonly 成员定义中，readonly 表示 struct 的成员不会改变结构的内部状态\n其他情况下，你可以创建支持可变的结构。 在这些情况下，多个实例成员可能不会修改结构的内部状态。 可以使用 readonly 修饰符声明那些实例成员。 编译器会强制执行你的意图。 如果该成员直接修改状态或访问未使用 readonly 修饰符声明的成员，则结果为编译时错误。 readonly 修饰符对 struct 成员有效，而对 class 或 interface 成员声明无效\n\n>readonly 修饰符对 struct 的大多数成员有效，包括重写在 System.Object 中声明的方法的方法。 但存在一些限制：\n不能声明 readonly 静态方法或属性。\n无法声明 readonly 构造函数。\n\n```csharp\npublic struct Point\n{\npublic double X { get; set; }\npublic double Y { get; set; }\npublic readonly double Distance => Math.Sqrt(X * X + Y * Y);\n\npublic readonly override string ToString() =>\n$\"({X}, {Y}) is {Distance} from the origin\";\n}\n```\n## <span style=\"color:#0366d6;\">索引和范围</span>\n>让我们从索引规则开始。 请考虑数组 sequence。 0 索引与 sequence[0] 相同。 ^0 索引与 sequence[sequence.Length] 相同。 请注意，sequence[^0] 不会引发异常，就像 sequence[sequence.Length] 一样。 对于任何数字 n，索引 ^n 与 sequence.Length - n 相同。\n```csharp\nvar words = new string[]\n{\n                // index from start    index from end\n    \"The\",      // 0                   ^9\n    \"quick\",    // 1                   ^8\n    \"brown\",    // 2                   ^7\n    \"fox\",      // 3                   ^6\n    \"jumped\",   // 4                   ^5\n    \"over\",     // 5                   ^4\n    \"the\",      // 6                   ^3\n    \"lazy\",     // 7                   ^2\n    \"dog\"       // 8                   ^1\n};        \n```\n>可以使用 ^1 索引检索最后一个词：\n```csharp\nConsole.WriteLine($\"The last word is {words[^1]}\");\n// writes \"dog\"\n```\n>以下代码创建了一个包含单词“quick”、“brown”和“fox”的子范围。 它包括 words[1] 到 words[3]。 元素 words[4] 不在该范围内。\n```csharp\nvar quickBrownFox = words[1..4];\n```\n>以下代码使用“lazy”和“dog”创建一个子范围。 它包括 words[^2] 和 words[^1]。 末尾索引 words[^0] 不包括在内：\n```csharp\nvar lazyDog = words[^2..^0];\n```\n>下面的示例为开始和/或结束创建了开放范围：\n```csharp\nvar allWords = words[..]; // contains \"The\" through \"dog\".\nvar firstPhrase = words[..4]; // contains \"The\" through \"fox\"\nvar lastPhrase = words[6..]; // contains \"the\", \"lazy\" and \"dog\"\n```\n\n>此外可以将范围声明为变量：\n```csharp\nRange phrase = 1..4;\nvar text = words[phrase];\n```\n## <span style=\"color:#0366d6;\">默认接口方法</span>\n>默认接口实现使开发人员能够升级接口，同时仍允许任何实现器替代该实现。 库的用户可以接受默认实现作为非中断性变更\n<details>\n<summary>展开查看</summary>\n\n>ICustomer\n```csharp\npublic interface ICustomer\n{\nIEnumerable<IOrder> PreviousOrders { get; }\nDateTime DateJoined { get; }\nDateTime? LastOrder { get; }\nstring Name { get; }\nIDictionary<DateTime, string> Reminders { get; }\n\npublic static void SetLoyaltyThresholds(TimeSpan ago, int minimumOrders, decimal percentageDiscount)\n{\nlength = ago; \norderCount = minimumOrders;\ndiscountPercent = percentageDiscount;\n}\nprivate static TimeSpan length = new TimeSpan(365 * 2, 0, 0, 0); // two years\nprivate static int orderCount = 10;\nprivate static decimal discountPercent = 0.10m;\n\n// <SnippetFinalVersion>\npublic decimal ComputeLoyaltyDiscount() => DefaultLoyaltyDiscount(this);\nprotected static decimal DefaultLoyaltyDiscount(ICustomer c)\n{\nDateTime start = DateTime.Now - length;\n\nif ((c.DateJoined < start) && (c.PreviousOrders.Count() > orderCount))\n{\nreturn discountPercent;\n}\nreturn 0;\n}\n// </SnippetFinalVersion>\n}\n```\n>IOrder\n```csharp\npublic interface IOrder\n{\n    DateTime Purchased { get; }\n    decimal Cost { get; }\n}\n```\n>SampleCustomer\n```csharp\npublic class SampleCustomer : ICustomer\n{\npublic SampleCustomer(string name, DateTime dateJoined) => \n(Name, DateJoined) = (name, dateJoined);\n\nprivate List<IOrder> allOrders = new List<IOrder>();\n\npublic IEnumerable<IOrder> PreviousOrders => allOrders;\n\npublic DateTime DateJoined { get; }\n\npublic DateTime? LastOrder { get; private set; }\n\npublic string Name { get; }\n\nprivate Dictionary<DateTime, string> reminders = new Dictionary<DateTime, string>();\npublic IDictionary<DateTime, string> Reminders => reminders;\n\npublic void AddOrder(IOrder order)\n{\nif (order.Purchased > (LastOrder ?? DateTime.MinValue))\nLastOrder = order.Purchased;\nallOrders.Add(order);\n}\n\n// <SnippetOverrideAndExtend>\npublic decimal ComputeLoyaltyDiscount()\n{\nif (PreviousOrders.Any() == false)\nreturn 0.50m;\nelse\nreturn ICustomer.DefaultLoyaltyDiscount(this);\n}\n// </SnippetOverrideAndExtend>\n}\n```\n>SampleOrder\n```csharp\n public class SampleOrder : IOrder\n{\n    public SampleOrder(DateTime purchase, decimal cost) =>\n        (Purchased, Cost) = (purchase, cost);\n\n    public DateTime Purchased { get; }\n\n    public decimal Cost { get; }\n}\n```\n```csharp\n static void Main(string[] args)\n{\n// <SnippetTestDefaultImplementation>\nSampleCustomer c = new SampleCustomer(\"customer one\", new DateTime(2010, 5, 31))\n{\nReminders =\n{\n{ new DateTime(2010, 08, 12), \"childs's birthday\" },\n{ new DateTime(1012, 11, 15), \"anniversary\" }\n}\n};\n\nSampleOrder o = new SampleOrder(new DateTime(2012, 6, 1), 5m);\nc.AddOrder(o);\n\no = new SampleOrder(new DateTime(2103, 7, 4), 25m);\nc.AddOrder(o);\n\n// <SnippetHighlightCast>\n// Check the discount:\nICustomer theCustomer = c;\nConsole.WriteLine($\"Current discount: {theCustomer.ComputeLoyaltyDiscount()}\");\n// </SnippetHighlightCast>\n// </SnippetTestDefaultImplementation>\n\n// Add more orders to get the discount:\nDateTime recurring = new DateTime(2013, 3, 15);\nfor(int i = 0; i < 15; i++)\n{\no = new SampleOrder(recurring, 19.23m * i);\nc.AddOrder(o);\n\nrecurring.AddMonths(2);\n}\n\nConsole.WriteLine($\"Data about {c.Name}\");\nConsole.WriteLine($\"Joined on {c.DateJoined}. Made {c.PreviousOrders.Count()} orders, the last on {c.LastOrder}\");\nConsole.WriteLine(\"Reminders:\");\nforeach(var item in c.Reminders)\n{\nConsole.WriteLine($\"\\t{item.Value} on {item.Key}\");\n}\nforeach (IOrder order in c.PreviousOrders)\nConsole.WriteLine($\"Order on {order.Purchased} for {order.Cost}\");\n\nConsole.WriteLine($\"Current discount: {theCustomer.ComputeLoyaltyDiscount()}\");\n\n// <SnippetSetLoyaltyThresholds>\nICustomer.SetLoyaltyThresholds(new TimeSpan(30, 0, 0, 0), 1, 0.25m);\nConsole.WriteLine($\"Current discount: {theCustomer.ComputeLoyaltyDiscount()}\");\n// </SnippetSetLoyaltyThresholds>\n}\n```\n</details>\n\n## <span style=\"color:#0366d6;\">更多位模式</span>\n### switch\n```csharp\npublic enum Rainbow\n{\n    Red,\n    Orange,\n    Yellow,\n    Green,\n    Blue,\n    Indigo,\n    Violet\n}\n```\n```csharp\npublic static RGBColor FromRainbow(Rainbow colorBand) =>\ncolorBand switch\n{\n    Rainbow.Red    => new RGBColor(0xFF, 0x00, 0x00),\n    Rainbow.Orange => new RGBColor(0xFF, 0x7F, 0x00),\n    Rainbow.Yellow => new RGBColor(0xFF, 0xFF, 0x00),\n    Rainbow.Green  => new RGBColor(0x00, 0xFF, 0x00),\n    Rainbow.Blue   => new RGBColor(0x00, 0x00, 0xFF),\n    Rainbow.Indigo => new RGBColor(0x4B, 0x00, 0x82),\n    Rainbow.Violet => new RGBColor(0x94, 0x00, 0xD3),\n    _              => throw new ArgumentException(message: \"invalid enum value\", paramName: nameof(colorBand)),\n};\n```\n>1.变量位于 switch 关键字之前。 不同的顺序使得在视觉上可以很轻松地区分 switch 表达式和 switch 语句。\n2.将 case 和 : 元素替换为 =>。 它更简洁，更直观。\n3.将 default 事例替换为 _ 弃元。\n4.正文是表达式，不是语句。\n\n>原来的格式：\n```csharp\npublic static RGBColor FromRainbowClassic(Rainbow colorBand)\n{\nswitch (colorBand)\n{\ncase Rainbow.Red:\n    return new RGBColor(0xFF, 0x00, 0x00);\ncase Rainbow.Orange:\n    return new RGBColor(0xFF, 0x7F, 0x00);\ncase Rainbow.Yellow:\n    return new RGBColor(0xFF, 0xFF, 0x00);\ncase Rainbow.Green:\n    return new RGBColor(0x00, 0xFF, 0x00);\ncase Rainbow.Blue:\n    return new RGBColor(0x00, 0x00, 0xFF);\ncase Rainbow.Indigo:\n    return new RGBColor(0x4B, 0x00, 0x82);\ncase Rainbow.Violet:\n    return new RGBColor(0x94, 0x00, 0xD3);\ndefault:\n    throw new ArgumentException(message: \"invalid enum value\", paramName: nameof(colorBand));\n};\n}\n```\n### 属性模式\n```csharp\npublic static decimal ComputeSalesTax(Address location, decimal salePrice) =>\n    location switch\n    {\n        { State: \"WA\" } => salePrice * 0.06M,\n        { State: \"MN\" } => salePrice * 0.75M,\n        { State: \"MI\" } => salePrice * 0.05M,\n        // other cases removed for brevity...\n        _ => 0M\n    };\n```\n### 元组模式\n```csharp\npublic static string RockPaperScissors(string first, string second)\n    => (first, second) switch\n    {\n        (\"rock\", \"paper\") => \"rock is covered by paper. Paper wins.\",\n        (\"rock\", \"scissors\") => \"rock breaks scissors. Rock wins.\",\n        (\"paper\", \"rock\") => \"paper covers rock. Paper wins.\",\n        (\"paper\", \"scissors\") => \"paper is cut by scissors. Scissors wins.\",\n        (\"scissors\", \"rock\") => \"scissors is broken by rock. Rock wins.\",\n        (\"scissors\", \"paper\") => \"scissors cuts paper. Scissors wins.\",\n        (_, _) => \"tie\"\n    };\n```\n### 位置模式\n\n<details>\n<summary>展开查看</summary>\n\n```csharp\npublic class Point\n{\n    public int X { get; }\n    public int Y { get; }\n\n    public Point(int x, int y) => (X, Y) = (x, y);\n\n    public void Deconstruct(out int x, out int y) =>\n        (x, y) = (X, Y);\n}\n```\n```csharp\npublic enum Quadrant\n{\n    Unknown,\n    Origin,\n    One,\n    Two,\n    Three,\n    Four,\n    OnBorder\n}\n```\n```csharp\nstatic Quadrant GetQuadrant(Point point) => point switch\n{\n    (0, 0) => Quadrant.Origin,\n    var (x, y) when x > 0 && y > 0 => Quadrant.One,\n    var (x, y) when x < 0 && y > 0 => Quadrant.Two,\n    var (x, y) when x < 0 && y < 0 => Quadrant.Three,\n    var (x, y) when x > 0 && y < 0 => Quadrant.Four,\n    var (_, _) => Quadrant.OnBorder,\n    _ => Quadrant.Unknown\n};\n```\n</details>\n\n## <span style=\"color:#0366d6;\">异步流</span>\n>todo\n","slug":"csharpgrammar-10","published":1,"updated":"2022-08-17T06:55:45.676Z","_id":"ck71ykdtd000slcrib48f7ifl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#8.0语法（发布于 2019，.NET Core 3.0）</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-8-0语法\"><a href=\"#C-8-0语法\" class=\"headerlink\" title=\"C#8.0语法\"></a><span style=\"color:#0366d6;\">C#8.0语法</span></h1><h2 id=\"内插逐字字符串的增强功能\"><a href=\"#内插逐字字符串的增强功能\" class=\"headerlink\" title=\"内插逐字字符串的增强功能\"></a><span style=\"color:#0366d6;\">内插逐字字符串的增强功能</span></h2><blockquote>\n<p>内插逐字字符串中 $ 和 @ 标记的顺序可以任意安排：$@”…” 和 @$”…” 均为有效的内插逐字字符串。 在早期 C# 版本中，$ 标记必须出现在 @ 标记之前</p>\n</blockquote>\n<h2 id=\"Null-合并赋值\"><a href=\"#Null-合并赋值\" class=\"headerlink\" title=\"Null 合并赋值\"></a><span style=\"color:#0366d6;\">Null 合并赋值</span></h2><blockquote>\n<p>C# 8.0 引入了 null 合并赋值运算符 ??=。 仅当左操作数计算为 null 时，才能使用运算符 ??= 将其右操作数的值分配给左操作数</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;<span class=\"keyword\">int</span>&gt; numbers = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? i = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">numbers ??= <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">numbers.Add(i ??= <span class=\"number\">17</span>);</span><br><span class=\"line\">numbers.Add(i ??= <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"keyword\">string</span>.Join(<span class=\"string\">\" \"</span>, numbers));  <span class=\"comment\">// output: 17 17</span></span><br><span class=\"line\">Console.WriteLine(i);  <span class=\"comment\">// output: 17</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"using-声明\"><a href=\"#using-声明\" class=\"headerlink\" title=\"using 声明\"></a><span style=\"color:#0366d6;\">using 声明</span></h2><blockquote>\n<p>using 声明 是前面带 using 关键字的变量声明。 它指示编译器声明的变量应在封闭范围的末尾进行处理</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">WriteLinesToFile</span>(<span class=\"params\">IEnumerable&lt;<span class=\"keyword\">string</span>&gt; lines</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> file = <span class=\"keyword\">new</span> System.IO.StreamWriter(<span class=\"string\">\"WriteLines2.txt\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Notice how we declare skippedLines after the using statement.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> skippedLines = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> line <span class=\"keyword\">in</span> lines)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!line.Contains(<span class=\"string\">\"Second\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        file.WriteLine(line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        skippedLines++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Notice how skippedLines is in scope here.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> skippedLines;</span><br><span class=\"line\"><span class=\"comment\">// file is disposed here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可处置的-ref-结构\"><a href=\"#可处置的-ref-结构\" class=\"headerlink\" title=\"可处置的 ref 结构\"></a><span style=\"color:#0366d6;\">可处置的 ref 结构</span></h2><blockquote>\n<p>用 ref 修饰符声明的 struct 可能无法实现任何接口，因此无法实现 IDisposable。 因此，要能够处理 ref struct，它必须有一个可访问的 void Dispose() 方法。 此功能同样适用于 readonly ref struct 声明。</p>\n</blockquote>\n<h2 id=\"静态本地函数\"><a href=\"#静态本地函数\" class=\"headerlink\" title=\"静态本地函数\"></a><span style=\"color:#0366d6;\">静态本地函数</span></h2><blockquote>\n<p>考虑下列代码。 本地函数 LocalFunction 访问在封闭范围（方法 M）中声明的变量 y。 因此，不能用 static 修饰符来声明 LocalFunction：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">M</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y;</span><br><span class=\"line\">LocalFunction();</span><br><span class=\"line\"><span class=\"keyword\">return</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LocalFunction</span>(<span class=\"params\"></span>)</span> =&gt; y = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下面的代码包含一个静态本地函数。 它可以是静态的，因为它不访问封闭范围中的任何变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">M</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> Add(x, y);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right</span>)</span> =&gt; left + right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Readonly-成员\"><a href=\"#Readonly-成员\" class=\"headerlink\" title=\"Readonly 成员\"></a><span style=\"color:#0366d6;\">Readonly 成员</span></h2><blockquote>\n<p>在 readonly 成员定义中，readonly 表示 struct 的成员不会改变结构的内部状态<br>其他情况下，你可以创建支持可变的结构。 在这些情况下，多个实例成员可能不会修改结构的内部状态。 可以使用 readonly 修饰符声明那些实例成员。 编译器会强制执行你的意图。 如果该成员直接修改状态或访问未使用 readonly 修饰符声明的成员，则结果为编译时错误。 readonly 修饰符对 struct 成员有效，而对 class 或 interface 成员声明无效</p>\n</blockquote>\n<blockquote>\n<p>readonly 修饰符对 struct 的大多数成员有效，包括重写在 System.Object 中声明的方法的方法。 但存在一些限制：<br>不能声明 readonly 静态方法或属性。<br>无法声明 readonly 构造函数。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> Point</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> X &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Y &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">double</span> Distance =&gt; Math.Sqrt(X * X + Y * Y);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span> =&gt;</span><br><span class=\"line\"><span class=\"string\">$\"(<span class=\"subst\">&#123;X&#125;</span>, <span class=\"subst\">&#123;Y&#125;</span>) is <span class=\"subst\">&#123;Distance&#125;</span> from the origin\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引和范围\"><a href=\"#索引和范围\" class=\"headerlink\" title=\"索引和范围\"></a><span style=\"color:#0366d6;\">索引和范围</span></h2><blockquote>\n<p>让我们从索引规则开始。 请考虑数组 sequence。 0 索引与 sequence[0] 相同。 ^0 索引与 sequence[sequence.Length] 相同。 请注意，sequence[^0] 不会引发异常，就像 sequence[sequence.Length] 一样。 对于任何数字 n，索引 ^n 与 sequence.Length - n 相同。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> words = <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">                <span class=\"comment\">// index from start    index from end</span></span><br><span class=\"line\">    <span class=\"string\">\"The\"</span>,      <span class=\"comment\">// 0                   ^9</span></span><br><span class=\"line\">    <span class=\"string\">\"quick\"</span>,    <span class=\"comment\">// 1                   ^8</span></span><br><span class=\"line\">    <span class=\"string\">\"brown\"</span>,    <span class=\"comment\">// 2                   ^7</span></span><br><span class=\"line\">    <span class=\"string\">\"fox\"</span>,      <span class=\"comment\">// 3                   ^6</span></span><br><span class=\"line\">    <span class=\"string\">\"jumped\"</span>,   <span class=\"comment\">// 4                   ^5</span></span><br><span class=\"line\">    <span class=\"string\">\"over\"</span>,     <span class=\"comment\">// 5                   ^4</span></span><br><span class=\"line\">    <span class=\"string\">\"the\"</span>,      <span class=\"comment\">// 6                   ^3</span></span><br><span class=\"line\">    <span class=\"string\">\"lazy\"</span>,     <span class=\"comment\">// 7                   ^2</span></span><br><span class=\"line\">    <span class=\"string\">\"dog\"</span>       <span class=\"comment\">// 8                   ^1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以使用 ^1 索引检索最后一个词：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"The last word is <span class=\"subst\">&#123;words[^<span class=\"number\">1</span>]&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// writes \"dog\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下代码创建了一个包含单词“quick”、“brown”和“fox”的子范围。 它包括 words[1] 到 words[3]。 元素 words[4] 不在该范围内。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> quickBrownFox = words[<span class=\"number\">1.</span><span class=\"number\">.4</span>];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下代码使用“lazy”和“dog”创建一个子范围。 它包括 words[^2] 和 words[^1]。 末尾索引 words[^0] 不包括在内：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lazyDog = words[^<span class=\"number\">2.</span>.^<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下面的示例为开始和/或结束创建了开放范围：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> allWords = words[..]; <span class=\"comment\">// contains \"The\" through \"dog\".</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstPhrase = words[.<span class=\"number\">.4</span>]; <span class=\"comment\">// contains \"The\" through \"fox\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastPhrase = words[<span class=\"number\">6.</span>.]; <span class=\"comment\">// contains \"the\", \"lazy\" and \"dog\"</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此外可以将范围声明为变量：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Range phrase = <span class=\"number\">1.</span><span class=\"number\">.4</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = words[phrase];</span><br></pre></td></tr></table></figure>\n<h2 id=\"默认接口方法\"><a href=\"#默认接口方法\" class=\"headerlink\" title=\"默认接口方法\"></a><span style=\"color:#0366d6;\">默认接口方法</span></h2><blockquote>\n<p>默认接口实现使开发人员能够升级接口，同时仍允许任何实现器替代该实现。 库的用户可以接受默认实现作为非中断性变更</p>\n</blockquote>\n<details>\n<summary>展开查看</summary>\n\n<blockquote>\n<p>ICustomer</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICustomer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">IEnumerable&lt;IOrder&gt; PreviousOrders &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">DateTime DateJoined &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">DateTime? LastOrder &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">IDictionary&lt;DateTime, <span class=\"keyword\">string</span>&gt; Reminders &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetLoyaltyThresholds</span>(<span class=\"params\">TimeSpan ago, <span class=\"keyword\">int</span> minimumOrders, <span class=\"keyword\">decimal</span> percentageDiscount</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">length = ago; </span><br><span class=\"line\">orderCount = minimumOrders;</span><br><span class=\"line\">discountPercent = percentageDiscount;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TimeSpan length = <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">365</span> * <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">// two years</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> orderCount = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">decimal</span> discountPercent = <span class=\"number\">0.10</span>m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;SnippetFinalVersion&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">decimal</span> <span class=\"title\">ComputeLoyaltyDiscount</span>(<span class=\"params\"></span>)</span> =&gt; DefaultLoyaltyDiscount(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">decimal</span> <span class=\"title\">DefaultLoyaltyDiscount</span>(<span class=\"params\">ICustomer c</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">DateTime start = DateTime.Now - length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((c.DateJoined &lt; start) &amp;&amp; (c.PreviousOrders.Count() &gt; orderCount))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> discountPercent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &lt;/SnippetFinalVersion&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>IOrder</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IOrder</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DateTime Purchased &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">decimal</span> Cost &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SampleCustomer</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleCustomer</span> : <span class=\"title\">ICustomer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleCustomer</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, DateTime dateJoined</span>)</span> =&gt; </span><br><span class=\"line\">(Name, DateJoined) = (name, dateJoined);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;IOrder&gt; allOrders = <span class=\"keyword\">new</span> List&lt;IOrder&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> IEnumerable&lt;IOrder&gt; PreviousOrders =&gt; allOrders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> DateTime DateJoined &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> DateTime? LastOrder &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Dictionary&lt;DateTime, <span class=\"keyword\">string</span>&gt; reminders = <span class=\"keyword\">new</span> Dictionary&lt;DateTime, <span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> IDictionary&lt;DateTime, <span class=\"keyword\">string</span>&gt; Reminders =&gt; reminders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddOrder</span>(<span class=\"params\">IOrder order</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (order.Purchased &gt; (LastOrder ?? DateTime.MinValue))</span><br><span class=\"line\">LastOrder = order.Purchased;</span><br><span class=\"line\">allOrders.Add(order);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;SnippetOverrideAndExtend&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">decimal</span> <span class=\"title\">ComputeLoyaltyDiscount</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (PreviousOrders.Any() == <span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0.50</span>m;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> ICustomer.DefaultLoyaltyDiscount(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &lt;/SnippetOverrideAndExtend&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SampleOrder</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleOrder</span> : <span class=\"title\">IOrder</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleOrder</span>(<span class=\"params\">DateTime purchase, <span class=\"keyword\">decimal</span> cost</span>)</span> =&gt;</span><br><span class=\"line\">        (Purchased, Cost) = (purchase, cost);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime Purchased &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">decimal</span> Cost &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// &lt;SnippetTestDefaultImplementation&gt;</span></span><br><span class=\"line\">SampleCustomer c = <span class=\"keyword\">new</span> SampleCustomer(<span class=\"string\">\"customer one\"</span>, <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2010</span>, <span class=\"number\">5</span>, <span class=\"number\">31</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Reminders =</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#123; <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2010</span>, <span class=\"number\">08</span>, <span class=\"number\">12</span>), <span class=\"string\">\"childs's birthday\"</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"keyword\">new</span> DateTime(<span class=\"number\">1012</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>), <span class=\"string\">\"anniversary\"</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">SampleOrder o = <span class=\"keyword\">new</span> SampleOrder(<span class=\"keyword\">new</span> DateTime(<span class=\"number\">2012</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>), <span class=\"number\">5</span>m);</span><br><span class=\"line\">c.AddOrder(o);</span><br><span class=\"line\"></span><br><span class=\"line\">o = <span class=\"keyword\">new</span> SampleOrder(<span class=\"keyword\">new</span> DateTime(<span class=\"number\">2103</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>), <span class=\"number\">25</span>m);</span><br><span class=\"line\">c.AddOrder(o);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;SnippetHighlightCast&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Check the discount:</span></span><br><span class=\"line\">ICustomer theCustomer = c;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Current discount: <span class=\"subst\">&#123;theCustomer.ComputeLoyaltyDiscount()&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// &lt;/SnippetHighlightCast&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/SnippetTestDefaultImplementation&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add more orders to get the discount:</span></span><br><span class=\"line\">DateTime recurring = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2013</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">15</span>; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">o = <span class=\"keyword\">new</span> SampleOrder(recurring, <span class=\"number\">19.23</span>m * i);</span><br><span class=\"line\">c.AddOrder(o);</span><br><span class=\"line\"></span><br><span class=\"line\">recurring.AddMonths(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Data about <span class=\"subst\">&#123;c.Name&#125;</span>\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Joined on <span class=\"subst\">&#123;c.DateJoined&#125;</span>. Made <span class=\"subst\">&#123;c.PreviousOrders.Count()&#125;</span> orders, the last on <span class=\"subst\">&#123;c.LastOrder&#125;</span>\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">\"Reminders:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> c.Reminders)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"\\t<span class=\"subst\">&#123;item.Value&#125;</span> on <span class=\"subst\">&#123;item.Key&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (IOrder order <span class=\"keyword\">in</span> c.PreviousOrders)</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Order on <span class=\"subst\">&#123;order.Purchased&#125;</span> for <span class=\"subst\">&#123;order.Cost&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Current discount: <span class=\"subst\">&#123;theCustomer.ComputeLoyaltyDiscount()&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;SnippetSetLoyaltyThresholds&gt;</span></span><br><span class=\"line\">ICustomer.SetLoyaltyThresholds(<span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">30</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"number\">1</span>, <span class=\"number\">0.25</span>m);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Current discount: <span class=\"subst\">&#123;theCustomer.ComputeLoyaltyDiscount()&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// &lt;/SnippetSetLoyaltyThresholds&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"更多位模式\"><a href=\"#更多位模式\" class=\"headerlink\" title=\"更多位模式\"></a><span style=\"color:#0366d6;\">更多位模式</span></h2><h3 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Rainbow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Red,</span><br><span class=\"line\">    Orange,</span><br><span class=\"line\">    Yellow,</span><br><span class=\"line\">    Green,</span><br><span class=\"line\">    Blue,</span><br><span class=\"line\">    Indigo,</span><br><span class=\"line\">    Violet</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RGBColor <span class=\"title\">FromRainbow</span>(<span class=\"params\">Rainbow colorBand</span>)</span> =&gt;</span><br><span class=\"line\">colorBand <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Rainbow.Red    =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>),</span><br><span class=\"line\">    Rainbow.Orange =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0x7F</span>, <span class=\"number\">0x00</span>),</span><br><span class=\"line\">    Rainbow.Yellow =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>),</span><br><span class=\"line\">    Rainbow.Green  =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>),</span><br><span class=\"line\">    Rainbow.Blue   =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>),</span><br><span class=\"line\">    Rainbow.Indigo =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x4B</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x82</span>),</span><br><span class=\"line\">    Rainbow.Violet =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x94</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xD3</span>),</span><br><span class=\"line\">    _              =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"invalid enum value\"</span>, paramName: <span class=\"keyword\">nameof</span>(colorBand)),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1.变量位于 switch 关键字之前。 不同的顺序使得在视觉上可以很轻松地区分 switch 表达式和 switch 语句。<br>2.将 case 和 : 元素替换为 =&gt;。 它更简洁，更直观。<br>3.将 default 事例替换为 _ 弃元。<br>4.正文是表达式，不是语句。</p>\n</blockquote>\n<blockquote>\n<p>原来的格式：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RGBColor <span class=\"title\">FromRainbowClassic</span>(<span class=\"params\">Rainbow colorBand</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (colorBand)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Red:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Orange:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0x7F</span>, <span class=\"number\">0x00</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Yellow:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Green:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Blue:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Indigo:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x4B</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x82</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Violet:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x94</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xD3</span>);</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"invalid enum value\"</span>, paramName: <span class=\"keyword\">nameof</span>(colorBand));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性模式\"><a href=\"#属性模式\" class=\"headerlink\" title=\"属性模式\"></a>属性模式</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">decimal</span> <span class=\"title\">ComputeSalesTax</span>(<span class=\"params\">Address location, <span class=\"keyword\">decimal</span> salePrice</span>)</span> =&gt;</span><br><span class=\"line\">    location <span class=\"keyword\">switch</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#123; State: <span class=\"string\">\"WA\"</span> &#125; =&gt; salePrice * <span class=\"number\">0.06</span>M,</span><br><span class=\"line\">        &#123; State: <span class=\"string\">\"MN\"</span> &#125; =&gt; salePrice * <span class=\"number\">0.75</span>M,</span><br><span class=\"line\">        &#123; State: <span class=\"string\">\"MI\"</span> &#125; =&gt; salePrice * <span class=\"number\">0.05</span>M,</span><br><span class=\"line\">        <span class=\"comment\">// other cases removed for brevity...</span></span><br><span class=\"line\">        _ =&gt; <span class=\"number\">0</span>M</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"元组模式\"><a href=\"#元组模式\" class=\"headerlink\" title=\"元组模式\"></a>元组模式</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">RockPaperScissors</span>(<span class=\"params\"><span class=\"keyword\">string</span> first, <span class=\"keyword\">string</span> second</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    =&gt; (first, second) <span class=\"keyword\">switch</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (<span class=\"string\">\"rock\"</span>, <span class=\"string\">\"paper\"</span>) =&gt; <span class=\"string\">\"rock is covered by paper. Paper wins.\"</span>,</span><br><span class=\"line\">        (<span class=\"string\">\"rock\"</span>, <span class=\"string\">\"scissors\"</span>) =&gt; <span class=\"string\">\"rock breaks scissors. Rock wins.\"</span>,</span><br><span class=\"line\">        (<span class=\"string\">\"paper\"</span>, <span class=\"string\">\"rock\"</span>) =&gt; <span class=\"string\">\"paper covers rock. Paper wins.\"</span>,</span><br><span class=\"line\">        (<span class=\"string\">\"paper\"</span>, <span class=\"string\">\"scissors\"</span>) =&gt; <span class=\"string\">\"paper is cut by scissors. Scissors wins.\"</span>,</span><br><span class=\"line\">        (<span class=\"string\">\"scissors\"</span>, <span class=\"string\">\"rock\"</span>) =&gt; <span class=\"string\">\"scissors is broken by rock. Rock wins.\"</span>,</span><br><span class=\"line\">        (<span class=\"string\">\"scissors\"</span>, <span class=\"string\">\"paper\"</span>) =&gt; <span class=\"string\">\"scissors cuts paper. Scissors wins.\"</span>,</span><br><span class=\"line\">        (_, _) =&gt; <span class=\"string\">\"tie\"</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"位置模式\"><a href=\"#位置模式\" class=\"headerlink\" title=\"位置模式\"></a>位置模式</h3><details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Point</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> X &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Y &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span>(<span class=\"params\"><span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y</span>)</span> =&gt; (X, Y) = (x, y);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">int</span> x, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> y</span>)</span> =&gt;</span><br><span class=\"line\">        (x, y) = (X, Y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Quadrant</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Unknown,</span><br><span class=\"line\">    Origin,</span><br><span class=\"line\">    One,</span><br><span class=\"line\">    Two,</span><br><span class=\"line\">    Three,</span><br><span class=\"line\">    Four,</span><br><span class=\"line\">    OnBorder</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Quadrant <span class=\"title\">GetQuadrant</span>(<span class=\"params\">Point point</span>)</span> =&gt; point <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    (<span class=\"number\">0</span>, <span class=\"number\">0</span>) =&gt; Quadrant.Origin,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (x, y) <span class=\"keyword\">when</span> x &gt; <span class=\"number\">0</span> &amp;&amp; y &gt; <span class=\"number\">0</span> =&gt; Quadrant.One,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (x, y) <span class=\"keyword\">when</span> x &lt; <span class=\"number\">0</span> &amp;&amp; y &gt; <span class=\"number\">0</span> =&gt; Quadrant.Two,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (x, y) <span class=\"keyword\">when</span> x &lt; <span class=\"number\">0</span> &amp;&amp; y &lt; <span class=\"number\">0</span> =&gt; Quadrant.Three,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (x, y) <span class=\"keyword\">when</span> x &gt; <span class=\"number\">0</span> &amp;&amp; y &lt; <span class=\"number\">0</span> =&gt; Quadrant.Four,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (_, _) =&gt; Quadrant.OnBorder,</span><br><span class=\"line\">    _ =&gt; Quadrant.Unknown</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"异步流\"><a href=\"#异步流\" class=\"headerlink\" title=\"异步流\"></a><span style=\"color:#0366d6;\">异步流</span></h2><blockquote>\n<p>todo</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>C#8.0语法（发布于 2019，.NET Core 3.0）</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h1 id=\"C-8-0语法\"><a href=\"#C-8-0语法\" class=\"headerlink\" title=\"C#8.0语法\"></a><span style=\"color:#0366d6;\">C#8.0语法</span></h1><h2 id=\"内插逐字字符串的增强功能\"><a href=\"#内插逐字字符串的增强功能\" class=\"headerlink\" title=\"内插逐字字符串的增强功能\"></a><span style=\"color:#0366d6;\">内插逐字字符串的增强功能</span></h2><blockquote>\n<p>内插逐字字符串中 $ 和 @ 标记的顺序可以任意安排：$@”…” 和 @$”…” 均为有效的内插逐字字符串。 在早期 C# 版本中，$ 标记必须出现在 @ 标记之前</p>\n</blockquote>\n<h2 id=\"Null-合并赋值\"><a href=\"#Null-合并赋值\" class=\"headerlink\" title=\"Null 合并赋值\"></a><span style=\"color:#0366d6;\">Null 合并赋值</span></h2><blockquote>\n<p>C# 8.0 引入了 null 合并赋值运算符 ??=。 仅当左操作数计算为 null 时，才能使用运算符 ??= 将其右操作数的值分配给左操作数</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;<span class=\"keyword\">int</span>&gt; numbers = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span>? i = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">numbers ??= <span class=\"keyword\">new</span> List&lt;<span class=\"keyword\">int</span>&gt;();</span><br><span class=\"line\">numbers.Add(i ??= <span class=\"number\">17</span>);</span><br><span class=\"line\">numbers.Add(i ??= <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"keyword\">string</span>.Join(<span class=\"string\">\" \"</span>, numbers));  <span class=\"comment\">// output: 17 17</span></span><br><span class=\"line\">Console.WriteLine(i);  <span class=\"comment\">// output: 17</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"using-声明\"><a href=\"#using-声明\" class=\"headerlink\" title=\"using 声明\"></a><span style=\"color:#0366d6;\">using 声明</span></h2><blockquote>\n<p>using 声明 是前面带 using 关键字的变量声明。 它指示编译器声明的变量应在封闭范围的末尾进行处理</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">WriteLinesToFile</span>(<span class=\"params\">IEnumerable&lt;<span class=\"keyword\">string</span>&gt; lines</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> file = <span class=\"keyword\">new</span> System.IO.StreamWriter(<span class=\"string\">\"WriteLines2.txt\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Notice how we declare skippedLines after the using statement.</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> skippedLines = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> line <span class=\"keyword\">in</span> lines)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!line.Contains(<span class=\"string\">\"Second\"</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        file.WriteLine(line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        skippedLines++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Notice how skippedLines is in scope here.</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> skippedLines;</span><br><span class=\"line\"><span class=\"comment\">// file is disposed here</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可处置的-ref-结构\"><a href=\"#可处置的-ref-结构\" class=\"headerlink\" title=\"可处置的 ref 结构\"></a><span style=\"color:#0366d6;\">可处置的 ref 结构</span></h2><blockquote>\n<p>用 ref 修饰符声明的 struct 可能无法实现任何接口，因此无法实现 IDisposable。 因此，要能够处理 ref struct，它必须有一个可访问的 void Dispose() 方法。 此功能同样适用于 readonly ref struct 声明。</p>\n</blockquote>\n<h2 id=\"静态本地函数\"><a href=\"#静态本地函数\" class=\"headerlink\" title=\"静态本地函数\"></a><span style=\"color:#0366d6;\">静态本地函数</span></h2><blockquote>\n<p>考虑下列代码。 本地函数 LocalFunction 访问在封闭范围（方法 M）中声明的变量 y。 因此，不能用 static 修饰符来声明 LocalFunction：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">M</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y;</span><br><span class=\"line\">LocalFunction();</span><br><span class=\"line\"><span class=\"keyword\">return</span> y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LocalFunction</span>(<span class=\"params\"></span>)</span> =&gt; y = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下面的代码包含一个静态本地函数。 它可以是静态的，因为它不访问封闭范围中的任何变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">M</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> y = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> Add(x, y);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right</span>)</span> =&gt; left + right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Readonly-成员\"><a href=\"#Readonly-成员\" class=\"headerlink\" title=\"Readonly 成员\"></a><span style=\"color:#0366d6;\">Readonly 成员</span></h2><blockquote>\n<p>在 readonly 成员定义中，readonly 表示 struct 的成员不会改变结构的内部状态<br>其他情况下，你可以创建支持可变的结构。 在这些情况下，多个实例成员可能不会修改结构的内部状态。 可以使用 readonly 修饰符声明那些实例成员。 编译器会强制执行你的意图。 如果该成员直接修改状态或访问未使用 readonly 修饰符声明的成员，则结果为编译时错误。 readonly 修饰符对 struct 成员有效，而对 class 或 interface 成员声明无效</p>\n</blockquote>\n<blockquote>\n<p>readonly 修饰符对 struct 的大多数成员有效，包括重写在 System.Object 中声明的方法的方法。 但存在一些限制：<br>不能声明 readonly 静态方法或属性。<br>无法声明 readonly 构造函数。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> Point</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> X &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> Y &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">double</span> Distance =&gt; Math.Sqrt(X * X + Y * Y);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span> =&gt;</span><br><span class=\"line\"><span class=\"string\">$\"(<span class=\"subst\">&#123;X&#125;</span>, <span class=\"subst\">&#123;Y&#125;</span>) is <span class=\"subst\">&#123;Distance&#125;</span> from the origin\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"索引和范围\"><a href=\"#索引和范围\" class=\"headerlink\" title=\"索引和范围\"></a><span style=\"color:#0366d6;\">索引和范围</span></h2><blockquote>\n<p>让我们从索引规则开始。 请考虑数组 sequence。 0 索引与 sequence[0] 相同。 ^0 索引与 sequence[sequence.Length] 相同。 请注意，sequence[^0] 不会引发异常，就像 sequence[sequence.Length] 一样。 对于任何数字 n，索引 ^n 与 sequence.Length - n 相同。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> words = <span class=\"keyword\">new</span> <span class=\"keyword\">string</span>[]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">                <span class=\"comment\">// index from start    index from end</span></span><br><span class=\"line\">    <span class=\"string\">\"The\"</span>,      <span class=\"comment\">// 0                   ^9</span></span><br><span class=\"line\">    <span class=\"string\">\"quick\"</span>,    <span class=\"comment\">// 1                   ^8</span></span><br><span class=\"line\">    <span class=\"string\">\"brown\"</span>,    <span class=\"comment\">// 2                   ^7</span></span><br><span class=\"line\">    <span class=\"string\">\"fox\"</span>,      <span class=\"comment\">// 3                   ^6</span></span><br><span class=\"line\">    <span class=\"string\">\"jumped\"</span>,   <span class=\"comment\">// 4                   ^5</span></span><br><span class=\"line\">    <span class=\"string\">\"over\"</span>,     <span class=\"comment\">// 5                   ^4</span></span><br><span class=\"line\">    <span class=\"string\">\"the\"</span>,      <span class=\"comment\">// 6                   ^3</span></span><br><span class=\"line\">    <span class=\"string\">\"lazy\"</span>,     <span class=\"comment\">// 7                   ^2</span></span><br><span class=\"line\">    <span class=\"string\">\"dog\"</span>       <span class=\"comment\">// 8                   ^1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>可以使用 ^1 索引检索最后一个词：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"The last word is <span class=\"subst\">&#123;words[^<span class=\"number\">1</span>]&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// writes \"dog\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下代码创建了一个包含单词“quick”、“brown”和“fox”的子范围。 它包括 words[1] 到 words[3]。 元素 words[4] 不在该范围内。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> quickBrownFox = words[<span class=\"number\">1.</span><span class=\"number\">.4</span>];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下代码使用“lazy”和“dog”创建一个子范围。 它包括 words[^2] 和 words[^1]。 末尾索引 words[^0] 不包括在内：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lazyDog = words[^<span class=\"number\">2.</span>.^<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>下面的示例为开始和/或结束创建了开放范围：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> allWords = words[..]; <span class=\"comment\">// contains \"The\" through \"dog\".</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstPhrase = words[.<span class=\"number\">.4</span>]; <span class=\"comment\">// contains \"The\" through \"fox\"</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastPhrase = words[<span class=\"number\">6.</span>.]; <span class=\"comment\">// contains \"the\", \"lazy\" and \"dog\"</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此外可以将范围声明为变量：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Range phrase = <span class=\"number\">1.</span><span class=\"number\">.4</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = words[phrase];</span><br></pre></td></tr></table></figure>\n<h2 id=\"默认接口方法\"><a href=\"#默认接口方法\" class=\"headerlink\" title=\"默认接口方法\"></a><span style=\"color:#0366d6;\">默认接口方法</span></h2><blockquote>\n<p>默认接口实现使开发人员能够升级接口，同时仍允许任何实现器替代该实现。 库的用户可以接受默认实现作为非中断性变更</p>\n</blockquote>\n<details>\n<summary>展开查看</summary>\n\n<blockquote>\n<p>ICustomer</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICustomer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">IEnumerable&lt;IOrder&gt; PreviousOrders &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">DateTime DateJoined &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">DateTime? LastOrder &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"><span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">IDictionary&lt;DateTime, <span class=\"keyword\">string</span>&gt; Reminders &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetLoyaltyThresholds</span>(<span class=\"params\">TimeSpan ago, <span class=\"keyword\">int</span> minimumOrders, <span class=\"keyword\">decimal</span> percentageDiscount</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">length = ago; </span><br><span class=\"line\">orderCount = minimumOrders;</span><br><span class=\"line\">discountPercent = percentageDiscount;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TimeSpan length = <span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">365</span> * <span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>); <span class=\"comment\">// two years</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> orderCount = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">decimal</span> discountPercent = <span class=\"number\">0.10</span>m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;SnippetFinalVersion&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">decimal</span> <span class=\"title\">ComputeLoyaltyDiscount</span>(<span class=\"params\"></span>)</span> =&gt; DefaultLoyaltyDiscount(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">decimal</span> <span class=\"title\">DefaultLoyaltyDiscount</span>(<span class=\"params\">ICustomer c</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">DateTime start = DateTime.Now - length;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((c.DateJoined &lt; start) &amp;&amp; (c.PreviousOrders.Count() &gt; orderCount))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> discountPercent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &lt;/SnippetFinalVersion&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>IOrder</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IOrder</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DateTime Purchased &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">decimal</span> Cost &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SampleCustomer</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleCustomer</span> : <span class=\"title\">ICustomer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleCustomer</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, DateTime dateJoined</span>)</span> =&gt; </span><br><span class=\"line\">(Name, DateJoined) = (name, dateJoined);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;IOrder&gt; allOrders = <span class=\"keyword\">new</span> List&lt;IOrder&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> IEnumerable&lt;IOrder&gt; PreviousOrders =&gt; allOrders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> DateTime DateJoined &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> DateTime? LastOrder &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">private</span> <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Dictionary&lt;DateTime, <span class=\"keyword\">string</span>&gt; reminders = <span class=\"keyword\">new</span> Dictionary&lt;DateTime, <span class=\"keyword\">string</span>&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> IDictionary&lt;DateTime, <span class=\"keyword\">string</span>&gt; Reminders =&gt; reminders;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">AddOrder</span>(<span class=\"params\">IOrder order</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (order.Purchased &gt; (LastOrder ?? DateTime.MinValue))</span><br><span class=\"line\">LastOrder = order.Purchased;</span><br><span class=\"line\">allOrders.Add(order);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;SnippetOverrideAndExtend&gt;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">decimal</span> <span class=\"title\">ComputeLoyaltyDiscount</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (PreviousOrders.Any() == <span class=\"literal\">false</span>)</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0.50</span>m;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> ICustomer.DefaultLoyaltyDiscount(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &lt;/SnippetOverrideAndExtend&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>SampleOrder</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleOrder</span> : <span class=\"title\">IOrder</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleOrder</span>(<span class=\"params\">DateTime purchase, <span class=\"keyword\">decimal</span> cost</span>)</span> =&gt;</span><br><span class=\"line\">        (Purchased, Cost) = (purchase, cost);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime Purchased &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">decimal</span> Cost &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// &lt;SnippetTestDefaultImplementation&gt;</span></span><br><span class=\"line\">SampleCustomer c = <span class=\"keyword\">new</span> SampleCustomer(<span class=\"string\">\"customer one\"</span>, <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2010</span>, <span class=\"number\">5</span>, <span class=\"number\">31</span>))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Reminders =</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">&#123; <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2010</span>, <span class=\"number\">08</span>, <span class=\"number\">12</span>), <span class=\"string\">\"childs's birthday\"</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"keyword\">new</span> DateTime(<span class=\"number\">1012</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>), <span class=\"string\">\"anniversary\"</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">SampleOrder o = <span class=\"keyword\">new</span> SampleOrder(<span class=\"keyword\">new</span> DateTime(<span class=\"number\">2012</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>), <span class=\"number\">5</span>m);</span><br><span class=\"line\">c.AddOrder(o);</span><br><span class=\"line\"></span><br><span class=\"line\">o = <span class=\"keyword\">new</span> SampleOrder(<span class=\"keyword\">new</span> DateTime(<span class=\"number\">2103</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>), <span class=\"number\">25</span>m);</span><br><span class=\"line\">c.AddOrder(o);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;SnippetHighlightCast&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// Check the discount:</span></span><br><span class=\"line\">ICustomer theCustomer = c;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Current discount: <span class=\"subst\">&#123;theCustomer.ComputeLoyaltyDiscount()&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// &lt;/SnippetHighlightCast&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// &lt;/SnippetTestDefaultImplementation&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add more orders to get the discount:</span></span><br><span class=\"line\">DateTime recurring = <span class=\"keyword\">new</span> DateTime(<span class=\"number\">2013</span>, <span class=\"number\">3</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">15</span>; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">o = <span class=\"keyword\">new</span> SampleOrder(recurring, <span class=\"number\">19.23</span>m * i);</span><br><span class=\"line\">c.AddOrder(o);</span><br><span class=\"line\"></span><br><span class=\"line\">recurring.AddMonths(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Data about <span class=\"subst\">&#123;c.Name&#125;</span>\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Joined on <span class=\"subst\">&#123;c.DateJoined&#125;</span>. Made <span class=\"subst\">&#123;c.PreviousOrders.Count()&#125;</span> orders, the last on <span class=\"subst\">&#123;c.LastOrder&#125;</span>\"</span>);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">\"Reminders:\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> c.Reminders)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"\\t<span class=\"subst\">&#123;item.Value&#125;</span> on <span class=\"subst\">&#123;item.Key&#125;</span>\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (IOrder order <span class=\"keyword\">in</span> c.PreviousOrders)</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Order on <span class=\"subst\">&#123;order.Purchased&#125;</span> for <span class=\"subst\">&#123;order.Cost&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Current discount: <span class=\"subst\">&#123;theCustomer.ComputeLoyaltyDiscount()&#125;</span>\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &lt;SnippetSetLoyaltyThresholds&gt;</span></span><br><span class=\"line\">ICustomer.SetLoyaltyThresholds(<span class=\"keyword\">new</span> TimeSpan(<span class=\"number\">30</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"number\">1</span>, <span class=\"number\">0.25</span>m);</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">$\"Current discount: <span class=\"subst\">&#123;theCustomer.ComputeLoyaltyDiscount()&#125;</span>\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// &lt;/SnippetSetLoyaltyThresholds&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"更多位模式\"><a href=\"#更多位模式\" class=\"headerlink\" title=\"更多位模式\"></a><span style=\"color:#0366d6;\">更多位模式</span></h2><h3 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Rainbow</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Red,</span><br><span class=\"line\">    Orange,</span><br><span class=\"line\">    Yellow,</span><br><span class=\"line\">    Green,</span><br><span class=\"line\">    Blue,</span><br><span class=\"line\">    Indigo,</span><br><span class=\"line\">    Violet</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RGBColor <span class=\"title\">FromRainbow</span>(<span class=\"params\">Rainbow colorBand</span>)</span> =&gt;</span><br><span class=\"line\">colorBand <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Rainbow.Red    =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>),</span><br><span class=\"line\">    Rainbow.Orange =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0x7F</span>, <span class=\"number\">0x00</span>),</span><br><span class=\"line\">    Rainbow.Yellow =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>),</span><br><span class=\"line\">    Rainbow.Green  =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>),</span><br><span class=\"line\">    Rainbow.Blue   =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>),</span><br><span class=\"line\">    Rainbow.Indigo =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x4B</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x82</span>),</span><br><span class=\"line\">    Rainbow.Violet =&gt; <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x94</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xD3</span>),</span><br><span class=\"line\">    _              =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"invalid enum value\"</span>, paramName: <span class=\"keyword\">nameof</span>(colorBand)),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1.变量位于 switch 关键字之前。 不同的顺序使得在视觉上可以很轻松地区分 switch 表达式和 switch 语句。<br>2.将 case 和 : 元素替换为 =&gt;。 它更简洁，更直观。<br>3.将 default 事例替换为 _ 弃元。<br>4.正文是表达式，不是语句。</p>\n</blockquote>\n<blockquote>\n<p>原来的格式：</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> RGBColor <span class=\"title\">FromRainbowClassic</span>(<span class=\"params\">Rainbow colorBand</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (colorBand)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Red:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Orange:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0x7F</span>, <span class=\"number\">0x00</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Yellow:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0xFF</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Green:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>, <span class=\"number\">0x00</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Blue:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x00</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xFF</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Indigo:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x4B</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0x82</span>);</span><br><span class=\"line\"><span class=\"keyword\">case</span> Rainbow.Violet:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RGBColor(<span class=\"number\">0x94</span>, <span class=\"number\">0x00</span>, <span class=\"number\">0xD3</span>);</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(message: <span class=\"string\">\"invalid enum value\"</span>, paramName: <span class=\"keyword\">nameof</span>(colorBand));</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"属性模式\"><a href=\"#属性模式\" class=\"headerlink\" title=\"属性模式\"></a>属性模式</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">decimal</span> <span class=\"title\">ComputeSalesTax</span>(<span class=\"params\">Address location, <span class=\"keyword\">decimal</span> salePrice</span>)</span> =&gt;</span><br><span class=\"line\">    location <span class=\"keyword\">switch</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        &#123; State: <span class=\"string\">\"WA\"</span> &#125; =&gt; salePrice * <span class=\"number\">0.06</span>M,</span><br><span class=\"line\">        &#123; State: <span class=\"string\">\"MN\"</span> &#125; =&gt; salePrice * <span class=\"number\">0.75</span>M,</span><br><span class=\"line\">        &#123; State: <span class=\"string\">\"MI\"</span> &#125; =&gt; salePrice * <span class=\"number\">0.05</span>M,</span><br><span class=\"line\">        <span class=\"comment\">// other cases removed for brevity...</span></span><br><span class=\"line\">        _ =&gt; <span class=\"number\">0</span>M</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"元组模式\"><a href=\"#元组模式\" class=\"headerlink\" title=\"元组模式\"></a>元组模式</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">string</span> <span class=\"title\">RockPaperScissors</span>(<span class=\"params\"><span class=\"keyword\">string</span> first, <span class=\"keyword\">string</span> second</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    =&gt; (first, second) <span class=\"keyword\">switch</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (<span class=\"string\">\"rock\"</span>, <span class=\"string\">\"paper\"</span>) =&gt; <span class=\"string\">\"rock is covered by paper. Paper wins.\"</span>,</span><br><span class=\"line\">        (<span class=\"string\">\"rock\"</span>, <span class=\"string\">\"scissors\"</span>) =&gt; <span class=\"string\">\"rock breaks scissors. Rock wins.\"</span>,</span><br><span class=\"line\">        (<span class=\"string\">\"paper\"</span>, <span class=\"string\">\"rock\"</span>) =&gt; <span class=\"string\">\"paper covers rock. Paper wins.\"</span>,</span><br><span class=\"line\">        (<span class=\"string\">\"paper\"</span>, <span class=\"string\">\"scissors\"</span>) =&gt; <span class=\"string\">\"paper is cut by scissors. Scissors wins.\"</span>,</span><br><span class=\"line\">        (<span class=\"string\">\"scissors\"</span>, <span class=\"string\">\"rock\"</span>) =&gt; <span class=\"string\">\"scissors is broken by rock. Rock wins.\"</span>,</span><br><span class=\"line\">        (<span class=\"string\">\"scissors\"</span>, <span class=\"string\">\"paper\"</span>) =&gt; <span class=\"string\">\"scissors cuts paper. Scissors wins.\"</span>,</span><br><span class=\"line\">        (_, _) =&gt; <span class=\"string\">\"tie\"</span></span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"位置模式\"><a href=\"#位置模式\" class=\"headerlink\" title=\"位置模式\"></a>位置模式</h3><details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Point</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> X &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> Y &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Point</span>(<span class=\"params\"><span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y</span>)</span> =&gt; (X, Y) = (x, y);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Deconstruct</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">int</span> x, <span class=\"keyword\">out</span> <span class=\"keyword\">int</span> y</span>)</span> =&gt;</span><br><span class=\"line\">        (x, y) = (X, Y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> Quadrant</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Unknown,</span><br><span class=\"line\">    Origin,</span><br><span class=\"line\">    One,</span><br><span class=\"line\">    Two,</span><br><span class=\"line\">    Three,</span><br><span class=\"line\">    Four,</span><br><span class=\"line\">    OnBorder</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> Quadrant <span class=\"title\">GetQuadrant</span>(<span class=\"params\">Point point</span>)</span> =&gt; point <span class=\"keyword\">switch</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    (<span class=\"number\">0</span>, <span class=\"number\">0</span>) =&gt; Quadrant.Origin,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (x, y) <span class=\"keyword\">when</span> x &gt; <span class=\"number\">0</span> &amp;&amp; y &gt; <span class=\"number\">0</span> =&gt; Quadrant.One,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (x, y) <span class=\"keyword\">when</span> x &lt; <span class=\"number\">0</span> &amp;&amp; y &gt; <span class=\"number\">0</span> =&gt; Quadrant.Two,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (x, y) <span class=\"keyword\">when</span> x &lt; <span class=\"number\">0</span> &amp;&amp; y &lt; <span class=\"number\">0</span> =&gt; Quadrant.Three,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (x, y) <span class=\"keyword\">when</span> x &gt; <span class=\"number\">0</span> &amp;&amp; y &lt; <span class=\"number\">0</span> =&gt; Quadrant.Four,</span><br><span class=\"line\">    <span class=\"keyword\">var</span> (_, _) =&gt; Quadrant.OnBorder,</span><br><span class=\"line\">    _ =&gt; Quadrant.Unknown</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h2 id=\"异步流\"><a href=\"#异步流\" class=\"headerlink\" title=\"异步流\"></a><span style=\"color:#0366d6;\">异步流</span></h2><blockquote>\n<p>todo</p>\n</blockquote>"},{"title":"linux","date":"2020-03-28T16:00:00.000Z","_content":"linux 安装设置问题\n<!-- more -->\n# <span style=\"color:#0366d6;\">CentOS8 中文输入法</span>\n$ sudo dnf install ibus-libpinyin.x86_64 -y\n>dnf是centos 8新的包管理工具，yum依旧保留\n查看【设置】的【Region&Language】里的【输入源】的【汉语(中国)】里面，有没有添加【汉语(智能拼音)】,若没有则重启下机器，再来添加。\n# <span style=\"color:#0366d6;\">文件和文件权限</span>\n文件名\n>\n文件名前多一个“.”表示文件是一个隐藏文件\n单一文件名字是255个字节，以一个ASCII英文字符占用一个字节来说\n英文字母大概是255个，中文是128个\n\n文件权限\n>r 可读写文件的内容\nw 可以写入文件，但不可以删除文件\nx 该文件可以被执行\n\n目录权限\n>r 读取目录中的内容\nw 修改目录中的内容，可以删除目录中的文件\nx 访问目录，读取目录中的文件名字\n\n修改文件的权限\n>chgrp 修改文件所在的用户组\nchown 修改文件拥有者\nchmod 修改文件的权限\n\nls -l\n>-rwxrwxrwx 显示的结果第一个字符为文件的类型\n-表示为常规文件：纯文本文件，二进制文件，数据文件\nd 表示文目录\nl 表示为link文件\nb 区块文件（block）\nc 字符设备文件（character）\n\n\n","source":"_posts/linux-install-1.md","raw":"---\ntitle: linux\ndate: 2020-03-29\ntags: [linux]\ncategories: linux\n---\nlinux 安装设置问题\n<!-- more -->\n# <span style=\"color:#0366d6;\">CentOS8 中文输入法</span>\n$ sudo dnf install ibus-libpinyin.x86_64 -y\n>dnf是centos 8新的包管理工具，yum依旧保留\n查看【设置】的【Region&Language】里的【输入源】的【汉语(中国)】里面，有没有添加【汉语(智能拼音)】,若没有则重启下机器，再来添加。\n# <span style=\"color:#0366d6;\">文件和文件权限</span>\n文件名\n>\n文件名前多一个“.”表示文件是一个隐藏文件\n单一文件名字是255个字节，以一个ASCII英文字符占用一个字节来说\n英文字母大概是255个，中文是128个\n\n文件权限\n>r 可读写文件的内容\nw 可以写入文件，但不可以删除文件\nx 该文件可以被执行\n\n目录权限\n>r 读取目录中的内容\nw 修改目录中的内容，可以删除目录中的文件\nx 访问目录，读取目录中的文件名字\n\n修改文件的权限\n>chgrp 修改文件所在的用户组\nchown 修改文件拥有者\nchmod 修改文件的权限\n\nls -l\n>-rwxrwxrwx 显示的结果第一个字符为文件的类型\n-表示为常规文件：纯文本文件，二进制文件，数据文件\nd 表示文目录\nl 表示为link文件\nb 区块文件（block）\nc 字符设备文件（character）\n\n\n","slug":"linux-install-1","published":1,"updated":"2022-08-17T06:55:45.679Z","_id":"ck8cogg490000dctxhglsbdol","comments":1,"layout":"post","photos":[],"link":"","content":"<p>linux 安装设置问题</p>\n<a id=\"more\"></a>\n<h1 id=\"CentOS8-中文输入法\"><a href=\"#CentOS8-中文输入法\" class=\"headerlink\" title=\"CentOS8 中文输入法\"></a><span style=\"color:#0366d6;\">CentOS8 中文输入法</span></h1><p>$ sudo dnf install ibus-libpinyin.x86_64 -y</p>\n<blockquote>\n<p>dnf是centos 8新的包管理工具，yum依旧保留<br>查看【设置】的【Region&amp;Language】里的【输入源】的【汉语(中国)】里面，有没有添加【汉语(智能拼音)】,若没有则重启下机器，再来添加。</p>\n</blockquote>\n<h1 id=\"文件和文件权限\"><a href=\"#文件和文件权限\" class=\"headerlink\" title=\"文件和文件权限\"></a><span style=\"color:#0366d6;\">文件和文件权限</span></h1><p>文件名</p>\n<blockquote>\n</blockquote>\n<p>文件名前多一个“.”表示文件是一个隐藏文件<br>单一文件名字是255个字节，以一个ASCII英文字符占用一个字节来说<br>英文字母大概是255个，中文是128个</p>\n<p>文件权限</p>\n<blockquote>\n<p>r 可读写文件的内容<br>w 可以写入文件，但不可以删除文件<br>x 该文件可以被执行</p>\n</blockquote>\n<p>目录权限</p>\n<blockquote>\n<p>r 读取目录中的内容<br>w 修改目录中的内容，可以删除目录中的文件<br>x 访问目录，读取目录中的文件名字</p>\n</blockquote>\n<p>修改文件的权限</p>\n<blockquote>\n<p>chgrp 修改文件所在的用户组<br>chown 修改文件拥有者<br>chmod 修改文件的权限</p>\n</blockquote>\n<p>ls -l</p>\n<blockquote>\n<p>-rwxrwxrwx 显示的结果第一个字符为文件的类型<br>-表示为常规文件：纯文本文件，二进制文件，数据文件<br>d 表示文目录<br>l 表示为link文件<br>b 区块文件（block）<br>c 字符设备文件（character）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>linux 安装设置问题</p>","more":"<h1 id=\"CentOS8-中文输入法\"><a href=\"#CentOS8-中文输入法\" class=\"headerlink\" title=\"CentOS8 中文输入法\"></a><span style=\"color:#0366d6;\">CentOS8 中文输入法</span></h1><p>$ sudo dnf install ibus-libpinyin.x86_64 -y</p>\n<blockquote>\n<p>dnf是centos 8新的包管理工具，yum依旧保留<br>查看【设置】的【Region&amp;Language】里的【输入源】的【汉语(中国)】里面，有没有添加【汉语(智能拼音)】,若没有则重启下机器，再来添加。</p>\n</blockquote>\n<h1 id=\"文件和文件权限\"><a href=\"#文件和文件权限\" class=\"headerlink\" title=\"文件和文件权限\"></a><span style=\"color:#0366d6;\">文件和文件权限</span></h1><p>文件名</p>\n<blockquote>\n</blockquote>\n<p>文件名前多一个“.”表示文件是一个隐藏文件<br>单一文件名字是255个字节，以一个ASCII英文字符占用一个字节来说<br>英文字母大概是255个，中文是128个</p>\n<p>文件权限</p>\n<blockquote>\n<p>r 可读写文件的内容<br>w 可以写入文件，但不可以删除文件<br>x 该文件可以被执行</p>\n</blockquote>\n<p>目录权限</p>\n<blockquote>\n<p>r 读取目录中的内容<br>w 修改目录中的内容，可以删除目录中的文件<br>x 访问目录，读取目录中的文件名字</p>\n</blockquote>\n<p>修改文件的权限</p>\n<blockquote>\n<p>chgrp 修改文件所在的用户组<br>chown 修改文件拥有者<br>chmod 修改文件的权限</p>\n</blockquote>\n<p>ls -l</p>\n<blockquote>\n<p>-rwxrwxrwx 显示的结果第一个字符为文件的类型<br>-表示为常规文件：纯文本文件，二进制文件，数据文件<br>d 表示文目录<br>l 表示为link文件<br>b 区块文件（block）<br>c 字符设备文件（character）</p>\n</blockquote>"},{"title":"WPF 小知识点","date":"2020-04-17T16:00:00.000Z","_content":"<!-- more -->\n# <span style=\"color:#0366d6;\">Label</span>\nLabel Padding  默认有值，如有需要可以置零\n``` Html\nLabel.Padding = new Thickness(0);\n```\n","source":"_posts/WPF-1.md","raw":"---\ntitle: WPF 小知识点 \ndate: 2020-04-18\ntags: [WPF]\ncategories: WPF\n---\n<!-- more -->\n# <span style=\"color:#0366d6;\">Label</span>\nLabel Padding  默认有值，如有需要可以置零\n``` Html\nLabel.Padding = new Thickness(0);\n```\n","slug":"WPF-1","published":1,"updated":"2022-08-17T06:55:45.660Z","_id":"ck94yu0di00007wtxcjpbcvlj","comments":1,"layout":"post","photos":[],"link":"","content":"<a id=\"more\"></a>\n<h1 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a><span style=\"color:#0366d6;\">Label</span></h1><p>Label Padding  默认有值，如有需要可以置零</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Label.Padding = new Thickness(0);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a><span style=\"color:#0366d6;\">Label</span></h1><p>Label Padding  默认有值，如有需要可以置零</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Label.Padding = new Thickness(0);</span><br></pre></td></tr></table></figure>"},{"title":"WPF Style","date":"2020-04-18T16:00:00.000Z","_content":"<!-- more -->\n# <span style=\"color:#0366d6;\">Style 常见写法</span>\n隐式写法,对所有Label有效\n``` Html\n <Style TargetType=\"Label\">\n  <Setter Property=\"Padding\" Value=\"0\"/>\n </Style>\n```\n显示写法,对所有Label.Style=lblStyle有效\nXAML语法 Style=\"{StaticResource lblStyle有效}\"\nC#语法Label.Style = Resources[\"lblStyle\"] as Style;\n``` Html\n <Style  x:Key=\"lblStyle\" TargetType=\"Label\">\n  <Setter Property=\"Padding\" Value=\"0\"/>\n </Style>\n```\n显示写法,类似隐式写法\n``` Html\n <Style x:Key=\"{x:Type Label}\" TargetType=\"Label\">\n  <Setter Property=\"Padding\" Value=\"0\"/>\n </Style>\n```\n\n内部写法，类似于显示写法，对应用Key才有效，只是语法不同\n``` Html\n<Style x:Key=\"lblStyle\">\n  <Setter Property=\"Control.Padding\" Value=\"0\"/>\n</Style>\n```\n# <span style=\"color:#0366d6;\">Style 继承</span>\n继承借助关键字BasedOn\n``` Html\n<Style x:Key=\"myLabelStyle\" TargetType=\"Label\" BasedOn=\"{StaticResource lblStyle}\">\n  <Setter Property=\"Width\" Value=\"10\"/>\n</Style>\n```\n\n# <span style=\"color:#0366d6;\">Style 触发器</span>\n属性触发器\n``` Html\n <Style  x:Key=\"lblStyle\" TargetType=\"Label\">\n <DataTrigger Binding=\"{Binding Path=IsTaped}\" Value=\"true\">\n  <Setter Property=\"Background\" Value=\"Red\"/>\n </DataTrigger>\n </Style>\n```\n可以是事件属性\n``` Html\n <Style  x:Key=\"lblStyle\" TargetType=\"Label\">\n  <Style.Triggers>\n    <Trigger Property=\"IsMouseOver\" Value=\"True\">\n      <Setter Property=\"Background\" Value=\"#3f48cc\"/>                 \n    </Trigger>\n  </Style.Triggers>\n </Style>\n```\n多条件触发器\n``` Html\n<Style>\n <Style.Triggers>\n<MultiDataTrigger>\n    <MultiDataTrigger.Conditions>\n        <Condition Binding=\"{Binding Path=IsTaped}\" Value=\"true\"/>\n         <Condition Binding=\"{Binding Path=Name}\" Value=\"bin\"/>\n    </MultiDataTrigger.Conditions>\n    <MultiDataTrigger.Setters>\n        <Setter  Property=\"Background\" Value=\"Blue\"></Setter>\n    </MultiDataTrigger.Setters>\n</MultiDataTrigger>              \n</Style.Triggers>\n</Style>\n```\n``` Html\n<Style>\n <Style.Triggers>\n<MultiTrigger>\n    <MultiTrigger.Conditions>\n        <Condition Binding=\"{Binding Path=IsTaped}\" Value=\"true\"/>\n         <Condition Binding=\"{Binding Path=Name}\" Value=\"bin\"/>\n    </MultiTrigger.Conditions>\n    <MultiTrigger.Setters>\n        <Setter  Property=\"Background\" Value=\"Blue\"></Setter>\n    </MultiTrigger.Setters>\n</MultiTrigger>              \n</Style.Triggers>\n</Style>\n```\n事件触发器\n``` Html\n <Style  x:Key=\"lblStyle\" TargetType=\"Label\">\n  <Style.Triggers>\n   <EventSetter Event=\"Label.IsMouseOver\" Handler=\"element_MouseOver\"/>   \n  </Style.Triggers>\n </Style>\n```\n# <span style=\"color:#0366d6;\">样式注意点</span>\n>动态改变属性,可以调用Window,UserControl,Application,Page的 Resources.MergedDictionaries来添加style\n>保持默认样式，Style=\"{x:Null}\"\n","source":"_posts/WPF-2.md","raw":"---\ntitle: WPF Style \ndate: 2020-04-19\ntags: [WPF]\ncategories: WPF\n---\n<!-- more -->\n# <span style=\"color:#0366d6;\">Style 常见写法</span>\n隐式写法,对所有Label有效\n``` Html\n <Style TargetType=\"Label\">\n  <Setter Property=\"Padding\" Value=\"0\"/>\n </Style>\n```\n显示写法,对所有Label.Style=lblStyle有效\nXAML语法 Style=\"{StaticResource lblStyle有效}\"\nC#语法Label.Style = Resources[\"lblStyle\"] as Style;\n``` Html\n <Style  x:Key=\"lblStyle\" TargetType=\"Label\">\n  <Setter Property=\"Padding\" Value=\"0\"/>\n </Style>\n```\n显示写法,类似隐式写法\n``` Html\n <Style x:Key=\"{x:Type Label}\" TargetType=\"Label\">\n  <Setter Property=\"Padding\" Value=\"0\"/>\n </Style>\n```\n\n内部写法，类似于显示写法，对应用Key才有效，只是语法不同\n``` Html\n<Style x:Key=\"lblStyle\">\n  <Setter Property=\"Control.Padding\" Value=\"0\"/>\n</Style>\n```\n# <span style=\"color:#0366d6;\">Style 继承</span>\n继承借助关键字BasedOn\n``` Html\n<Style x:Key=\"myLabelStyle\" TargetType=\"Label\" BasedOn=\"{StaticResource lblStyle}\">\n  <Setter Property=\"Width\" Value=\"10\"/>\n</Style>\n```\n\n# <span style=\"color:#0366d6;\">Style 触发器</span>\n属性触发器\n``` Html\n <Style  x:Key=\"lblStyle\" TargetType=\"Label\">\n <DataTrigger Binding=\"{Binding Path=IsTaped}\" Value=\"true\">\n  <Setter Property=\"Background\" Value=\"Red\"/>\n </DataTrigger>\n </Style>\n```\n可以是事件属性\n``` Html\n <Style  x:Key=\"lblStyle\" TargetType=\"Label\">\n  <Style.Triggers>\n    <Trigger Property=\"IsMouseOver\" Value=\"True\">\n      <Setter Property=\"Background\" Value=\"#3f48cc\"/>                 \n    </Trigger>\n  </Style.Triggers>\n </Style>\n```\n多条件触发器\n``` Html\n<Style>\n <Style.Triggers>\n<MultiDataTrigger>\n    <MultiDataTrigger.Conditions>\n        <Condition Binding=\"{Binding Path=IsTaped}\" Value=\"true\"/>\n         <Condition Binding=\"{Binding Path=Name}\" Value=\"bin\"/>\n    </MultiDataTrigger.Conditions>\n    <MultiDataTrigger.Setters>\n        <Setter  Property=\"Background\" Value=\"Blue\"></Setter>\n    </MultiDataTrigger.Setters>\n</MultiDataTrigger>              \n</Style.Triggers>\n</Style>\n```\n``` Html\n<Style>\n <Style.Triggers>\n<MultiTrigger>\n    <MultiTrigger.Conditions>\n        <Condition Binding=\"{Binding Path=IsTaped}\" Value=\"true\"/>\n         <Condition Binding=\"{Binding Path=Name}\" Value=\"bin\"/>\n    </MultiTrigger.Conditions>\n    <MultiTrigger.Setters>\n        <Setter  Property=\"Background\" Value=\"Blue\"></Setter>\n    </MultiTrigger.Setters>\n</MultiTrigger>              \n</Style.Triggers>\n</Style>\n```\n事件触发器\n``` Html\n <Style  x:Key=\"lblStyle\" TargetType=\"Label\">\n  <Style.Triggers>\n   <EventSetter Event=\"Label.IsMouseOver\" Handler=\"element_MouseOver\"/>   \n  </Style.Triggers>\n </Style>\n```\n# <span style=\"color:#0366d6;\">样式注意点</span>\n>动态改变属性,可以调用Window,UserControl,Application,Page的 Resources.MergedDictionaries来添加style\n>保持默认样式，Style=\"{x:Null}\"\n","slug":"WPF-2","published":1,"updated":"2022-08-17T06:55:45.660Z","_id":"ck95nqs6p00004otxg9vj1va1","comments":1,"layout":"post","photos":[],"link":"","content":"<a id=\"more\"></a>\n<h1 id=\"Style-常见写法\"><a href=\"#Style-常见写法\" class=\"headerlink\" title=\"Style 常见写法\"></a><span style=\"color:#0366d6;\">Style 常见写法</span></h1><p>隐式写法,对所有Label有效</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Padding\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示写法,对所有Label.Style=lblStyle有效<br>XAML语法 Style=”{StaticResource lblStyle有效}”<br>C#语法Label.Style = Resources[“lblStyle”] as Style;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>  <span class=\"attr\">x:Key</span>=<span class=\"string\">\"lblStyle\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Padding\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示写法,类似隐式写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">x:Key</span>=<span class=\"string\">\"&#123;x:Type Label&#125;\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Padding\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>内部写法，类似于显示写法，对应用Key才有效，只是语法不同</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">x:Key</span>=<span class=\"string\">\"lblStyle\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Control.Padding\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Style-继承\"><a href=\"#Style-继承\" class=\"headerlink\" title=\"Style 继承\"></a><span style=\"color:#0366d6;\">Style 继承</span></h1><p>继承借助关键字BasedOn</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">x:Key</span>=<span class=\"string\">\"myLabelStyle\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span> <span class=\"attr\">BasedOn</span>=<span class=\"string\">\"&#123;StaticResource lblStyle&#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Width\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"10\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Style-触发器\"><a href=\"#Style-触发器\" class=\"headerlink\" title=\"Style 触发器\"></a><span style=\"color:#0366d6;\">Style 触发器</span></h1><p>属性触发器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>  <span class=\"attr\">x:Key</span>=<span class=\"string\">\"lblStyle\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">DataTrigger</span> <span class=\"attr\">Binding</span>=<span class=\"string\">\"&#123;Binding Path=IsTaped&#125;\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"true\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Background\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Red\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">DataTrigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以是事件属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>  <span class=\"attr\">x:Key</span>=<span class=\"string\">\"lblStyle\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"> &lt;<span class=\"selector-tag\">Style</span><span class=\"selector-class\">.Triggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">   <span class=\"tag\">&lt;<span class=\"name\">Trigger</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"IsMouseOver\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"True\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">     <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Background\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"#3f48cc\"</span>/&gt;</span>                 </span></span><br><span class=\"line\"><span class=\"xml\">   <span class=\"tag\">&lt;/<span class=\"name\">Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>多条件触发器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"> &lt;<span class=\"selector-tag\">Style</span><span class=\"selector-class\">.Triggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MultiDataTrigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"css\">    &lt;<span class=\"selector-tag\">MultiDataTrigger</span><span class=\"selector-class\">.Conditions</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Condition</span> <span class=\"attr\">Binding</span>=<span class=\"string\">\"&#123;Binding Path=IsTaped&#125;\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">         <span class=\"tag\">&lt;<span class=\"name\">Condition</span> <span class=\"attr\">Binding</span>=<span class=\"string\">\"&#123;Binding Path=Name&#125;\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"bin\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">MultiDataTrigger.Conditions</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"css\">    &lt;<span class=\"selector-tag\">MultiDataTrigger</span><span class=\"selector-class\">.Setters</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Setter</span>  <span class=\"attr\">Property</span>=<span class=\"string\">\"Background\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">MultiDataTrigger.Setters</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">MultiDataTrigger</span>&gt;</span>              </span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"> &lt;<span class=\"selector-tag\">Style</span><span class=\"selector-class\">.Triggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MultiTrigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"css\">    &lt;<span class=\"selector-tag\">MultiTrigger</span><span class=\"selector-class\">.Conditions</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Condition</span> <span class=\"attr\">Binding</span>=<span class=\"string\">\"&#123;Binding Path=IsTaped&#125;\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">         <span class=\"tag\">&lt;<span class=\"name\">Condition</span> <span class=\"attr\">Binding</span>=<span class=\"string\">\"&#123;Binding Path=Name&#125;\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"bin\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">MultiTrigger.Conditions</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"css\">    &lt;<span class=\"selector-tag\">MultiTrigger</span><span class=\"selector-class\">.Setters</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Setter</span>  <span class=\"attr\">Property</span>=<span class=\"string\">\"Background\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">MultiTrigger.Setters</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">MultiTrigger</span>&gt;</span>              </span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>事件触发器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>  <span class=\"attr\">x:Key</span>=<span class=\"string\">\"lblStyle\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"> &lt;<span class=\"selector-tag\">Style</span><span class=\"selector-class\">.Triggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">EventSetter</span> <span class=\"attr\">Event</span>=<span class=\"string\">\"Label.IsMouseOver\"</span> <span class=\"attr\">Handler</span>=<span class=\"string\">\"element_MouseOver\"</span>/&gt;</span>   </span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"样式注意点\"><a href=\"#样式注意点\" class=\"headerlink\" title=\"样式注意点\"></a><span style=\"color:#0366d6;\">样式注意点</span></h1><blockquote>\n<p>动态改变属性,可以调用Window,UserControl,Application,Page的 Resources.MergedDictionaries来添加style<br>保持默认样式，Style=”{x:Null}”</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Style-常见写法\"><a href=\"#Style-常见写法\" class=\"headerlink\" title=\"Style 常见写法\"></a><span style=\"color:#0366d6;\">Style 常见写法</span></h1><p>隐式写法,对所有Label有效</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Padding\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示写法,对所有Label.Style=lblStyle有效<br>XAML语法 Style=”{StaticResource lblStyle有效}”<br>C#语法Label.Style = Resources[“lblStyle”] as Style;</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>  <span class=\"attr\">x:Key</span>=<span class=\"string\">\"lblStyle\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Padding\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>显示写法,类似隐式写法</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">x:Key</span>=<span class=\"string\">\"&#123;x:Type Label&#125;\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Padding\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>内部写法，类似于显示写法，对应用Key才有效，只是语法不同</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">x:Key</span>=<span class=\"string\">\"lblStyle\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Control.Padding\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Style-继承\"><a href=\"#Style-继承\" class=\"headerlink\" title=\"Style 继承\"></a><span style=\"color:#0366d6;\">Style 继承</span></h1><p>继承借助关键字BasedOn</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span> <span class=\"attr\">x:Key</span>=<span class=\"string\">\"myLabelStyle\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span> <span class=\"attr\">BasedOn</span>=<span class=\"string\">\"&#123;StaticResource lblStyle&#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Width\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"10\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Style-触发器\"><a href=\"#Style-触发器\" class=\"headerlink\" title=\"Style 触发器\"></a><span style=\"color:#0366d6;\">Style 触发器</span></h1><p>属性触发器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>  <span class=\"attr\">x:Key</span>=<span class=\"string\">\"lblStyle\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;<span class=\"name\">DataTrigger</span> <span class=\"attr\">Binding</span>=<span class=\"string\">\"&#123;Binding Path=IsTaped&#125;\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"true\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Background\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Red\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">DataTrigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>可以是事件属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>  <span class=\"attr\">x:Key</span>=<span class=\"string\">\"lblStyle\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"> &lt;<span class=\"selector-tag\">Style</span><span class=\"selector-class\">.Triggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">   <span class=\"tag\">&lt;<span class=\"name\">Trigger</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"IsMouseOver\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"True\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">     <span class=\"tag\">&lt;<span class=\"name\">Setter</span> <span class=\"attr\">Property</span>=<span class=\"string\">\"Background\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"#3f48cc\"</span>/&gt;</span>                 </span></span><br><span class=\"line\"><span class=\"xml\">   <span class=\"tag\">&lt;/<span class=\"name\">Trigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>多条件触发器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"> &lt;<span class=\"selector-tag\">Style</span><span class=\"selector-class\">.Triggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MultiDataTrigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"css\">    &lt;<span class=\"selector-tag\">MultiDataTrigger</span><span class=\"selector-class\">.Conditions</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Condition</span> <span class=\"attr\">Binding</span>=<span class=\"string\">\"&#123;Binding Path=IsTaped&#125;\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">         <span class=\"tag\">&lt;<span class=\"name\">Condition</span> <span class=\"attr\">Binding</span>=<span class=\"string\">\"&#123;Binding Path=Name&#125;\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"bin\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">MultiDataTrigger.Conditions</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"css\">    &lt;<span class=\"selector-tag\">MultiDataTrigger</span><span class=\"selector-class\">.Setters</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Setter</span>  <span class=\"attr\">Property</span>=<span class=\"string\">\"Background\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">MultiDataTrigger.Setters</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">MultiDataTrigger</span>&gt;</span>              </span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"> &lt;<span class=\"selector-tag\">Style</span><span class=\"selector-class\">.Triggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">MultiTrigger</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"css\">    &lt;<span class=\"selector-tag\">MultiTrigger</span><span class=\"selector-class\">.Conditions</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Condition</span> <span class=\"attr\">Binding</span>=<span class=\"string\">\"&#123;Binding Path=IsTaped&#125;\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">         <span class=\"tag\">&lt;<span class=\"name\">Condition</span> <span class=\"attr\">Binding</span>=<span class=\"string\">\"&#123;Binding Path=Name&#125;\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"bin\"</span>/&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">MultiTrigger.Conditions</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"css\">    &lt;<span class=\"selector-tag\">MultiTrigger</span><span class=\"selector-class\">.Setters</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">Setter</span>  <span class=\"attr\">Property</span>=<span class=\"string\">\"Background\"</span> <span class=\"attr\">Value</span>=<span class=\"string\">\"Blue\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Setter</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">MultiTrigger.Setters</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">MultiTrigger</span>&gt;</span>              </span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>事件触发器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Style</span>  <span class=\"attr\">x:Key</span>=<span class=\"string\">\"lblStyle\"</span> <span class=\"attr\">TargetType</span>=<span class=\"string\">\"Label\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\"> &lt;<span class=\"selector-tag\">Style</span><span class=\"selector-class\">.Triggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">EventSetter</span> <span class=\"attr\">Event</span>=<span class=\"string\">\"Label.IsMouseOver\"</span> <span class=\"attr\">Handler</span>=<span class=\"string\">\"element_MouseOver\"</span>/&gt;</span>   </span></span><br><span class=\"line\"><span class=\"xml\"> <span class=\"tag\">&lt;/<span class=\"name\">Style.Triggers</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"样式注意点\"><a href=\"#样式注意点\" class=\"headerlink\" title=\"样式注意点\"></a><span style=\"color:#0366d6;\">样式注意点</span></h1><blockquote>\n<p>动态改变属性,可以调用Window,UserControl,Application,Page的 Resources.MergedDictionaries来添加style<br>保持默认样式，Style=”{x:Null}”</p>\n</blockquote>"},{"title":"WPF 布局 基础篇","date":"2020-07-18T16:00:00.000Z","_content":"<!-- more -->\n参考:WPF 编程宝典\n# <span style=\"color:#0366d6;\">布局元素</span>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">名称</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">StackPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">在水平或者垂直的栈中堆放元素</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">WrapPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">按从左到右的顺序位置定位子元素，在包含框的边缘处将内容切换到下一行。 后续排序按照从上至下或从右至左的顺序进行，具体取决于 Orientation 属性的值。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">DockPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">用来定位子内容的布局容器的边缘</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">Grid</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">定义由列和行组成的灵活的网格区域</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">UniformGrid</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">提供一种在网格(网格中的所有单元格都具有相同的大小)中排列内容的方法</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">Canvas</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">定义一个区域，可在其中使用相对于 Canvas 区域的坐标以显式方式来定位子元素</td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">StackPanel</span>\n>该面板简单的在单行或者单列以堆栈形式放置其子元素，通过 Orientation=\"Horizontal\"或者\"Vertical\"\n```xml\n<StackPanel Margin=\"3\" Name=\"stackPanel1\" >\n    <Label Margin=\"3\" HorizontalAlignment=\"Center\">\n      A Button Stack\n    </Label>\n    <Button Margin=\"3\" MaxWidth=\"200\" MinWidth=\"100\">Button 1</Button>\n    <Button Margin=\"3\" MaxWidth=\"200\" MinWidth=\"100\">Button 2</Button>\n    <Button Margin=\"3\" MaxWidth=\"200\" MinWidth=\"100\">Button 3</Button>\n    <Button Margin=\"3\" MaxWidth=\"200\" MinWidth=\"100\">Button 4</Button>\n    <CheckBox Name=\"chkVertical\" Margin=\"10\" HorizontalAlignment=\"Center\"\n     Checked=\"chkVertical_Checked\" Unchecked=\"chkVertical_Unchecked\">\n      Use Vertical Orientation</CheckBox>            \n</StackPanel>\n```\n## <span style=\"color:#0366d6;\">WrapPanel</span>\n>该面板在可能的空间里面，以一次一行或者一列的方式布置控件。默认情况下Orientation=\"Horizontal\"\n```xml\n<WrapPanel Margin=\"3\">\n    <Button VerticalAlignment=\"Top\">Top Button</Button>\n    <Button MinHeight=\"60\">Tall Button 2</Button>\n    <Button VerticalAlignment=\"Bottom\">Bottom Button</Button>\n    <Button>Stretch Button</Button>\n    <Button VerticalAlignment=\"Center\">Centered Button</Button>   \n</WrapPanel>\n```\n## <span style=\"color:#0366d6;\">DockPanel</span>\n>DockPanel面吧是更有趣的布局选项。它沿着一条外边缘来拉伸所包含的控件。理解该面板最简便的方式是，考虑一下位于许多Windows应用程序窗口顶部的工具栏，>这些工具栏停靠到窗口顶部。与StackPanel面板类似，被停靠的元素选择它们的布局的一方面。例如，如果将一个按钮停靠在DockPanel面板顶部，该按钮被拉伸至>DockPanel面板的整个宽度，但根据内容和MinHeight属性为其设置所需的高度。而如果将一个按钮停靠到容器左边，该按钮的高度将被拉伸以适应容器的高度，而其>宽度可以根据需要自由添加。\n```xml\n<DockPanel LastChildFill=\"True\">\n      <Button DockPanel.Dock=\"Top\">A Stretched Top Button</Button>\n      <Button DockPanel.Dock=\"Top\" HorizontalAlignment=\"Center\">A Centered Top Button</Button>\n      <Button DockPanel.Dock=\"Top\" HorizontalAlignment=\"Left\">A Left-Aligned Top Button</Button>\n      <Button DockPanel.Dock=\"Bottom\">Bottom Button</Button>\n      <Button DockPanel.Dock=\"Left\">Left Button</Button>\n      <Button DockPanel.Dock=\"Right\">Right Button</Button>\n      <Button >Remaining Space</Button>\n</DockPanel>\n```\n## <span style=\"color:#0366d6;\">Grid</span>\n>Grid面板将元素分割到不可见的单元格中\n```xml\n<Grid ShowGridLines=\"True\">\n  <Grid.RowDefinitions>\n  <RowDefinition />\n  <RowDefinition />\n  </Grid.RowDefinitions>\n  <Grid.ColumnDefinitions>\n  <ColumnDefinition />\n  <ColumnDefinition />\n  <ColumnDefinition />\n  </Grid.ColumnDefinitions>\n  <Button Grid.Row=\"0\" Grid.Column=\"0\">Top Left</Button>\n  <Button Grid.Row=\"0\" Grid.Column=\"1\">Middle Left</Button>\n  <Button Grid.Row=\"1\" Grid.Column=\"2\">Bottom Right</Button>\n  <Button Grid.Row=\"1\" Grid.Column=\"1\">Bottom Middle</Button>\n</Grid>\n```\n>绝对设置尺寸\n```xml\n <ColumnDefinition Width=\"50\"></ColumnDefinition>\n```\n>自动设置尺寸\n```xml\n <ColumnDefinition Width=\"Auto\"></ColumnDefinition>\n```\n>按比例设置尺寸\n```xml\n <ColumnDefinition Width=\"*\"></ColumnDefinition>\n <ColumnDefinition Width=\"2*\"></ColumnDefinition>\n```\n>分割窗口\n<details>\n<summary>点开查看</summary>\n```xml\n<Grid>\n  <Grid.RowDefinitions>\n  <RowDefinition></RowDefinition>\n  <RowDefinition></RowDefinition>\n  </Grid.RowDefinitions>\n  <Grid.ColumnDefinitions>\n  <ColumnDefinition MinWidth=\"100\"></ColumnDefinition>\n  <ColumnDefinition Width=\"Auto\"></ColumnDefinition>\n  <ColumnDefinition MinWidth=\"50\"></ColumnDefinition>\n  </Grid.ColumnDefinitions>\n  <Button Grid.Row=\"0\" Grid.Column=\"0\" Margin=\"3\">Left</Button>\n  <Button Grid.Row=\"0\" Grid.Column=\"2\" Margin=\"3\">Right</Button>\n  <Button Grid.Row=\"1\" Grid.Column=\"0\" Margin=\"3\">Left</Button>\n  <Button Grid.Row=\"1\" Grid.Column=\"2\" Margin=\"3\">Right</Button>\n  <GridSplitter Grid.Row=\"0\" Grid.Column=\"1\" Grid.RowSpan=\"2\"                \n                  Width=\"3\" VerticalAlignment=\"Stretch\" HorizontalAlignment=\"Center\"\n                  ShowsPreview=\"False\"></GridSplitter>\n\n</Grid>\n```\n</details>\n\n\n>共享尺寸组\n<details>\n<summary>点开查看</summary>\n```xml\n<Grid Margin=\"3\" Grid.IsSharedSizeScope=\"True\">\n<Grid.RowDefinitions>\n    <RowDefinition />\n    <RowDefinition Height=\"Auto\" />\n    <RowDefinition />\n</Grid.RowDefinitions>\n<Grid\n    Grid.Row=\"0\"\n    Margin=\"3\"\n    Background=\"LightYellow\"\n    ShowGridLines=\"True\">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"TextLabel\" />\n        <ColumnDefinition Width=\"Auto\" />\n        <ColumnDefinition />\n    </Grid.ColumnDefinitions>\n    <Label Margin=\"5\">A very long bit of text</Label>\n    <!-- <GridSplitter Grid.Column=\"1\" VerticalAlignment=\"Stretch\" HorizontalAlignment=\"Center\" Width=\"10\"></GridSplitter> -->\n    <Label Grid.Column=\"1\" Margin=\"5\">More text</Label>\n    <TextBox Grid.Column=\"2\" Margin=\"5\">A text box</TextBox>\n</Grid>\n<Label Grid.Row=\"1\">Some text in between the two grids...</Label>\n<Grid\n    Grid.Row=\"2\"\n    Margin=\"3\"\n    Background=\"LightYellow\"\n    ShowGridLines=\"True\">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"TextLabel\" />\n        <ColumnDefinition />\n    </Grid.ColumnDefinitions>\n    <Label Margin=\"5\">Short</Label>\n    <TextBox Grid.Column=\"1\" Margin=\"5\">A text box</TextBox>\n</Grid>\n</Grid>\n```\n</details>\n\n\n>布局舍入\n>避免元素边框发生锯齿现象\n```xml\nUseLayoutRounding=\"True\"\n```\n## <span style=\"color:#0366d6;\">UniformGrid</span>\n>不需要预先定义行和列，只需要简单的通过Rows和Columns来确定行数和列数\n```xml\n<UniformGrid Rows=\"2\" Columns=\"2\">\n      <Button>Top Left</Button>\n      <Button>Top Right</Button>\n      <Button>Bottom Left</Button>\n      <Button>Bottom Right</Button>\n</UniformGrid>\n```\n## <span style=\"color:#0366d6;\">Canvas</span>\n>可以使用数值进行绝对定位（单位设备无关单位），可以使用Canvas.Left,Canvas.Bottom,Canvas.Right,Canvas.Top设置数值来定义位置\n\n```xml\n <Canvas>\n      <Button Canvas.Left=\"10\" Canvas.Top=\"10\">(10,10)</Button>\n      <Button Canvas.Left=\"120\" Canvas.Top=\"30\">(120,30)</Button>\n      <Button Canvas.Left=\"60\" Canvas.Top=\"80\" Width=\"50\" Height=\"50\">(60,80)</Button>\n      <Button Canvas.Left=\"70\" Canvas.Top=\"120\" Width=\"100\" Height=\"50\">(70,120)</Button>\n </Canvas>\n```\n## <span style=\"color:#0366d6;\">InkCanvas</span>\n>InkCanvas和Canvas类似，可以使用Canvas.Left,Canvas.Bottom,Canvas.Right,Canvas.Top设置数值来定义位置\n但是InkCanvas不是派生自Canvas，甚至Panel，直接派生自FrameworkElement,主要用来接收手写设备还有鼠标的绘制\nNone = 0,Ink = 1,GestureOnly = 2,InkAndGesture = 3,Select = 4,EraseByPoint = 5,EraseByStroke = 6\n```xml\n<Grid>\n      <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\"></RowDefinition>\n        <RowDefinition></RowDefinition>\n      </Grid.RowDefinitions>\n      <StackPanel Margin=\"5\" Orientation=\"Horizontal\">\n        <TextBlock Margin=\"5\">EditingMode: </TextBlock>\n        <ComboBox Name=\"lstEditingMode\"  VerticalAlignment=\"Center\">          \n        </ComboBox>\n      </StackPanel>      \n      <InkCanvas Name=\"inkCanvas\" Grid.Row=\"1\" Background=\"LightYellow\" EditingMode=\"{Binding ElementName=lstEditingMode,Path=SelectedItem}\">\n        <Button InkCanvas.Top=\"10\" InkCanvas.Left=\"10\">Hello</Button>       \n      </InkCanvas>\n</Grid>\n```","source":"_posts/WPF-3.md","raw":"---\ntitle: WPF 布局 基础篇\ndate: 2020-07-19\ntags: [WPF]\ncategories: WPF\n---\n<!-- more -->\n参考:WPF 编程宝典\n# <span style=\"color:#0366d6;\">布局元素</span>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">名称</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">StackPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">在水平或者垂直的栈中堆放元素</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">WrapPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">按从左到右的顺序位置定位子元素，在包含框的边缘处将内容切换到下一行。 后续排序按照从上至下或从右至左的顺序进行，具体取决于 Orientation 属性的值。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">DockPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">用来定位子内容的布局容器的边缘</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">Grid</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">定义由列和行组成的灵活的网格区域</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">UniformGrid</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">提供一种在网格(网格中的所有单元格都具有相同的大小)中排列内容的方法</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">Canvas</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">定义一个区域，可在其中使用相对于 Canvas 区域的坐标以显式方式来定位子元素</td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">StackPanel</span>\n>该面板简单的在单行或者单列以堆栈形式放置其子元素，通过 Orientation=\"Horizontal\"或者\"Vertical\"\n```xml\n<StackPanel Margin=\"3\" Name=\"stackPanel1\" >\n    <Label Margin=\"3\" HorizontalAlignment=\"Center\">\n      A Button Stack\n    </Label>\n    <Button Margin=\"3\" MaxWidth=\"200\" MinWidth=\"100\">Button 1</Button>\n    <Button Margin=\"3\" MaxWidth=\"200\" MinWidth=\"100\">Button 2</Button>\n    <Button Margin=\"3\" MaxWidth=\"200\" MinWidth=\"100\">Button 3</Button>\n    <Button Margin=\"3\" MaxWidth=\"200\" MinWidth=\"100\">Button 4</Button>\n    <CheckBox Name=\"chkVertical\" Margin=\"10\" HorizontalAlignment=\"Center\"\n     Checked=\"chkVertical_Checked\" Unchecked=\"chkVertical_Unchecked\">\n      Use Vertical Orientation</CheckBox>            \n</StackPanel>\n```\n## <span style=\"color:#0366d6;\">WrapPanel</span>\n>该面板在可能的空间里面，以一次一行或者一列的方式布置控件。默认情况下Orientation=\"Horizontal\"\n```xml\n<WrapPanel Margin=\"3\">\n    <Button VerticalAlignment=\"Top\">Top Button</Button>\n    <Button MinHeight=\"60\">Tall Button 2</Button>\n    <Button VerticalAlignment=\"Bottom\">Bottom Button</Button>\n    <Button>Stretch Button</Button>\n    <Button VerticalAlignment=\"Center\">Centered Button</Button>   \n</WrapPanel>\n```\n## <span style=\"color:#0366d6;\">DockPanel</span>\n>DockPanel面吧是更有趣的布局选项。它沿着一条外边缘来拉伸所包含的控件。理解该面板最简便的方式是，考虑一下位于许多Windows应用程序窗口顶部的工具栏，>这些工具栏停靠到窗口顶部。与StackPanel面板类似，被停靠的元素选择它们的布局的一方面。例如，如果将一个按钮停靠在DockPanel面板顶部，该按钮被拉伸至>DockPanel面板的整个宽度，但根据内容和MinHeight属性为其设置所需的高度。而如果将一个按钮停靠到容器左边，该按钮的高度将被拉伸以适应容器的高度，而其>宽度可以根据需要自由添加。\n```xml\n<DockPanel LastChildFill=\"True\">\n      <Button DockPanel.Dock=\"Top\">A Stretched Top Button</Button>\n      <Button DockPanel.Dock=\"Top\" HorizontalAlignment=\"Center\">A Centered Top Button</Button>\n      <Button DockPanel.Dock=\"Top\" HorizontalAlignment=\"Left\">A Left-Aligned Top Button</Button>\n      <Button DockPanel.Dock=\"Bottom\">Bottom Button</Button>\n      <Button DockPanel.Dock=\"Left\">Left Button</Button>\n      <Button DockPanel.Dock=\"Right\">Right Button</Button>\n      <Button >Remaining Space</Button>\n</DockPanel>\n```\n## <span style=\"color:#0366d6;\">Grid</span>\n>Grid面板将元素分割到不可见的单元格中\n```xml\n<Grid ShowGridLines=\"True\">\n  <Grid.RowDefinitions>\n  <RowDefinition />\n  <RowDefinition />\n  </Grid.RowDefinitions>\n  <Grid.ColumnDefinitions>\n  <ColumnDefinition />\n  <ColumnDefinition />\n  <ColumnDefinition />\n  </Grid.ColumnDefinitions>\n  <Button Grid.Row=\"0\" Grid.Column=\"0\">Top Left</Button>\n  <Button Grid.Row=\"0\" Grid.Column=\"1\">Middle Left</Button>\n  <Button Grid.Row=\"1\" Grid.Column=\"2\">Bottom Right</Button>\n  <Button Grid.Row=\"1\" Grid.Column=\"1\">Bottom Middle</Button>\n</Grid>\n```\n>绝对设置尺寸\n```xml\n <ColumnDefinition Width=\"50\"></ColumnDefinition>\n```\n>自动设置尺寸\n```xml\n <ColumnDefinition Width=\"Auto\"></ColumnDefinition>\n```\n>按比例设置尺寸\n```xml\n <ColumnDefinition Width=\"*\"></ColumnDefinition>\n <ColumnDefinition Width=\"2*\"></ColumnDefinition>\n```\n>分割窗口\n<details>\n<summary>点开查看</summary>\n```xml\n<Grid>\n  <Grid.RowDefinitions>\n  <RowDefinition></RowDefinition>\n  <RowDefinition></RowDefinition>\n  </Grid.RowDefinitions>\n  <Grid.ColumnDefinitions>\n  <ColumnDefinition MinWidth=\"100\"></ColumnDefinition>\n  <ColumnDefinition Width=\"Auto\"></ColumnDefinition>\n  <ColumnDefinition MinWidth=\"50\"></ColumnDefinition>\n  </Grid.ColumnDefinitions>\n  <Button Grid.Row=\"0\" Grid.Column=\"0\" Margin=\"3\">Left</Button>\n  <Button Grid.Row=\"0\" Grid.Column=\"2\" Margin=\"3\">Right</Button>\n  <Button Grid.Row=\"1\" Grid.Column=\"0\" Margin=\"3\">Left</Button>\n  <Button Grid.Row=\"1\" Grid.Column=\"2\" Margin=\"3\">Right</Button>\n  <GridSplitter Grid.Row=\"0\" Grid.Column=\"1\" Grid.RowSpan=\"2\"                \n                  Width=\"3\" VerticalAlignment=\"Stretch\" HorizontalAlignment=\"Center\"\n                  ShowsPreview=\"False\"></GridSplitter>\n\n</Grid>\n```\n</details>\n\n\n>共享尺寸组\n<details>\n<summary>点开查看</summary>\n```xml\n<Grid Margin=\"3\" Grid.IsSharedSizeScope=\"True\">\n<Grid.RowDefinitions>\n    <RowDefinition />\n    <RowDefinition Height=\"Auto\" />\n    <RowDefinition />\n</Grid.RowDefinitions>\n<Grid\n    Grid.Row=\"0\"\n    Margin=\"3\"\n    Background=\"LightYellow\"\n    ShowGridLines=\"True\">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"TextLabel\" />\n        <ColumnDefinition Width=\"Auto\" />\n        <ColumnDefinition />\n    </Grid.ColumnDefinitions>\n    <Label Margin=\"5\">A very long bit of text</Label>\n    <!-- <GridSplitter Grid.Column=\"1\" VerticalAlignment=\"Stretch\" HorizontalAlignment=\"Center\" Width=\"10\"></GridSplitter> -->\n    <Label Grid.Column=\"1\" Margin=\"5\">More text</Label>\n    <TextBox Grid.Column=\"2\" Margin=\"5\">A text box</TextBox>\n</Grid>\n<Label Grid.Row=\"1\">Some text in between the two grids...</Label>\n<Grid\n    Grid.Row=\"2\"\n    Margin=\"3\"\n    Background=\"LightYellow\"\n    ShowGridLines=\"True\">\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"TextLabel\" />\n        <ColumnDefinition />\n    </Grid.ColumnDefinitions>\n    <Label Margin=\"5\">Short</Label>\n    <TextBox Grid.Column=\"1\" Margin=\"5\">A text box</TextBox>\n</Grid>\n</Grid>\n```\n</details>\n\n\n>布局舍入\n>避免元素边框发生锯齿现象\n```xml\nUseLayoutRounding=\"True\"\n```\n## <span style=\"color:#0366d6;\">UniformGrid</span>\n>不需要预先定义行和列，只需要简单的通过Rows和Columns来确定行数和列数\n```xml\n<UniformGrid Rows=\"2\" Columns=\"2\">\n      <Button>Top Left</Button>\n      <Button>Top Right</Button>\n      <Button>Bottom Left</Button>\n      <Button>Bottom Right</Button>\n</UniformGrid>\n```\n## <span style=\"color:#0366d6;\">Canvas</span>\n>可以使用数值进行绝对定位（单位设备无关单位），可以使用Canvas.Left,Canvas.Bottom,Canvas.Right,Canvas.Top设置数值来定义位置\n\n```xml\n <Canvas>\n      <Button Canvas.Left=\"10\" Canvas.Top=\"10\">(10,10)</Button>\n      <Button Canvas.Left=\"120\" Canvas.Top=\"30\">(120,30)</Button>\n      <Button Canvas.Left=\"60\" Canvas.Top=\"80\" Width=\"50\" Height=\"50\">(60,80)</Button>\n      <Button Canvas.Left=\"70\" Canvas.Top=\"120\" Width=\"100\" Height=\"50\">(70,120)</Button>\n </Canvas>\n```\n## <span style=\"color:#0366d6;\">InkCanvas</span>\n>InkCanvas和Canvas类似，可以使用Canvas.Left,Canvas.Bottom,Canvas.Right,Canvas.Top设置数值来定义位置\n但是InkCanvas不是派生自Canvas，甚至Panel，直接派生自FrameworkElement,主要用来接收手写设备还有鼠标的绘制\nNone = 0,Ink = 1,GestureOnly = 2,InkAndGesture = 3,Select = 4,EraseByPoint = 5,EraseByStroke = 6\n```xml\n<Grid>\n      <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\"></RowDefinition>\n        <RowDefinition></RowDefinition>\n      </Grid.RowDefinitions>\n      <StackPanel Margin=\"5\" Orientation=\"Horizontal\">\n        <TextBlock Margin=\"5\">EditingMode: </TextBlock>\n        <ComboBox Name=\"lstEditingMode\"  VerticalAlignment=\"Center\">          \n        </ComboBox>\n      </StackPanel>      \n      <InkCanvas Name=\"inkCanvas\" Grid.Row=\"1\" Background=\"LightYellow\" EditingMode=\"{Binding ElementName=lstEditingMode,Path=SelectedItem}\">\n        <Button InkCanvas.Top=\"10\" InkCanvas.Left=\"10\">Hello</Button>       \n      </InkCanvas>\n</Grid>\n```","slug":"WPF-3","published":1,"updated":"2022-08-17T06:55:45.661Z","_id":"ckct0lxc60000qstxej7odmt6","comments":1,"layout":"post","photos":[],"link":"","content":"<a id=\"more\"></a>\n<p>参考:WPF 编程宝典</p>\n<h1 id=\"布局元素\"><a href=\"#布局元素\" class=\"headerlink\" title=\"布局元素\"></a><span style=\"color:#0366d6;\">布局元素</span></h1><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">名称</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">StackPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">在水平或者垂直的栈中堆放元素</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">WrapPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">按从左到右的顺序位置定位子元素，在包含框的边缘处将内容切换到下一行。 后续排序按照从上至下或从右至左的顺序进行，具体取决于 Orientation 属性的值。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">DockPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">用来定位子内容的布局容器的边缘</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">Grid</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">定义由列和行组成的灵活的网格区域</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">UniformGrid</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">提供一种在网格(网格中的所有单元格都具有相同的大小)中排列内容的方法</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">Canvas</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">定义一个区域，可在其中使用相对于 Canvas 区域的坐标以显式方式来定位子元素</td>\n</tr>\n</table>\n\n<h2 id=\"StackPanel\"><a href=\"#StackPanel\" class=\"headerlink\" title=\"StackPanel\"></a><span style=\"color:#0366d6;\">StackPanel</span></h2><blockquote>\n<p>该面板简单的在单行或者单列以堆栈形式放置其子元素，通过 Orientation=”Horizontal”或者”Vertical”</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">Name</span>=<span class=\"string\">\"stackPanel1\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span>&gt;</span></span><br><span class=\"line\">      A Button Stack</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">MaxWidth</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"100\"</span>&gt;</span>Button 1<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">MaxWidth</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"100\"</span>&gt;</span>Button 2<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">MaxWidth</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"100\"</span>&gt;</span>Button 3<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">MaxWidth</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"100\"</span>&gt;</span>Button 4<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">CheckBox</span> <span class=\"attr\">Name</span>=<span class=\"string\">\"chkVertical\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">Checked</span>=<span class=\"string\">\"chkVertical_Checked\"</span> <span class=\"attr\">Unchecked</span>=<span class=\"string\">\"chkVertical_Unchecked\"</span>&gt;</span></span><br><span class=\"line\">      Use Vertical Orientation<span class=\"tag\">&lt;/<span class=\"name\">CheckBox</span>&gt;</span>            </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"WrapPanel\"><a href=\"#WrapPanel\" class=\"headerlink\" title=\"WrapPanel\"></a><span style=\"color:#0366d6;\">WrapPanel</span></h2><blockquote>\n<p>该面板在可能的空间里面，以一次一行或者一列的方式布置控件。默认情况下Orientation=”Horizontal”</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">WrapPanel</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Top\"</span>&gt;</span>Top Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">MinHeight</span>=<span class=\"string\">\"60\"</span>&gt;</span>Tall Button 2<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Bottom\"</span>&gt;</span>Bottom Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Stretch Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span>&gt;</span>Centered Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">WrapPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"DockPanel\"><a href=\"#DockPanel\" class=\"headerlink\" title=\"DockPanel\"></a><span style=\"color:#0366d6;\">DockPanel</span></h2><blockquote>\n<p>DockPanel面吧是更有趣的布局选项。它沿着一条外边缘来拉伸所包含的控件。理解该面板最简便的方式是，考虑一下位于许多Windows应用程序窗口顶部的工具栏，&gt;这些工具栏停靠到窗口顶部。与StackPanel面板类似，被停靠的元素选择它们的布局的一方面。例如，如果将一个按钮停靠在DockPanel面板顶部，该按钮被拉伸至&gt;DockPanel面板的整个宽度，但根据内容和MinHeight属性为其设置所需的高度。而如果将一个按钮停靠到容器左边，该按钮的高度将被拉伸以适应容器的高度，而其&gt;宽度可以根据需要自由添加。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">DockPanel</span> <span class=\"attr\">LastChildFill</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Top\"</span>&gt;</span>A Stretched Top Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Top\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span>&gt;</span>A Centered Top Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Top\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Left\"</span>&gt;</span>A Left-Aligned Top Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Bottom\"</span>&gt;</span>Bottom Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Left\"</span>&gt;</span>Left Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Right\"</span>&gt;</span>Right Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> &gt;</span>Remaining Space<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">DockPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Grid\"><a href=\"#Grid\" class=\"headerlink\" title=\"Grid\"></a><span style=\"color:#0366d6;\">Grid</span></h2><blockquote>\n<p>Grid面板将元素分割到不可见的单元格中</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span> <span class=\"attr\">ShowGridLines</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span>&gt;</span>Top Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span>&gt;</span>Middle Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span>&gt;</span>Bottom Right<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span>&gt;</span>Bottom Middle<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>绝对设置尺寸</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"50\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>自动设置尺寸</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"Auto\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>按比例设置尺寸</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"*\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"2*\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>分割窗口</p>\n</blockquote>\n<details>\n<summary>点开查看</summary>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RowDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RowDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"100\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"Auto\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"50\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span>&gt;</span>Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span>&gt;</span>Right<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span>&gt;</span>Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span>&gt;</span>Right<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">GridSplitter</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Grid.RowSpan</span>=<span class=\"string\">\"2\"</span>                </span></span><br><span class=\"line\"><span class=\"tag\">                  <span class=\"attr\">Width</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Stretch\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                  <span class=\"attr\">ShowsPreview</span>=<span class=\"string\">\"False\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">GridSplitter</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</details>\n\n\n<blockquote>\n<p>共享尺寸组</p>\n</blockquote>\n<details>\n<summary>点开查看</summary>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">Grid.IsSharedSizeScope</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"Auto\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Background</span>=<span class=\"string\">\"LightYellow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">ShowGridLines</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"Auto\"</span> <span class=\"attr\">SharedSizeGroup</span>=<span class=\"string\">\"TextLabel\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"Auto\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>A very long bit of text<span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;GridSplitter Grid.Column=\"1\" VerticalAlignment=\"Stretch\" HorizontalAlignment=\"Center\" Width=\"10\"&gt;&lt;/GridSplitter&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>More text<span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextBox</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>A text box<span class=\"tag\">&lt;/<span class=\"name\">TextBox</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span>&gt;</span>Some text in between the two grids...<span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Background</span>=<span class=\"string\">\"LightYellow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">ShowGridLines</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"Auto\"</span> <span class=\"attr\">SharedSizeGroup</span>=<span class=\"string\">\"TextLabel\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>Short<span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextBox</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>A text box<span class=\"tag\">&lt;/<span class=\"name\">TextBox</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</details>\n\n\n<blockquote>\n<p>布局舍入<br>避免元素边框发生锯齿现象</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UseLayoutRounding=\"True\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"UniformGrid\"><a href=\"#UniformGrid\" class=\"headerlink\" title=\"UniformGrid\"></a><span style=\"color:#0366d6;\">UniformGrid</span></h2><blockquote>\n<p>不需要预先定义行和列，只需要简单的通过Rows和Columns来确定行数和列数</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">UniformGrid</span> <span class=\"attr\">Rows</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">Columns</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Top Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Top Right<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Bottom Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Bottom Right<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">UniformGrid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a><span style=\"color:#0366d6;\">Canvas</span></h2><blockquote>\n<p>可以使用数值进行绝对定位（单位设备无关单位），可以使用Canvas.Left,Canvas.Bottom,Canvas.Right,Canvas.Top设置数值来定义位置</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Canvas</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Canvas.Left</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">Canvas.Top</span>=<span class=\"string\">\"10\"</span>&gt;</span>(10,10)<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Canvas.Left</span>=<span class=\"string\">\"120\"</span> <span class=\"attr\">Canvas.Top</span>=<span class=\"string\">\"30\"</span>&gt;</span>(120,30)<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Canvas.Left</span>=<span class=\"string\">\"60\"</span> <span class=\"attr\">Canvas.Top</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"50\"</span>&gt;</span>(60,80)<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Canvas.Left</span>=<span class=\"string\">\"70\"</span> <span class=\"attr\">Canvas.Top</span>=<span class=\"string\">\"120\"</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"50\"</span>&gt;</span>(70,120)<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"InkCanvas\"><a href=\"#InkCanvas\" class=\"headerlink\" title=\"InkCanvas\"></a><span style=\"color:#0366d6;\">InkCanvas</span></h2><blockquote>\n<p>InkCanvas和Canvas类似，可以使用Canvas.Left,Canvas.Bottom,Canvas.Right,Canvas.Top设置数值来定义位置<br>但是InkCanvas不是派生自Canvas，甚至Panel，直接派生自FrameworkElement,主要用来接收手写设备还有鼠标的绘制<br>None = 0,Ink = 1,GestureOnly = 2,InkAndGesture = 3,Select = 4,EraseByPoint = 5,EraseByStroke = 6</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"Auto\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RowDefinition</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RowDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextBlock</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>EditingMode: <span class=\"tag\">&lt;/<span class=\"name\">TextBlock</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ComboBox</span> <span class=\"attr\">Name</span>=<span class=\"string\">\"lstEditingMode\"</span>  <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span>&gt;</span>          </span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ComboBox</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span>      </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">InkCanvas</span> <span class=\"attr\">Name</span>=<span class=\"string\">\"inkCanvas\"</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Background</span>=<span class=\"string\">\"LightYellow\"</span> <span class=\"attr\">EditingMode</span>=<span class=\"string\">\"&#123;Binding ElementName=lstEditingMode,Path=SelectedItem&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">InkCanvas.Top</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">InkCanvas.Left</span>=<span class=\"string\">\"10\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span>       </span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">InkCanvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>参考:WPF 编程宝典</p>\n<h1 id=\"布局元素\"><a href=\"#布局元素\" class=\"headerlink\" title=\"布局元素\"></a><span style=\"color:#0366d6;\">布局元素</span></h1><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">名称</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">StackPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">在水平或者垂直的栈中堆放元素</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">WrapPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">按从左到右的顺序位置定位子元素，在包含框的边缘处将内容切换到下一行。 后续排序按照从上至下或从右至左的顺序进行，具体取决于 Orientation 属性的值。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">DockPanel</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">用来定位子内容的布局容器的边缘</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">Grid</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">定义由列和行组成的灵活的网格区域</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">UniformGrid</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">提供一种在网格(网格中的所有单元格都具有相同的大小)中排列内容的方法</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;color:#0065b3;border-right:0px;\">Canvas</td>\n<td style=\"width:85%;border-left:0px;color:black;border-right:0px;\">定义一个区域，可在其中使用相对于 Canvas 区域的坐标以显式方式来定位子元素</td>\n</tr>\n</table>\n\n<h2 id=\"StackPanel\"><a href=\"#StackPanel\" class=\"headerlink\" title=\"StackPanel\"></a><span style=\"color:#0366d6;\">StackPanel</span></h2><blockquote>\n<p>该面板简单的在单行或者单列以堆栈形式放置其子元素，通过 Orientation=”Horizontal”或者”Vertical”</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">Name</span>=<span class=\"string\">\"stackPanel1\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span>&gt;</span></span><br><span class=\"line\">      A Button Stack</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">MaxWidth</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"100\"</span>&gt;</span>Button 1<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">MaxWidth</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"100\"</span>&gt;</span>Button 2<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">MaxWidth</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"100\"</span>&gt;</span>Button 3<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">MaxWidth</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"100\"</span>&gt;</span>Button 4<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">CheckBox</span> <span class=\"attr\">Name</span>=<span class=\"string\">\"chkVertical\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">     <span class=\"attr\">Checked</span>=<span class=\"string\">\"chkVertical_Checked\"</span> <span class=\"attr\">Unchecked</span>=<span class=\"string\">\"chkVertical_Unchecked\"</span>&gt;</span></span><br><span class=\"line\">      Use Vertical Orientation<span class=\"tag\">&lt;/<span class=\"name\">CheckBox</span>&gt;</span>            </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"WrapPanel\"><a href=\"#WrapPanel\" class=\"headerlink\" title=\"WrapPanel\"></a><span style=\"color:#0366d6;\">WrapPanel</span></h2><blockquote>\n<p>该面板在可能的空间里面，以一次一行或者一列的方式布置控件。默认情况下Orientation=”Horizontal”</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">WrapPanel</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Top\"</span>&gt;</span>Top Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">MinHeight</span>=<span class=\"string\">\"60\"</span>&gt;</span>Tall Button 2<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Bottom\"</span>&gt;</span>Bottom Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Stretch Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span>&gt;</span>Centered Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">WrapPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"DockPanel\"><a href=\"#DockPanel\" class=\"headerlink\" title=\"DockPanel\"></a><span style=\"color:#0366d6;\">DockPanel</span></h2><blockquote>\n<p>DockPanel面吧是更有趣的布局选项。它沿着一条外边缘来拉伸所包含的控件。理解该面板最简便的方式是，考虑一下位于许多Windows应用程序窗口顶部的工具栏，&gt;这些工具栏停靠到窗口顶部。与StackPanel面板类似，被停靠的元素选择它们的布局的一方面。例如，如果将一个按钮停靠在DockPanel面板顶部，该按钮被拉伸至&gt;DockPanel面板的整个宽度，但根据内容和MinHeight属性为其设置所需的高度。而如果将一个按钮停靠到容器左边，该按钮的高度将被拉伸以适应容器的高度，而其&gt;宽度可以根据需要自由添加。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">DockPanel</span> <span class=\"attr\">LastChildFill</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Top\"</span>&gt;</span>A Stretched Top Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Top\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span>&gt;</span>A Centered Top Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Top\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Left\"</span>&gt;</span>A Left-Aligned Top Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Bottom\"</span>&gt;</span>Bottom Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Left\"</span>&gt;</span>Left Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">DockPanel.Dock</span>=<span class=\"string\">\"Right\"</span>&gt;</span>Right Button<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span> &gt;</span>Remaining Space<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">DockPanel</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Grid\"><a href=\"#Grid\" class=\"headerlink\" title=\"Grid\"></a><span style=\"color:#0366d6;\">Grid</span></h2><blockquote>\n<p>Grid面板将元素分割到不可见的单元格中</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span> <span class=\"attr\">ShowGridLines</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span>&gt;</span>Top Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span>&gt;</span>Middle Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span>&gt;</span>Bottom Right<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span>&gt;</span>Bottom Middle<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>绝对设置尺寸</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"50\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>自动设置尺寸</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"Auto\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>按比例设置尺寸</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"*\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"2*\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>分割窗口</p>\n</blockquote>\n<details>\n<summary>点开查看</summary>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RowDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RowDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"100\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"Auto\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">MinWidth</span>=<span class=\"string\">\"50\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ColumnDefinition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span>&gt;</span>Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span>&gt;</span>Right<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span>&gt;</span>Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span>&gt;</span>Right<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">GridSplitter</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Grid.RowSpan</span>=<span class=\"string\">\"2\"</span>                </span></span><br><span class=\"line\"><span class=\"tag\">                  <span class=\"attr\">Width</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Stretch\"</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">                  <span class=\"attr\">ShowsPreview</span>=<span class=\"string\">\"False\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">GridSplitter</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</details>\n\n\n<blockquote>\n<p>共享尺寸组</p>\n</blockquote>\n<details>\n<summary>点开查看</summary>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">Grid.IsSharedSizeScope</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"Auto\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Background</span>=<span class=\"string\">\"LightYellow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">ShowGridLines</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"Auto\"</span> <span class=\"attr\">SharedSizeGroup</span>=<span class=\"string\">\"TextLabel\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"Auto\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>A very long bit of text<span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;GridSplitter Grid.Column=\"1\" VerticalAlignment=\"Stretch\" HorizontalAlignment=\"Center\" Width=\"10\"&gt;&lt;/GridSplitter&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>More text<span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextBox</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>A text box<span class=\"tag\">&lt;/<span class=\"name\">TextBox</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span>&gt;</span>Some text in between the two grids...<span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Margin</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">Background</span>=<span class=\"string\">\"LightYellow\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">ShowGridLines</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"Auto\"</span> <span class=\"attr\">SharedSizeGroup</span>=<span class=\"string\">\"TextLabel\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>Short<span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextBox</span> <span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>A text box<span class=\"tag\">&lt;/<span class=\"name\">TextBox</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</details>\n\n\n<blockquote>\n<p>布局舍入<br>避免元素边框发生锯齿现象</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UseLayoutRounding=\"True\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"UniformGrid\"><a href=\"#UniformGrid\" class=\"headerlink\" title=\"UniformGrid\"></a><span style=\"color:#0366d6;\">UniformGrid</span></h2><blockquote>\n<p>不需要预先定义行和列，只需要简单的通过Rows和Columns来确定行数和列数</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">UniformGrid</span> <span class=\"attr\">Rows</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">Columns</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Top Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Top Right<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Bottom Left<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span>&gt;</span>Bottom Right<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">UniformGrid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a><span style=\"color:#0366d6;\">Canvas</span></h2><blockquote>\n<p>可以使用数值进行绝对定位（单位设备无关单位），可以使用Canvas.Left,Canvas.Bottom,Canvas.Right,Canvas.Top设置数值来定义位置</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Canvas</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Canvas.Left</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">Canvas.Top</span>=<span class=\"string\">\"10\"</span>&gt;</span>(10,10)<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Canvas.Left</span>=<span class=\"string\">\"120\"</span> <span class=\"attr\">Canvas.Top</span>=<span class=\"string\">\"30\"</span>&gt;</span>(120,30)<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Canvas.Left</span>=<span class=\"string\">\"60\"</span> <span class=\"attr\">Canvas.Top</span>=<span class=\"string\">\"80\"</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"50\"</span>&gt;</span>(60,80)<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">Canvas.Left</span>=<span class=\"string\">\"70\"</span> <span class=\"attr\">Canvas.Top</span>=<span class=\"string\">\"120\"</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"50\"</span>&gt;</span>(70,120)<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"InkCanvas\"><a href=\"#InkCanvas\" class=\"headerlink\" title=\"InkCanvas\"></a><span style=\"color:#0366d6;\">InkCanvas</span></h2><blockquote>\n<p>InkCanvas和Canvas类似，可以使用Canvas.Left,Canvas.Bottom,Canvas.Right,Canvas.Top设置数值来定义位置<br>但是InkCanvas不是派生自Canvas，甚至Panel，直接派生自FrameworkElement,主要用来接收手写设备还有鼠标的绘制<br>None = 0,Ink = 1,GestureOnly = 2,InkAndGesture = 3,Select = 4,EraseByPoint = 5,EraseByStroke = 6</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"Auto\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RowDefinition</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">RowDefinition</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextBlock</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"5\"</span>&gt;</span>EditingMode: <span class=\"tag\">&lt;/<span class=\"name\">TextBlock</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ComboBox</span> <span class=\"attr\">Name</span>=<span class=\"string\">\"lstEditingMode\"</span>  <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span>&gt;</span>          </span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ComboBox</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span>      </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">InkCanvas</span> <span class=\"attr\">Name</span>=<span class=\"string\">\"inkCanvas\"</span> <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">Background</span>=<span class=\"string\">\"LightYellow\"</span> <span class=\"attr\">EditingMode</span>=<span class=\"string\">\"&#123;Binding ElementName=lstEditingMode,Path=SelectedItem&#125;\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">InkCanvas.Top</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">InkCanvas.Left</span>=<span class=\"string\">\"10\"</span>&gt;</span>Hello<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span>       </span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">InkCanvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"WPF 布局 应用篇","date":"2020-07-24T16:00:00.000Z","_content":"<!-- more -->\n# <span style=\"color:#0366d6;\">博客园首页布局</span>\n>整个页面布局是一个五行三列的Grid,右边导航面板，可以用StackPanel,中间列表页是一个StackPanel\n右边内容，放一个StatckPanel\n\n![效果图](https://pic1.zhimg.com/v2-da2655ce59b0ac73a180240a3795c5f8_r.jpg)\n<details>\n<summary>点开查看</summary>\n```xml\n<Grid Margin=\"20\">\n<Grid.RowDefinitions>\n<RowDefinition Height=\"30\" />\n<RowDefinition Height=\"80\" />\n<RowDefinition Height=\"40\" />\n<RowDefinition Height=\"*\" />\n<RowDefinition Height=\"170\" />\n</Grid.RowDefinitions>\n<Grid.ColumnDefinitions>\n<ColumnDefinition Width=\"160\" />\n<ColumnDefinition Width=\"*\" />\n<ColumnDefinition Width=\"300\" />\n</Grid.ColumnDefinitions>\n<StackPanel\nGrid.Row=\"0\"\nGrid.Column=\"0\"\nOrientation=\"Horizontal\">\n<Label HorizontalAlignment=\"Left\" Content=\"代码改变世界\" />\n</StackPanel>\n<StackPanel\nGrid.Row=\"0\"\nGrid.Column=\"2\"\nHorizontalAlignment=\"Right\"\nOrientation=\"Horizontal\">\n<Label\n  Grid.Row=\"0\"\n  HorizontalAlignment=\"Right\"\n  Content=\"登录\" />\n<Label\n  Grid.Row=\"0\"\n  HorizontalAlignment=\"Right\"\n  Content=\"注册\" />\n</StackPanel>\n<StackPanel\nGrid.Row=\"1\"\nGrid.Column=\"0\"\nHorizontalAlignment=\"Left\"\nOrientation=\"Horizontal\">\n<Image Source=\"logo_small.gif\" Stretch=\"None\" />\n</StackPanel>\n<DockPanel\nGrid.Row=\"2\"\nGrid.ColumnSpan=\"3\"\nBackground=\"#2b6695\">\n<StackPanel HorizontalAlignment=\"Left\" Orientation=\"Horizontal\">\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      园子\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      新闻\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      博问\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      闪存\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      网摘\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      招聘\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      专题\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      知识\n  </Label>\n</StackPanel>\n</DockPanel>\n\n<StackPanel\nGrid.Row=\"3\"\nGrid.Column=\"0\"\nOrientation=\"Vertical\">\n<StackPanel Orientation=\"Vertical\">\n  <Border\n      BorderBrush=\"#2b6695\"\n      BorderThickness=\"1\"\n      CornerRadius=\"3\"\n      UseLayoutRounding=\"True\">\n      <StackPanel Orientation=\"Vertical\">\n          <Label Content=\".Net技术\" />\n          <Label Content=\"编程语言\" />\n          <Label Content=\"软件设计\" />\n          <Label Content=\"Web前端\" />\n          <Label Content=\"手机开发\" />\n          <Label Content=\"软件工程\" />\n          <Label Content=\"数据库技术\" />\n          <Label Content=\"操作系统\" />\n          <Label Content=\"其他分类\" />\n          <Label Content=\"所有随笔\" />\n          <Label Content=\"所有评论\" />\n      </StackPanel>\n  </Border>\n  <Border\n      Margin=\"0,20,0,0\"\n      BorderBrush=\"#2b6695\"\n      BorderThickness=\"1\"\n      CornerRadius=\"3\"\n      UseLayoutRounding=\"True\">\n      <StackPanel Orientation=\"Vertical\">\n          <Label Content=\"反馈或建议\" />\n          <Label Content=\"官方博客\" />\n          <Label Content=\"博客模板\" />\n          <Label Content=\"Java博客\" />\n          <Label Content=\"C++博客\" />\n          <Label Content=\"手机版\" />\n      </StackPanel>\n  </Border>\n</StackPanel>\n</StackPanel>\n<StackPanel\nGrid.Row=\"3\"\nGrid.Column=\"1\"\nMargin=\"20\"\nOrientation=\"Vertical\">\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n</StackPanel>\n<StackPanel\nGrid.Row=\"3\"\nGrid.Column=\"2\"\nOrientation=\"Vertical\">\n<StackPanel Orientation=\"Vertical\">\n  <Border\n      BorderBrush=\"#404040\"\n      BorderThickness=\"1\"\n      UseLayoutRounding=\"True\">\n      <StackPanel Orientation=\"Vertical\">\n          <Label Content=\"新闻1\" />\n          <Label Content=\"新闻2\" />\n          <Label Content=\"新闻3\" />\n          <Label Content=\"新闻4\" />\n          <Label Content=\"新闻5\" />\n          <Label Content=\"新闻6\" />\n          <Label Content=\"新闻7\" />\n          <Label Content=\"新闻8\" />\n          <Label Content=\"新闻9\" />\n          <Label Content=\"新闻10\" />\n          <Label Content=\"新闻11\" />\n      </StackPanel>\n  </Border>\n  <Border\n      Margin=\"0,20,0,0\"\n      BorderBrush=\"#404040\"\n      BorderThickness=\"1\"\n      UseLayoutRounding=\"True\">\n      <StackPanel Orientation=\"Vertical\">\n          <Label Content=\"新闻12\" />\n          <Label Content=\"新闻13\" />\n          <Label Content=\"新闻14\" />\n          <Label Content=\"新闻15\" />\n      </StackPanel>\n  </Border>\n</StackPanel>\n</StackPanel>\n</Grid>\n```\n</details>","source":"_posts/WPF-4.md","raw":"---\ntitle: WPF 布局 应用篇\ndate: 2020-07-25\ntags: [WPF]\ncategories: WPF\n---\n<!-- more -->\n# <span style=\"color:#0366d6;\">博客园首页布局</span>\n>整个页面布局是一个五行三列的Grid,右边导航面板，可以用StackPanel,中间列表页是一个StackPanel\n右边内容，放一个StatckPanel\n\n![效果图](https://pic1.zhimg.com/v2-da2655ce59b0ac73a180240a3795c5f8_r.jpg)\n<details>\n<summary>点开查看</summary>\n```xml\n<Grid Margin=\"20\">\n<Grid.RowDefinitions>\n<RowDefinition Height=\"30\" />\n<RowDefinition Height=\"80\" />\n<RowDefinition Height=\"40\" />\n<RowDefinition Height=\"*\" />\n<RowDefinition Height=\"170\" />\n</Grid.RowDefinitions>\n<Grid.ColumnDefinitions>\n<ColumnDefinition Width=\"160\" />\n<ColumnDefinition Width=\"*\" />\n<ColumnDefinition Width=\"300\" />\n</Grid.ColumnDefinitions>\n<StackPanel\nGrid.Row=\"0\"\nGrid.Column=\"0\"\nOrientation=\"Horizontal\">\n<Label HorizontalAlignment=\"Left\" Content=\"代码改变世界\" />\n</StackPanel>\n<StackPanel\nGrid.Row=\"0\"\nGrid.Column=\"2\"\nHorizontalAlignment=\"Right\"\nOrientation=\"Horizontal\">\n<Label\n  Grid.Row=\"0\"\n  HorizontalAlignment=\"Right\"\n  Content=\"登录\" />\n<Label\n  Grid.Row=\"0\"\n  HorizontalAlignment=\"Right\"\n  Content=\"注册\" />\n</StackPanel>\n<StackPanel\nGrid.Row=\"1\"\nGrid.Column=\"0\"\nHorizontalAlignment=\"Left\"\nOrientation=\"Horizontal\">\n<Image Source=\"logo_small.gif\" Stretch=\"None\" />\n</StackPanel>\n<DockPanel\nGrid.Row=\"2\"\nGrid.ColumnSpan=\"3\"\nBackground=\"#2b6695\">\n<StackPanel HorizontalAlignment=\"Left\" Orientation=\"Horizontal\">\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      园子\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      新闻\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      博问\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      闪存\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      网摘\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      招聘\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      专题\n  </Label>\n  <Label\n      Margin=\"5,0,0,0\"\n      VerticalAlignment=\"Center\"\n      Background=\"#2b6695\">\n      知识\n  </Label>\n</StackPanel>\n</DockPanel>\n\n<StackPanel\nGrid.Row=\"3\"\nGrid.Column=\"0\"\nOrientation=\"Vertical\">\n<StackPanel Orientation=\"Vertical\">\n  <Border\n      BorderBrush=\"#2b6695\"\n      BorderThickness=\"1\"\n      CornerRadius=\"3\"\n      UseLayoutRounding=\"True\">\n      <StackPanel Orientation=\"Vertical\">\n          <Label Content=\".Net技术\" />\n          <Label Content=\"编程语言\" />\n          <Label Content=\"软件设计\" />\n          <Label Content=\"Web前端\" />\n          <Label Content=\"手机开发\" />\n          <Label Content=\"软件工程\" />\n          <Label Content=\"数据库技术\" />\n          <Label Content=\"操作系统\" />\n          <Label Content=\"其他分类\" />\n          <Label Content=\"所有随笔\" />\n          <Label Content=\"所有评论\" />\n      </StackPanel>\n  </Border>\n  <Border\n      Margin=\"0,20,0,0\"\n      BorderBrush=\"#2b6695\"\n      BorderThickness=\"1\"\n      CornerRadius=\"3\"\n      UseLayoutRounding=\"True\">\n      <StackPanel Orientation=\"Vertical\">\n          <Label Content=\"反馈或建议\" />\n          <Label Content=\"官方博客\" />\n          <Label Content=\"博客模板\" />\n          <Label Content=\"Java博客\" />\n          <Label Content=\"C++博客\" />\n          <Label Content=\"手机版\" />\n      </StackPanel>\n  </Border>\n</StackPanel>\n</StackPanel>\n<StackPanel\nGrid.Row=\"3\"\nGrid.Column=\"1\"\nMargin=\"20\"\nOrientation=\"Vertical\">\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n<Border\n  Margin=\"0,10,0,0\"\n  BorderBrush=\"DarkGray\"\n  BorderThickness=\"0,0,0,1\">\n  <StackPanel Orientation=\"Vertical\">\n      <StackPanel Orientation=\"Horizontal\">\n          <StackPanel>\n              <Image Source=\"20200725165013.png\" />\n          </StackPanel>\n          <StackPanel Orientation=\"Vertical\">\n              <Label Content=\"CPU瞒着内存竟干出这种事\" />\n              <StackPanel Orientation=\"Horizontal\">\n                  <Image Source=\"20200512215055.png\" />\n                  <Label Content=\"简介...\" />\n              </StackPanel>\n              <Label Content=\"CPU轩辕之风 发布于 2020-05-15 14:22\" />\n          </StackPanel>\n      </StackPanel>\n  </StackPanel>\n</Border>\n</StackPanel>\n<StackPanel\nGrid.Row=\"3\"\nGrid.Column=\"2\"\nOrientation=\"Vertical\">\n<StackPanel Orientation=\"Vertical\">\n  <Border\n      BorderBrush=\"#404040\"\n      BorderThickness=\"1\"\n      UseLayoutRounding=\"True\">\n      <StackPanel Orientation=\"Vertical\">\n          <Label Content=\"新闻1\" />\n          <Label Content=\"新闻2\" />\n          <Label Content=\"新闻3\" />\n          <Label Content=\"新闻4\" />\n          <Label Content=\"新闻5\" />\n          <Label Content=\"新闻6\" />\n          <Label Content=\"新闻7\" />\n          <Label Content=\"新闻8\" />\n          <Label Content=\"新闻9\" />\n          <Label Content=\"新闻10\" />\n          <Label Content=\"新闻11\" />\n      </StackPanel>\n  </Border>\n  <Border\n      Margin=\"0,20,0,0\"\n      BorderBrush=\"#404040\"\n      BorderThickness=\"1\"\n      UseLayoutRounding=\"True\">\n      <StackPanel Orientation=\"Vertical\">\n          <Label Content=\"新闻12\" />\n          <Label Content=\"新闻13\" />\n          <Label Content=\"新闻14\" />\n          <Label Content=\"新闻15\" />\n      </StackPanel>\n  </Border>\n</StackPanel>\n</StackPanel>\n</Grid>\n```\n</details>","slug":"WPF-4","published":1,"updated":"2022-08-17T06:55:45.661Z","_id":"ckd1q02050000hotxcg4f6bpb","comments":1,"layout":"post","photos":[],"link":"","content":"<a id=\"more\"></a>\n<h1 id=\"博客园首页布局\"><a href=\"#博客园首页布局\" class=\"headerlink\" title=\"博客园首页布局\"></a><span style=\"color:#0366d6;\">博客园首页布局</span></h1><blockquote>\n<p>整个页面布局是一个五行三列的Grid,右边导航面板，可以用StackPanel,中间列表页是一个StackPanel<br>右边内容，放一个StatckPanel</p>\n</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-da2655ce59b0ac73a180240a3795c5f8_r.jpg\" alt=\"效果图\"></p>\n<details>\n<summary>点开查看</summary>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"20\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"30\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"80\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"40\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"170\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"160\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"300\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Left\"</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"代码改变世界\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Right\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Content</span>=<span class=\"string\">\"登录\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Content</span>=<span class=\"string\">\"注册\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Left\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"logo_small.gif\"</span> <span class=\"attr\">Stretch</span>=<span class=\"string\">\"None\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">DockPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.ColumnSpan</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Left\"</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      园子</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      新闻</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      博问</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      闪存</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      网摘</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      招聘</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      专题</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      知识</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">DockPanel</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"#2b6695\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">CornerRadius</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">UseLayoutRounding</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\".Net技术\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"编程语言\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"软件设计\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"Web前端\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"手机开发\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"软件工程\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"数据库技术\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"操作系统\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"其他分类\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"所有随笔\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"所有评论\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,20,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"#2b6695\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">CornerRadius</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">UseLayoutRounding</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"反馈或建议\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"官方博客\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"博客模板\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"Java博客\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"C++博客\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"手机版\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Margin</span>=<span class=\"string\">\"20\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"#404040\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">UseLayoutRounding</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻1\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻2\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻3\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻4\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻5\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻6\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻7\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻8\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻9\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻10\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻11\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,20,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"#404040\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">UseLayoutRounding</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻12\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻13\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻14\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻15\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</details>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"博客园首页布局\"><a href=\"#博客园首页布局\" class=\"headerlink\" title=\"博客园首页布局\"></a><span style=\"color:#0366d6;\">博客园首页布局</span></h1><blockquote>\n<p>整个页面布局是一个五行三列的Grid,右边导航面板，可以用StackPanel,中间列表页是一个StackPanel<br>右边内容，放一个StatckPanel</p>\n</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-da2655ce59b0ac73a180240a3795c5f8_r.jpg\" alt=\"效果图\"></p>\n<details>\n<summary>点开查看</summary>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span> <span class=\"attr\">Margin</span>=<span class=\"string\">\"20\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"30\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"80\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"40\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RowDefinition</span> <span class=\"attr\">Height</span>=<span class=\"string\">\"170\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid.RowDefinitions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"160\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ColumnDefinition</span> <span class=\"attr\">Width</span>=<span class=\"string\">\"300\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid.ColumnDefinitions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Left\"</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"代码改变世界\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Right\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Content</span>=<span class=\"string\">\"登录\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Content</span>=<span class=\"string\">\"注册\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Left\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"logo_small.gif\"</span> <span class=\"attr\">Stretch</span>=<span class=\"string\">\"None\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">DockPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.ColumnSpan</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">HorizontalAlignment</span>=<span class=\"string\">\"Left\"</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      园子</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      新闻</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      博问</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      闪存</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      网摘</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      招聘</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      专题</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Label</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"5,0,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">VerticalAlignment</span>=<span class=\"string\">\"Center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Background</span>=<span class=\"string\">\"#2b6695\"</span>&gt;</span></span><br><span class=\"line\">      知识</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">DockPanel</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"#2b6695\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">CornerRadius</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">UseLayoutRounding</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\".Net技术\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"编程语言\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"软件设计\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"Web前端\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"手机开发\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"软件工程\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"数据库技术\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"操作系统\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"其他分类\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"所有随笔\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"所有评论\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,20,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"#2b6695\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">CornerRadius</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">UseLayoutRounding</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"反馈或建议\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"官方博客\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"博客模板\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"Java博客\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"C++博客\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"手机版\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Margin</span>=<span class=\"string\">\"20\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,10,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"DarkGray\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"0,0,0,1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200725165013.png\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU瞒着内存竟干出这种事\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Horizontal\"</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Image</span> <span class=\"attr\">Source</span>=<span class=\"string\">\"20200512215055.png\"</span> /&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"简介...\"</span> /&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"CPU轩辕之风 发布于 2020-05-15 14:22\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Row</span>=<span class=\"string\">\"3\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Grid.Column</span>=<span class=\"string\">\"2\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"#404040\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">UseLayoutRounding</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻1\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻2\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻3\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻4\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻5\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻6\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻7\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻8\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻9\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻10\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻11\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">Border</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">Margin</span>=<span class=\"string\">\"0,20,0,0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderBrush</span>=<span class=\"string\">\"#404040\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">BorderThickness</span>=<span class=\"string\">\"1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">UseLayoutRounding</span>=<span class=\"string\">\"True\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">StackPanel</span> <span class=\"attr\">Orientation</span>=<span class=\"string\">\"Vertical\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻12\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻13\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻14\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Label</span> <span class=\"attr\">Content</span>=<span class=\"string\">\"新闻15\"</span> /&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">Border</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">StackPanel</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</details>"},{"title":"WPF 依赖属性","date":"2020-07-25T16:00:00.000Z","_content":"<!-- more -->\n参考:WPF 编程宝典\nhttps://docs.microsoft.com/zh-cn/dotnet/framework/wpf/advanced/properties-wpf\nhttps://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html\n>依赖属性的出现，主要是为了解决对象的属性带来的膨胀，因为依赖属性设计为静态，\n所有对象共用一份，减少消耗，由于其内部的设计，每个对象又可以独立设置和拥有依赖属性的值\n其原理参考引用链接中的文章\n# <span style=\"color:#0366d6;\">模拟依赖属性实现</span>\n>引用自https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html\n<details>\n<summary>点开查看</summary>\n\n```csharp\nstatic void Main(string[] args)\n{\n    DependencyObject obj = new DependencyObject();\n    SubDependencyObject subObj = new SubDependencyObject();\n    string sd = subObj.Name;\n}\n\npublic class DependencyObject\n{\n    private List<EffectiveValueEntry> _effectiveValues = new List<EffectiveValueEntry>();\n\n    public static readonly DependencyProperty NameProperty = DependencyProperty.Register(\"Name\", typeof(string), typeof(DependencyObject), \"Name\");\n\n    public object GetValue(DependencyProperty dp)\n    {\n        EffectiveValueEntry effectiveValue = _effectiveValues.FirstOrDefault((i) => i.PropertyIndex == dp.Index);\n        if (effectiveValue.PropertyIndex != 0)\n        {\n            return effectiveValue.Value;\n        }\n        else\n        {\n            PropertyMetadata metadata;\n            metadata = DependencyProperty.RegisteredDps[dp.HashCode].GetMetadata(this.GetType());\n            return metadata.Value;\n        }\n    }\n\n    public void SetValue(DependencyProperty dp, object value)\n    {\n        EffectiveValueEntry effectiveValue = _effectiveValues.FirstOrDefault((i) => i.PropertyIndex == dp.Index);\n        if (effectiveValue.PropertyIndex != 0)\n        {\n            effectiveValue.Value = value;\n        }\n        else\n        {\n            effectiveValue = new EffectiveValueEntry() { PropertyIndex = dp.Index, Value = value };\n            _effectiveValues.Add(effectiveValue);\n        }\n    }\n\n    public string Name\n    {\n        get\n        {\n            return (string)GetValue(NameProperty);\n        }\n        set\n        {\n            SetValue(NameProperty, value);\n        }\n    }\n}\n\npublic class SubDependencyObject : DependencyObject\n{\n    static SubDependencyObject()\n    {\n        NameProperty.OverrideMetadata(typeof(SubDependencyObject), new PropertyMetadata(\"SubName\"));\n    }\n}\n\npublic class DependencyProperty\n{\n    private static int globalIndex = 0;\n    internal static Dictionary<object, DependencyProperty> RegisteredDps = new Dictionary<object, DependencyProperty>();\n    internal string Name;\n    internal object Value;\n    internal int Index;\n    internal object HashCode;\n    private PropertyMetadata _defaultMetadata;\n    private List<PropertyMetadata> _metadataMap = new List<PropertyMetadata>();\n\n\n    private DependencyProperty(string name, Type propertyName, Type ownerType, object defaultValue)\n    {\n        this.Name = name;\n        this.Value = defaultValue;\n        this.HashCode = name.GetHashCode() ^ ownerType.GetHashCode();\n\n        PropertyMetadata metadata = new PropertyMetadata(defaultValue) { Type = ownerType };\n        _metadataMap.Add(metadata);\n        _defaultMetadata = metadata;\n    }\n\n    public static DependencyProperty Register(string name, Type propertyType, Type ownerType, object defaultValue)\n    {\n        DependencyProperty dp = new DependencyProperty(name, propertyType, ownerType, defaultValue);\n        globalIndex++;\n        dp.Index = globalIndex;\n        RegisteredDps.Add(dp.HashCode, dp);\n        return dp;\n    }\n\n    public void OverrideMetadata(Type forType, PropertyMetadata metadata)\n    {\n        metadata.Type = forType;\n        _metadataMap.Add(metadata);\n    }\n\n    public PropertyMetadata GetMetadata(Type type)\n    {\n        PropertyMetadata medatata = _metadataMap.FirstOrDefault((i) => i.Type == type) ??\n            _metadataMap.FirstOrDefault((i) => type.IsSubclassOf(i.Type));\n        if (medatata == null)\n        {\n            medatata = _defaultMetadata;\n        }\n        return medatata;\n    }\n}\n\ninternal struct EffectiveValueEntry\n{\n    internal int PropertyIndex { get; set; }\n\n    internal object Value { get; set; }\n}\n\npublic class PropertyMetadata\n{\n    public Type Type { get; set; }\n    public object Value { get; set; }\n\n    public PropertyMetadata(object defaultValue)\n    {\n        this.Value = defaultValue;\n    }\n}\n```\n</details>\n\n# <span style=\"color:#0366d6;\">依赖属性优先级</span>\n## <span style=\"color:#0366d6;\">优先级</span>\n>基值：3-11都称为基值，但属性系统强制的优先级最高，在CoerceValueCallback时发生\n本地值：xaml里面直接给属性赋值或者C#代码中直接赋值，```xml <Label x:Name=\"lblTest\"  Width=\"100\"/>```或者lblTest.Width=100\n当前值或者叫做有效值（EffctiveValue）：DependencyObject提供了GetValue方法来取得属性值，是最终对外的那个值\n>1. 属性系统强制\n2. 活动动画或具有 Hold 行为的动画\n3. 本地值\n4. TemplatedParent 模板属性\n5. 隐式样式\n6. 样式触发器\n7. 模板触发器\n8. 样式资源库\n9. 默认（主题）样式\n   - 主题样式中的活动触发器\n   - 主题样式中的资源库\n10. 继承\n11. 来自依赖属性元数据的默认值\n\n## <span style=\"color:#0366d6;\">使用过程</span>\n![过程](https://picb.zhimg.com/80/v2-4cc97c6644074daf299805cddf4463fb_720w.png)\n>1. 第一步，确定Base Value，对同一个属性的赋值可能发生在很多地方。比如控件的背景（Background），可能在Style或者控件的构造函数中都对它进行了赋值，这个Base Value就要确定这些值中优先级最高的值，把它作为Base Value。\n2. 第二步，估值。如果从第一步得到的值是一个表达式值（Expression），比如说一个绑定，WPF属性系统需要把它转化成一个实际值。\n3. 第三步，动画。如果当前属性正在作动画，那么因动画而产生的值会优于前面获得的值，这个也就是WPF中常说的动画优先。\n4. 第四步，强制。如果我们在FrameworkPropertyMetadata中传入了CoerceValueCallback，WPF属性系统会回调我们传入的的delagate，进行数据的强制赋值。在属性赋值过程中，Coerce拥有最高的优先级，这个优先级要大于动画的优先级别。\n5. 第五步，验证。如果在Register的时候传入了ValidateValueCallback，那么最后WPF会调用我们传入的delegate，来验证数据的有效性。当数据无效时会抛出异常来通知.\n\n# <span style=\"color:#0366d6;\">依赖项属性元数据</span>\n>依赖项属性的元数据作为一个对象存在，可以通过设置该属性，来实现依赖属性的某些功能\n1. 依赖项属性的默认值\n2. 对影响每个所有者类型的强制行（强制回调）为或更改通知行为（属性更改通知）的回调实现的引用。 请注意，这些回调通常是用非公共访问级别定义的，因此，除非实际引用位于您允许的访问范围内，否则通常无法从元数据获得这些引用\n3. 框架性元属性\n4. 将类作为现有依赖项属性的所有者来添加,AddOwner（添加共享依赖属性）。重写元数据,OverrideMetadata。\n\n\n# <span style=\"color:#0366d6;\">依赖项属性验证和强制</span>\n>验证回调：属性系统可在多种不同操作中使用回调。 这包括按默认值初始类型初始化、通过调用SetValue进行编程更改或尝试使用提供的新默认值覆盖元数据。 如果验证回调是通过其中任何一种操作调用的，并且返回 false，则会引发异常。\n```csharp\nprivate static bool IsValidReading(object value){}\n```\n>当前值的属性更改回叫用于将更改转发到其他依赖属性\n```csharp\nprivate  static void OnCurrentReadingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e){}\n```\n>强制值回叫会检查当前属性可能依赖的属性的值，并在必要时强制当前值\n```csharp\nprivate static object CoerceCurrentReading(DependencyObject d, object value){}\n```\n<details>\n<summary>点开查看</summary>\n\n```csharp\npublic class Gauge : DependencyObject\n{\npublic static readonly DependencyProperty CurrentReadingProperty = DependencyProperty.Register(\n\"CurrentReading\",\ntypeof(double),\ntypeof(Gauge),\nnew FrameworkPropertyMetadata(\ndouble.NaN,\nFrameworkPropertyMetadataOptions.AffectsMeasure,\nnew PropertyChangedCallback(PropertyChangedCallback),\nnew CoerceValueCallback(CoerceCurrentReading)),\nnew ValidateValueCallback(IsValidReading));\n\npublic Gauge(int i)\n{\nConsole.WriteLine(i);\n}\n\nprivate static void PropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)\n{\n\n}\n\npublic double CurrentReading\n{\nget { return (double)GetValue(CurrentReadingProperty); }\nset { SetValue(CurrentReadingProperty, value); }\n}\n\nprivate static bool IsValidReading(object value)\n{\nConsole.WriteLine(\"IsValidReading\");\nDouble v = (Double)value;\nreturn (!v.Equals(Double.NegativeInfinity) && !v.Equals(Double.PositiveInfinity));\n}\n\nprivate static object CoerceCurrentReading(DependencyObject d, object baseValue)\n{\nreturn 1.2;\n}\n}\n```\n</details>\n\n# <span style=\"color:#0366d6;\">附加属性</span>\n>附加属性旨在用作可在任何对象上设置的一类全局属性。在WPF中，附加属性通常定义为没有常规属性“包装”的一种特殊形式的依赖项属性。\n一个示例是 DockPanel.Dock 属性。 DockPanel.Dock 属性创建为附加属性，因为它将在 DockPanel 中包含的元素上设置，而不是在 DockPanel 本身设置\n\n>自定义附属属性\n```xml\n<Grid>\n<Canvas>\n<TextBlock Text=\"Hello World\" FontSize=\"20\" local:Bruce.Top=\"400\"></TextBlock>\n</Canvas>\n</Grid>\n```\n```csharp\npublic class Bruce:DependencyObject\n{\npublic static double GetLeft(DependencyObject obj)\n{\nreturn (double)obj.GetValue(LeftProperty);\n}\npublic static void SetLeft(DependencyObject obj,object value)\n{\nobj.SetValue(LeftProperty, value);\n}\npublic static DependencyProperty\nLeftProperty = DependencyProperty.RegisterAttached\n(\"Left\", typeof(double), typeof(Bruce), new PropertyMetadata(0.0,(obj,e)=> \n{\nvar element=obj as FrameworkElement;//目标控件\nif (element.Parent.GetType() == typeof(Canvas))\n{\nelement.Margin = new Thickness((double)e.NewValue,0,0,0);\n}\n}));\n}\n```\n\n\n\n\n\n\n","source":"_posts/WPF-5.md","raw":"---\ntitle: WPF 依赖属性\ndate: 2020-07-26\ntags: [WPF]\ncategories: WPF\n---\n<!-- more -->\n参考:WPF 编程宝典\nhttps://docs.microsoft.com/zh-cn/dotnet/framework/wpf/advanced/properties-wpf\nhttps://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html\n>依赖属性的出现，主要是为了解决对象的属性带来的膨胀，因为依赖属性设计为静态，\n所有对象共用一份，减少消耗，由于其内部的设计，每个对象又可以独立设置和拥有依赖属性的值\n其原理参考引用链接中的文章\n# <span style=\"color:#0366d6;\">模拟依赖属性实现</span>\n>引用自https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html\n<details>\n<summary>点开查看</summary>\n\n```csharp\nstatic void Main(string[] args)\n{\n    DependencyObject obj = new DependencyObject();\n    SubDependencyObject subObj = new SubDependencyObject();\n    string sd = subObj.Name;\n}\n\npublic class DependencyObject\n{\n    private List<EffectiveValueEntry> _effectiveValues = new List<EffectiveValueEntry>();\n\n    public static readonly DependencyProperty NameProperty = DependencyProperty.Register(\"Name\", typeof(string), typeof(DependencyObject), \"Name\");\n\n    public object GetValue(DependencyProperty dp)\n    {\n        EffectiveValueEntry effectiveValue = _effectiveValues.FirstOrDefault((i) => i.PropertyIndex == dp.Index);\n        if (effectiveValue.PropertyIndex != 0)\n        {\n            return effectiveValue.Value;\n        }\n        else\n        {\n            PropertyMetadata metadata;\n            metadata = DependencyProperty.RegisteredDps[dp.HashCode].GetMetadata(this.GetType());\n            return metadata.Value;\n        }\n    }\n\n    public void SetValue(DependencyProperty dp, object value)\n    {\n        EffectiveValueEntry effectiveValue = _effectiveValues.FirstOrDefault((i) => i.PropertyIndex == dp.Index);\n        if (effectiveValue.PropertyIndex != 0)\n        {\n            effectiveValue.Value = value;\n        }\n        else\n        {\n            effectiveValue = new EffectiveValueEntry() { PropertyIndex = dp.Index, Value = value };\n            _effectiveValues.Add(effectiveValue);\n        }\n    }\n\n    public string Name\n    {\n        get\n        {\n            return (string)GetValue(NameProperty);\n        }\n        set\n        {\n            SetValue(NameProperty, value);\n        }\n    }\n}\n\npublic class SubDependencyObject : DependencyObject\n{\n    static SubDependencyObject()\n    {\n        NameProperty.OverrideMetadata(typeof(SubDependencyObject), new PropertyMetadata(\"SubName\"));\n    }\n}\n\npublic class DependencyProperty\n{\n    private static int globalIndex = 0;\n    internal static Dictionary<object, DependencyProperty> RegisteredDps = new Dictionary<object, DependencyProperty>();\n    internal string Name;\n    internal object Value;\n    internal int Index;\n    internal object HashCode;\n    private PropertyMetadata _defaultMetadata;\n    private List<PropertyMetadata> _metadataMap = new List<PropertyMetadata>();\n\n\n    private DependencyProperty(string name, Type propertyName, Type ownerType, object defaultValue)\n    {\n        this.Name = name;\n        this.Value = defaultValue;\n        this.HashCode = name.GetHashCode() ^ ownerType.GetHashCode();\n\n        PropertyMetadata metadata = new PropertyMetadata(defaultValue) { Type = ownerType };\n        _metadataMap.Add(metadata);\n        _defaultMetadata = metadata;\n    }\n\n    public static DependencyProperty Register(string name, Type propertyType, Type ownerType, object defaultValue)\n    {\n        DependencyProperty dp = new DependencyProperty(name, propertyType, ownerType, defaultValue);\n        globalIndex++;\n        dp.Index = globalIndex;\n        RegisteredDps.Add(dp.HashCode, dp);\n        return dp;\n    }\n\n    public void OverrideMetadata(Type forType, PropertyMetadata metadata)\n    {\n        metadata.Type = forType;\n        _metadataMap.Add(metadata);\n    }\n\n    public PropertyMetadata GetMetadata(Type type)\n    {\n        PropertyMetadata medatata = _metadataMap.FirstOrDefault((i) => i.Type == type) ??\n            _metadataMap.FirstOrDefault((i) => type.IsSubclassOf(i.Type));\n        if (medatata == null)\n        {\n            medatata = _defaultMetadata;\n        }\n        return medatata;\n    }\n}\n\ninternal struct EffectiveValueEntry\n{\n    internal int PropertyIndex { get; set; }\n\n    internal object Value { get; set; }\n}\n\npublic class PropertyMetadata\n{\n    public Type Type { get; set; }\n    public object Value { get; set; }\n\n    public PropertyMetadata(object defaultValue)\n    {\n        this.Value = defaultValue;\n    }\n}\n```\n</details>\n\n# <span style=\"color:#0366d6;\">依赖属性优先级</span>\n## <span style=\"color:#0366d6;\">优先级</span>\n>基值：3-11都称为基值，但属性系统强制的优先级最高，在CoerceValueCallback时发生\n本地值：xaml里面直接给属性赋值或者C#代码中直接赋值，```xml <Label x:Name=\"lblTest\"  Width=\"100\"/>```或者lblTest.Width=100\n当前值或者叫做有效值（EffctiveValue）：DependencyObject提供了GetValue方法来取得属性值，是最终对外的那个值\n>1. 属性系统强制\n2. 活动动画或具有 Hold 行为的动画\n3. 本地值\n4. TemplatedParent 模板属性\n5. 隐式样式\n6. 样式触发器\n7. 模板触发器\n8. 样式资源库\n9. 默认（主题）样式\n   - 主题样式中的活动触发器\n   - 主题样式中的资源库\n10. 继承\n11. 来自依赖属性元数据的默认值\n\n## <span style=\"color:#0366d6;\">使用过程</span>\n![过程](https://picb.zhimg.com/80/v2-4cc97c6644074daf299805cddf4463fb_720w.png)\n>1. 第一步，确定Base Value，对同一个属性的赋值可能发生在很多地方。比如控件的背景（Background），可能在Style或者控件的构造函数中都对它进行了赋值，这个Base Value就要确定这些值中优先级最高的值，把它作为Base Value。\n2. 第二步，估值。如果从第一步得到的值是一个表达式值（Expression），比如说一个绑定，WPF属性系统需要把它转化成一个实际值。\n3. 第三步，动画。如果当前属性正在作动画，那么因动画而产生的值会优于前面获得的值，这个也就是WPF中常说的动画优先。\n4. 第四步，强制。如果我们在FrameworkPropertyMetadata中传入了CoerceValueCallback，WPF属性系统会回调我们传入的的delagate，进行数据的强制赋值。在属性赋值过程中，Coerce拥有最高的优先级，这个优先级要大于动画的优先级别。\n5. 第五步，验证。如果在Register的时候传入了ValidateValueCallback，那么最后WPF会调用我们传入的delegate，来验证数据的有效性。当数据无效时会抛出异常来通知.\n\n# <span style=\"color:#0366d6;\">依赖项属性元数据</span>\n>依赖项属性的元数据作为一个对象存在，可以通过设置该属性，来实现依赖属性的某些功能\n1. 依赖项属性的默认值\n2. 对影响每个所有者类型的强制行（强制回调）为或更改通知行为（属性更改通知）的回调实现的引用。 请注意，这些回调通常是用非公共访问级别定义的，因此，除非实际引用位于您允许的访问范围内，否则通常无法从元数据获得这些引用\n3. 框架性元属性\n4. 将类作为现有依赖项属性的所有者来添加,AddOwner（添加共享依赖属性）。重写元数据,OverrideMetadata。\n\n\n# <span style=\"color:#0366d6;\">依赖项属性验证和强制</span>\n>验证回调：属性系统可在多种不同操作中使用回调。 这包括按默认值初始类型初始化、通过调用SetValue进行编程更改或尝试使用提供的新默认值覆盖元数据。 如果验证回调是通过其中任何一种操作调用的，并且返回 false，则会引发异常。\n```csharp\nprivate static bool IsValidReading(object value){}\n```\n>当前值的属性更改回叫用于将更改转发到其他依赖属性\n```csharp\nprivate  static void OnCurrentReadingChanged(DependencyObject d, DependencyPropertyChangedEventArgs e){}\n```\n>强制值回叫会检查当前属性可能依赖的属性的值，并在必要时强制当前值\n```csharp\nprivate static object CoerceCurrentReading(DependencyObject d, object value){}\n```\n<details>\n<summary>点开查看</summary>\n\n```csharp\npublic class Gauge : DependencyObject\n{\npublic static readonly DependencyProperty CurrentReadingProperty = DependencyProperty.Register(\n\"CurrentReading\",\ntypeof(double),\ntypeof(Gauge),\nnew FrameworkPropertyMetadata(\ndouble.NaN,\nFrameworkPropertyMetadataOptions.AffectsMeasure,\nnew PropertyChangedCallback(PropertyChangedCallback),\nnew CoerceValueCallback(CoerceCurrentReading)),\nnew ValidateValueCallback(IsValidReading));\n\npublic Gauge(int i)\n{\nConsole.WriteLine(i);\n}\n\nprivate static void PropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e)\n{\n\n}\n\npublic double CurrentReading\n{\nget { return (double)GetValue(CurrentReadingProperty); }\nset { SetValue(CurrentReadingProperty, value); }\n}\n\nprivate static bool IsValidReading(object value)\n{\nConsole.WriteLine(\"IsValidReading\");\nDouble v = (Double)value;\nreturn (!v.Equals(Double.NegativeInfinity) && !v.Equals(Double.PositiveInfinity));\n}\n\nprivate static object CoerceCurrentReading(DependencyObject d, object baseValue)\n{\nreturn 1.2;\n}\n}\n```\n</details>\n\n# <span style=\"color:#0366d6;\">附加属性</span>\n>附加属性旨在用作可在任何对象上设置的一类全局属性。在WPF中，附加属性通常定义为没有常规属性“包装”的一种特殊形式的依赖项属性。\n一个示例是 DockPanel.Dock 属性。 DockPanel.Dock 属性创建为附加属性，因为它将在 DockPanel 中包含的元素上设置，而不是在 DockPanel 本身设置\n\n>自定义附属属性\n```xml\n<Grid>\n<Canvas>\n<TextBlock Text=\"Hello World\" FontSize=\"20\" local:Bruce.Top=\"400\"></TextBlock>\n</Canvas>\n</Grid>\n```\n```csharp\npublic class Bruce:DependencyObject\n{\npublic static double GetLeft(DependencyObject obj)\n{\nreturn (double)obj.GetValue(LeftProperty);\n}\npublic static void SetLeft(DependencyObject obj,object value)\n{\nobj.SetValue(LeftProperty, value);\n}\npublic static DependencyProperty\nLeftProperty = DependencyProperty.RegisterAttached\n(\"Left\", typeof(double), typeof(Bruce), new PropertyMetadata(0.0,(obj,e)=> \n{\nvar element=obj as FrameworkElement;//目标控件\nif (element.Parent.GetType() == typeof(Canvas))\n{\nelement.Margin = new Thickness((double)e.NewValue,0,0,0);\n}\n}));\n}\n```\n\n\n\n\n\n\n","slug":"WPF-5","published":1,"updated":"2022-08-17T06:55:45.661Z","_id":"ckd31wi9d0000dgtx53m07di7","comments":1,"layout":"post","photos":[],"link":"","content":"<a id=\"more\"></a>\n<p>参考:WPF 编程宝典<br><a href=\"https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/advanced/properties-wpf\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/advanced/properties-wpf</a><br><a href=\"https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html</a></p>\n<blockquote>\n<p>依赖属性的出现，主要是为了解决对象的属性带来的膨胀，因为依赖属性设计为静态，<br>所有对象共用一份，减少消耗，由于其内部的设计，每个对象又可以独立设置和拥有依赖属性的值<br>其原理参考引用链接中的文章</p>\n</blockquote>\n<h1 id=\"模拟依赖属性实现\"><a href=\"#模拟依赖属性实现\" class=\"headerlink\" title=\"模拟依赖属性实现\"></a><span style=\"color:#0366d6;\">模拟依赖属性实现</span></h1><blockquote>\n<p>引用自<a href=\"https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html</a></p>\n</blockquote>\n<details>\n<summary>点开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DependencyObject obj = <span class=\"keyword\">new</span> DependencyObject();</span><br><span class=\"line\">    SubDependencyObject subObj = <span class=\"keyword\">new</span> SubDependencyObject();</span><br><span class=\"line\">    <span class=\"keyword\">string</span> sd = subObj.Name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DependencyObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;EffectiveValueEntry&gt; _effectiveValues = <span class=\"keyword\">new</span> List&lt;EffectiveValueEntry&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> DependencyProperty NameProperty = DependencyProperty.Register(<span class=\"string\">\"Name\"</span>, <span class=\"keyword\">typeof</span>(<span class=\"keyword\">string</span>), <span class=\"keyword\">typeof</span>(DependencyObject), <span class=\"string\">\"Name\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">object</span> <span class=\"title\">GetValue</span>(<span class=\"params\">DependencyProperty dp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        EffectiveValueEntry effectiveValue = _effectiveValues.FirstOrDefault((i) =&gt; i.PropertyIndex == dp.Index);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectiveValue.PropertyIndex != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> effectiveValue.Value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            PropertyMetadata metadata;</span><br><span class=\"line\">            metadata = DependencyProperty.RegisteredDps[dp.HashCode].GetMetadata(<span class=\"keyword\">this</span>.GetType());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> metadata.Value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetValue</span>(<span class=\"params\">DependencyProperty dp, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        EffectiveValueEntry effectiveValue = _effectiveValues.FirstOrDefault((i) =&gt; i.PropertyIndex == dp.Index);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectiveValue.PropertyIndex != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            effectiveValue.Value = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            effectiveValue = <span class=\"keyword\">new</span> EffectiveValueEntry() &#123; PropertyIndex = dp.Index, Value = <span class=\"keyword\">value</span> &#125;;</span><br><span class=\"line\">            _effectiveValues.Add(effectiveValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">string</span>)GetValue(NameProperty);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SetValue(NameProperty, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SubDependencyObject</span> : <span class=\"title\">DependencyObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">SubDependencyObject</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        NameProperty.OverrideMetadata(<span class=\"keyword\">typeof</span>(SubDependencyObject), <span class=\"keyword\">new</span> PropertyMetadata(<span class=\"string\">\"SubName\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DependencyProperty</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> globalIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> Dictionary&lt;<span class=\"keyword\">object</span>, DependencyProperty&gt; RegisteredDps = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">object</span>, DependencyProperty&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">string</span> Name;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">object</span> Value;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">int</span> Index;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">object</span> HashCode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PropertyMetadata _defaultMetadata;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;PropertyMetadata&gt; _metadataMap = <span class=\"keyword\">new</span> List&lt;PropertyMetadata&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DependencyProperty</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, Type propertyName, Type ownerType, <span class=\"keyword\">object</span> defaultValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Value = defaultValue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.HashCode = name.GetHashCode() ^ ownerType.GetHashCode();</span><br><span class=\"line\"></span><br><span class=\"line\">        PropertyMetadata metadata = <span class=\"keyword\">new</span> PropertyMetadata(defaultValue) &#123; Type = ownerType &#125;;</span><br><span class=\"line\">        _metadataMap.Add(metadata);</span><br><span class=\"line\">        _defaultMetadata = metadata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DependencyProperty <span class=\"title\">Register</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, Type propertyType, Type ownerType, <span class=\"keyword\">object</span> defaultValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        DependencyProperty dp = <span class=\"keyword\">new</span> DependencyProperty(name, propertyType, ownerType, defaultValue);</span><br><span class=\"line\">        globalIndex++;</span><br><span class=\"line\">        dp.Index = globalIndex;</span><br><span class=\"line\">        RegisteredDps.Add(dp.HashCode, dp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OverrideMetadata</span>(<span class=\"params\">Type forType, PropertyMetadata metadata</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        metadata.Type = forType;</span><br><span class=\"line\">        _metadataMap.Add(metadata);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PropertyMetadata <span class=\"title\">GetMetadata</span>(<span class=\"params\">Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        PropertyMetadata medatata = _metadataMap.FirstOrDefault((i) =&gt; i.Type == type) ??</span><br><span class=\"line\">            _metadataMap.FirstOrDefault((i) =&gt; type.IsSubclassOf(i.Type));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (medatata == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            medatata = _defaultMetadata;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> medatata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">struct</span> EffectiveValueEntry</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">int</span> PropertyIndex &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">object</span> Value &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PropertyMetadata</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Type Type &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">object</span> Value &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertyMetadata</span>(<span class=\"params\"><span class=\"keyword\">object</span> defaultValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Value = defaultValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h1 id=\"依赖属性优先级\"><a href=\"#依赖属性优先级\" class=\"headerlink\" title=\"依赖属性优先级\"></a><span style=\"color:#0366d6;\">依赖属性优先级</span></h1><h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a><span style=\"color:#0366d6;\">优先级</span></h2><blockquote>\n<p>基值：3-11都称为基值，但属性系统强制的优先级最高，在CoerceValueCallback时发生<br>本地值：xaml里面直接给属性赋值或者C#代码中直接赋值，<code>xml &lt;Label x:Name=&quot;lblTest&quot;  Width=&quot;100&quot;/&gt;</code>或者lblTest.Width=100<br>当前值或者叫做有效值（EffctiveValue）：DependencyObject提供了GetValue方法来取得属性值，是最终对外的那个值</p>\n<ol>\n<li>属性系统强制</li>\n<li>活动动画或具有 Hold 行为的动画</li>\n<li>本地值</li>\n<li>TemplatedParent 模板属性</li>\n<li>隐式样式</li>\n<li>样式触发器</li>\n<li>模板触发器</li>\n<li>样式资源库</li>\n<li>默认（主题）样式</li>\n</ol>\n</blockquote>\n<ul>\n<li>主题样式中的活动触发器</li>\n<li>主题样式中的资源库<ol start=\"10\">\n<li>继承</li>\n<li>来自依赖属性元数据的默认值</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"使用过程\"><a href=\"#使用过程\" class=\"headerlink\" title=\"使用过程\"></a><span style=\"color:#0366d6;\">使用过程</span></h2><p><img src=\"https://picb.zhimg.com/80/v2-4cc97c6644074daf299805cddf4463fb_720w.png\" alt=\"过程\"></p>\n<blockquote>\n<ol>\n<li>第一步，确定Base Value，对同一个属性的赋值可能发生在很多地方。比如控件的背景（Background），可能在Style或者控件的构造函数中都对它进行了赋值，这个Base Value就要确定这些值中优先级最高的值，把它作为Base Value。</li>\n<li>第二步，估值。如果从第一步得到的值是一个表达式值（Expression），比如说一个绑定，WPF属性系统需要把它转化成一个实际值。</li>\n<li>第三步，动画。如果当前属性正在作动画，那么因动画而产生的值会优于前面获得的值，这个也就是WPF中常说的动画优先。</li>\n<li>第四步，强制。如果我们在FrameworkPropertyMetadata中传入了CoerceValueCallback，WPF属性系统会回调我们传入的的delagate，进行数据的强制赋值。在属性赋值过程中，Coerce拥有最高的优先级，这个优先级要大于动画的优先级别。</li>\n<li>第五步，验证。如果在Register的时候传入了ValidateValueCallback，那么最后WPF会调用我们传入的delegate，来验证数据的有效性。当数据无效时会抛出异常来通知.</li>\n</ol>\n</blockquote>\n<h1 id=\"依赖项属性元数据\"><a href=\"#依赖项属性元数据\" class=\"headerlink\" title=\"依赖项属性元数据\"></a><span style=\"color:#0366d6;\">依赖项属性元数据</span></h1><blockquote>\n<p>依赖项属性的元数据作为一个对象存在，可以通过设置该属性，来实现依赖属性的某些功能</p>\n</blockquote>\n<ol>\n<li>依赖项属性的默认值</li>\n<li>对影响每个所有者类型的强制行（强制回调）为或更改通知行为（属性更改通知）的回调实现的引用。 请注意，这些回调通常是用非公共访问级别定义的，因此，除非实际引用位于您允许的访问范围内，否则通常无法从元数据获得这些引用</li>\n<li>框架性元属性</li>\n<li>将类作为现有依赖项属性的所有者来添加,AddOwner（添加共享依赖属性）。重写元数据,OverrideMetadata。</li>\n</ol>\n<h1 id=\"依赖项属性验证和强制\"><a href=\"#依赖项属性验证和强制\" class=\"headerlink\" title=\"依赖项属性验证和强制\"></a><span style=\"color:#0366d6;\">依赖项属性验证和强制</span></h1><blockquote>\n<p>验证回调：属性系统可在多种不同操作中使用回调。 这包括按默认值初始类型初始化、通过调用SetValue进行编程更改或尝试使用提供的新默认值覆盖元数据。 如果验证回调是通过其中任何一种操作调用的，并且返回 false，则会引发异常。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsValidReading</span>(<span class=\"params\"><span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当前值的属性更改回叫用于将更改转发到其他依赖属性</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OnCurrentReadingChanged</span>(<span class=\"params\">DependencyObject d, DependencyPropertyChangedEventArgs e</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>强制值回叫会检查当前属性可能依赖的属性的值，并在必要时强制当前值</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">CoerceCurrentReading</span>(<span class=\"params\">DependencyObject d, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<details>\n<summary>点开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Gauge</span> : <span class=\"title\">DependencyObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> DependencyProperty CurrentReadingProperty = DependencyProperty.Register(</span><br><span class=\"line\"><span class=\"string\">\"CurrentReading\"</span>,</span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"keyword\">double</span>),</span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(Gauge),</span><br><span class=\"line\"><span class=\"keyword\">new</span> FrameworkPropertyMetadata(</span><br><span class=\"line\"><span class=\"keyword\">double</span>.NaN,</span><br><span class=\"line\">FrameworkPropertyMetadataOptions.AffectsMeasure,</span><br><span class=\"line\"><span class=\"keyword\">new</span> PropertyChangedCallback(PropertyChangedCallback),</span><br><span class=\"line\"><span class=\"keyword\">new</span> CoerceValueCallback(CoerceCurrentReading)),</span><br><span class=\"line\"><span class=\"keyword\">new</span> ValidateValueCallback(IsValidReading));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Gauge</span>(<span class=\"params\"><span class=\"keyword\">int</span> i</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">Console.WriteLine(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PropertyChangedCallback</span>(<span class=\"params\">DependencyObject d, DependencyPropertyChangedEventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> CurrentReading</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)GetValue(CurrentReadingProperty); &#125;</span><br><span class=\"line\"><span class=\"keyword\">set</span> &#123; SetValue(CurrentReadingProperty, <span class=\"keyword\">value</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsValidReading</span>(<span class=\"params\"><span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">\"IsValidReading\"</span>);</span><br><span class=\"line\">Double v = (Double)<span class=\"keyword\">value</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (!v.Equals(Double.NegativeInfinity) &amp;&amp; !v.Equals(Double.PositiveInfinity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">CoerceCurrentReading</span>(<span class=\"params\">DependencyObject d, <span class=\"keyword\">object</span> baseValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1.2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h1 id=\"附加属性\"><a href=\"#附加属性\" class=\"headerlink\" title=\"附加属性\"></a><span style=\"color:#0366d6;\">附加属性</span></h1><blockquote>\n<p>附加属性旨在用作可在任何对象上设置的一类全局属性。在WPF中，附加属性通常定义为没有常规属性“包装”的一种特殊形式的依赖项属性。<br>一个示例是 DockPanel.Dock 属性。 DockPanel.Dock 属性创建为附加属性，因为它将在 DockPanel 中包含的元素上设置，而不是在 DockPanel 本身设置</p>\n</blockquote>\n<blockquote>\n<p>自定义附属属性</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextBlock</span> <span class=\"attr\">Text</span>=<span class=\"string\">\"Hello World\"</span> <span class=\"attr\">FontSize</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">local:Bruce.Top</span>=<span class=\"string\">\"400\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TextBlock</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Bruce</span>:<span class=\"title\">DependencyObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">GetLeft</span>(<span class=\"params\">DependencyObject obj</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)obj.GetValue(LeftProperty);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetLeft</span>(<span class=\"params\">DependencyObject obj,<span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">obj.SetValue(LeftProperty, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DependencyProperty</span><br><span class=\"line\">LeftProperty = DependencyProperty.RegisterAttached</span><br><span class=\"line\">(<span class=\"string\">\"Left\"</span>, <span class=\"keyword\">typeof</span>(<span class=\"keyword\">double</span>), <span class=\"keyword\">typeof</span>(Bruce), <span class=\"keyword\">new</span> PropertyMetadata(<span class=\"number\">0.0</span>,(obj,e)=&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> element=obj <span class=\"keyword\">as</span> FrameworkElement;<span class=\"comment\">//目标控件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (element.Parent.GetType() == <span class=\"keyword\">typeof</span>(Canvas))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">element.Margin = <span class=\"keyword\">new</span> Thickness((<span class=\"keyword\">double</span>)e.NewValue,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p>参考:WPF 编程宝典<br><a href=\"https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/advanced/properties-wpf\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/advanced/properties-wpf</a><br><a href=\"https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html</a></p>\n<blockquote>\n<p>依赖属性的出现，主要是为了解决对象的属性带来的膨胀，因为依赖属性设计为静态，<br>所有对象共用一份，减少消耗，由于其内部的设计，每个对象又可以独立设置和拥有依赖属性的值<br>其原理参考引用链接中的文章</p>\n</blockquote>\n<h1 id=\"模拟依赖属性实现\"><a href=\"#模拟依赖属性实现\" class=\"headerlink\" title=\"模拟依赖属性实现\"></a><span style=\"color:#0366d6;\">模拟依赖属性实现</span></h1><blockquote>\n<p>引用自<a href=\"https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/Zhouyongh/archive/2009/09/10/1564099.html</a></p>\n</blockquote>\n<details>\n<summary>点开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    DependencyObject obj = <span class=\"keyword\">new</span> DependencyObject();</span><br><span class=\"line\">    SubDependencyObject subObj = <span class=\"keyword\">new</span> SubDependencyObject();</span><br><span class=\"line\">    <span class=\"keyword\">string</span> sd = subObj.Name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DependencyObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;EffectiveValueEntry&gt; _effectiveValues = <span class=\"keyword\">new</span> List&lt;EffectiveValueEntry&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> DependencyProperty NameProperty = DependencyProperty.Register(<span class=\"string\">\"Name\"</span>, <span class=\"keyword\">typeof</span>(<span class=\"keyword\">string</span>), <span class=\"keyword\">typeof</span>(DependencyObject), <span class=\"string\">\"Name\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">object</span> <span class=\"title\">GetValue</span>(<span class=\"params\">DependencyProperty dp</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        EffectiveValueEntry effectiveValue = _effectiveValues.FirstOrDefault((i) =&gt; i.PropertyIndex == dp.Index);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectiveValue.PropertyIndex != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> effectiveValue.Value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            PropertyMetadata metadata;</span><br><span class=\"line\">            metadata = DependencyProperty.RegisteredDps[dp.HashCode].GetMetadata(<span class=\"keyword\">this</span>.GetType());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> metadata.Value;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetValue</span>(<span class=\"params\">DependencyProperty dp, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        EffectiveValueEntry effectiveValue = _effectiveValues.FirstOrDefault((i) =&gt; i.PropertyIndex == dp.Index);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (effectiveValue.PropertyIndex != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            effectiveValue.Value = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            effectiveValue = <span class=\"keyword\">new</span> EffectiveValueEntry() &#123; PropertyIndex = dp.Index, Value = <span class=\"keyword\">value</span> &#125;;</span><br><span class=\"line\">            _effectiveValues.Add(effectiveValue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Name</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">string</span>)GetValue(NameProperty);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SetValue(NameProperty, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SubDependencyObject</span> : <span class=\"title\">DependencyObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">SubDependencyObject</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        NameProperty.OverrideMetadata(<span class=\"keyword\">typeof</span>(SubDependencyObject), <span class=\"keyword\">new</span> PropertyMetadata(<span class=\"string\">\"SubName\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DependencyProperty</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> globalIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> Dictionary&lt;<span class=\"keyword\">object</span>, DependencyProperty&gt; RegisteredDps = <span class=\"keyword\">new</span> Dictionary&lt;<span class=\"keyword\">object</span>, DependencyProperty&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">string</span> Name;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">object</span> Value;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">int</span> Index;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">object</span> HashCode;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PropertyMetadata _defaultMetadata;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;PropertyMetadata&gt; _metadataMap = <span class=\"keyword\">new</span> List&lt;PropertyMetadata&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">DependencyProperty</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, Type propertyName, Type ownerType, <span class=\"keyword\">object</span> defaultValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Value = defaultValue;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.HashCode = name.GetHashCode() ^ ownerType.GetHashCode();</span><br><span class=\"line\"></span><br><span class=\"line\">        PropertyMetadata metadata = <span class=\"keyword\">new</span> PropertyMetadata(defaultValue) &#123; Type = ownerType &#125;;</span><br><span class=\"line\">        _metadataMap.Add(metadata);</span><br><span class=\"line\">        _defaultMetadata = metadata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DependencyProperty <span class=\"title\">Register</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, Type propertyType, Type ownerType, <span class=\"keyword\">object</span> defaultValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        DependencyProperty dp = <span class=\"keyword\">new</span> DependencyProperty(name, propertyType, ownerType, defaultValue);</span><br><span class=\"line\">        globalIndex++;</span><br><span class=\"line\">        dp.Index = globalIndex;</span><br><span class=\"line\">        RegisteredDps.Add(dp.HashCode, dp);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OverrideMetadata</span>(<span class=\"params\">Type forType, PropertyMetadata metadata</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        metadata.Type = forType;</span><br><span class=\"line\">        _metadataMap.Add(metadata);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PropertyMetadata <span class=\"title\">GetMetadata</span>(<span class=\"params\">Type type</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        PropertyMetadata medatata = _metadataMap.FirstOrDefault((i) =&gt; i.Type == type) ??</span><br><span class=\"line\">            _metadataMap.FirstOrDefault((i) =&gt; type.IsSubclassOf(i.Type));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (medatata == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            medatata = _defaultMetadata;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> medatata;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">struct</span> EffectiveValueEntry</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">int</span> PropertyIndex &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">internal</span> <span class=\"keyword\">object</span> Value &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PropertyMetadata</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Type Type &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">object</span> Value &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PropertyMetadata</span>(<span class=\"params\"><span class=\"keyword\">object</span> defaultValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Value = defaultValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h1 id=\"依赖属性优先级\"><a href=\"#依赖属性优先级\" class=\"headerlink\" title=\"依赖属性优先级\"></a><span style=\"color:#0366d6;\">依赖属性优先级</span></h1><h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a><span style=\"color:#0366d6;\">优先级</span></h2><blockquote>\n<p>基值：3-11都称为基值，但属性系统强制的优先级最高，在CoerceValueCallback时发生<br>本地值：xaml里面直接给属性赋值或者C#代码中直接赋值，<code>xml &lt;Label x:Name=&quot;lblTest&quot;  Width=&quot;100&quot;/&gt;</code>或者lblTest.Width=100<br>当前值或者叫做有效值（EffctiveValue）：DependencyObject提供了GetValue方法来取得属性值，是最终对外的那个值</p>\n<ol>\n<li>属性系统强制</li>\n<li>活动动画或具有 Hold 行为的动画</li>\n<li>本地值</li>\n<li>TemplatedParent 模板属性</li>\n<li>隐式样式</li>\n<li>样式触发器</li>\n<li>模板触发器</li>\n<li>样式资源库</li>\n<li>默认（主题）样式</li>\n</ol>\n</blockquote>\n<ul>\n<li>主题样式中的活动触发器</li>\n<li>主题样式中的资源库<ol start=\"10\">\n<li>继承</li>\n<li>来自依赖属性元数据的默认值</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"使用过程\"><a href=\"#使用过程\" class=\"headerlink\" title=\"使用过程\"></a><span style=\"color:#0366d6;\">使用过程</span></h2><p><img src=\"https://picb.zhimg.com/80/v2-4cc97c6644074daf299805cddf4463fb_720w.png\" alt=\"过程\"></p>\n<blockquote>\n<ol>\n<li>第一步，确定Base Value，对同一个属性的赋值可能发生在很多地方。比如控件的背景（Background），可能在Style或者控件的构造函数中都对它进行了赋值，这个Base Value就要确定这些值中优先级最高的值，把它作为Base Value。</li>\n<li>第二步，估值。如果从第一步得到的值是一个表达式值（Expression），比如说一个绑定，WPF属性系统需要把它转化成一个实际值。</li>\n<li>第三步，动画。如果当前属性正在作动画，那么因动画而产生的值会优于前面获得的值，这个也就是WPF中常说的动画优先。</li>\n<li>第四步，强制。如果我们在FrameworkPropertyMetadata中传入了CoerceValueCallback，WPF属性系统会回调我们传入的的delagate，进行数据的强制赋值。在属性赋值过程中，Coerce拥有最高的优先级，这个优先级要大于动画的优先级别。</li>\n<li>第五步，验证。如果在Register的时候传入了ValidateValueCallback，那么最后WPF会调用我们传入的delegate，来验证数据的有效性。当数据无效时会抛出异常来通知.</li>\n</ol>\n</blockquote>\n<h1 id=\"依赖项属性元数据\"><a href=\"#依赖项属性元数据\" class=\"headerlink\" title=\"依赖项属性元数据\"></a><span style=\"color:#0366d6;\">依赖项属性元数据</span></h1><blockquote>\n<p>依赖项属性的元数据作为一个对象存在，可以通过设置该属性，来实现依赖属性的某些功能</p>\n</blockquote>\n<ol>\n<li>依赖项属性的默认值</li>\n<li>对影响每个所有者类型的强制行（强制回调）为或更改通知行为（属性更改通知）的回调实现的引用。 请注意，这些回调通常是用非公共访问级别定义的，因此，除非实际引用位于您允许的访问范围内，否则通常无法从元数据获得这些引用</li>\n<li>框架性元属性</li>\n<li>将类作为现有依赖项属性的所有者来添加,AddOwner（添加共享依赖属性）。重写元数据,OverrideMetadata。</li>\n</ol>\n<h1 id=\"依赖项属性验证和强制\"><a href=\"#依赖项属性验证和强制\" class=\"headerlink\" title=\"依赖项属性验证和强制\"></a><span style=\"color:#0366d6;\">依赖项属性验证和强制</span></h1><blockquote>\n<p>验证回调：属性系统可在多种不同操作中使用回调。 这包括按默认值初始类型初始化、通过调用SetValue进行编程更改或尝试使用提供的新默认值覆盖元数据。 如果验证回调是通过其中任何一种操作调用的，并且返回 false，则会引发异常。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsValidReading</span>(<span class=\"params\"><span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当前值的属性更改回叫用于将更改转发到其他依赖属性</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">OnCurrentReadingChanged</span>(<span class=\"params\">DependencyObject d, DependencyPropertyChangedEventArgs e</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>强制值回叫会检查当前属性可能依赖的属性的值，并在必要时强制当前值</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">CoerceCurrentReading</span>(<span class=\"params\">DependencyObject d, <span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<details>\n<summary>点开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Gauge</span> : <span class=\"title\">DependencyObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> DependencyProperty CurrentReadingProperty = DependencyProperty.Register(</span><br><span class=\"line\"><span class=\"string\">\"CurrentReading\"</span>,</span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(<span class=\"keyword\">double</span>),</span><br><span class=\"line\"><span class=\"keyword\">typeof</span>(Gauge),</span><br><span class=\"line\"><span class=\"keyword\">new</span> FrameworkPropertyMetadata(</span><br><span class=\"line\"><span class=\"keyword\">double</span>.NaN,</span><br><span class=\"line\">FrameworkPropertyMetadataOptions.AffectsMeasure,</span><br><span class=\"line\"><span class=\"keyword\">new</span> PropertyChangedCallback(PropertyChangedCallback),</span><br><span class=\"line\"><span class=\"keyword\">new</span> CoerceValueCallback(CoerceCurrentReading)),</span><br><span class=\"line\"><span class=\"keyword\">new</span> ValidateValueCallback(IsValidReading));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Gauge</span>(<span class=\"params\"><span class=\"keyword\">int</span> i</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">Console.WriteLine(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">PropertyChangedCallback</span>(<span class=\"params\">DependencyObject d, DependencyPropertyChangedEventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> CurrentReading</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)GetValue(CurrentReadingProperty); &#125;</span><br><span class=\"line\"><span class=\"keyword\">set</span> &#123; SetValue(CurrentReadingProperty, <span class=\"keyword\">value</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsValidReading</span>(<span class=\"params\"><span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">Console.WriteLine(<span class=\"string\">\"IsValidReading\"</span>);</span><br><span class=\"line\">Double v = (Double)<span class=\"keyword\">value</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (!v.Equals(Double.NegativeInfinity) &amp;&amp; !v.Equals(Double.PositiveInfinity));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">object</span> <span class=\"title\">CoerceCurrentReading</span>(<span class=\"params\">DependencyObject d, <span class=\"keyword\">object</span> baseValue</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1.2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h1 id=\"附加属性\"><a href=\"#附加属性\" class=\"headerlink\" title=\"附加属性\"></a><span style=\"color:#0366d6;\">附加属性</span></h1><blockquote>\n<p>附加属性旨在用作可在任何对象上设置的一类全局属性。在WPF中，附加属性通常定义为没有常规属性“包装”的一种特殊形式的依赖项属性。<br>一个示例是 DockPanel.Dock 属性。 DockPanel.Dock 属性创建为附加属性，因为它将在 DockPanel 中包含的元素上设置，而不是在 DockPanel 本身设置</p>\n</blockquote>\n<blockquote>\n<p>自定义附属属性</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Grid</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextBlock</span> <span class=\"attr\">Text</span>=<span class=\"string\">\"Hello World\"</span> <span class=\"attr\">FontSize</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">local:Bruce.Top</span>=<span class=\"string\">\"400\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">TextBlock</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Canvas</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Grid</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Bruce</span>:<span class=\"title\">DependencyObject</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">GetLeft</span>(<span class=\"params\">DependencyObject obj</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (<span class=\"keyword\">double</span>)obj.GetValue(LeftProperty);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SetLeft</span>(<span class=\"params\">DependencyObject obj,<span class=\"keyword\">object</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">obj.SetValue(LeftProperty, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> DependencyProperty</span><br><span class=\"line\">LeftProperty = DependencyProperty.RegisterAttached</span><br><span class=\"line\">(<span class=\"string\">\"Left\"</span>, <span class=\"keyword\">typeof</span>(<span class=\"keyword\">double</span>), <span class=\"keyword\">typeof</span>(Bruce), <span class=\"keyword\">new</span> PropertyMetadata(<span class=\"number\">0.0</span>,(obj,e)=&gt; </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> element=obj <span class=\"keyword\">as</span> FrameworkElement;<span class=\"comment\">//目标控件</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (element.Parent.GetType() == <span class=\"keyword\">typeof</span>(Canvas))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">element.Margin = <span class=\"keyword\">new</span> Thickness((<span class=\"keyword\">double</span>)e.NewValue,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"数学趣味题","date":"2022-08-16T16:00:00.000Z","_content":"收集一些数学趣味题\n<!-- more -->\n# <span style=\"color:#0366d6;\">求蓝色区域面积</span>\n![求蓝色区域面积](https://pic2.zhimg.com/80/v2-1fe4fd72b4a5d88a77fab658cb9c9ea5_720w.jpg)\n# <span style=\"color:#0366d6;\">求角度X</span>\n![求蓝色区域面积](https://pic3.zhimg.com/80/v2-a771b2ab4eb29161b26d338c1f4915ea_720w.jpg)\n# <span style=\"color:#0366d6;\">求灰色区域面积</span>\n![求蓝色区域面积](https://pic4.zhimg.com/80/v2-fa1bb7f8412dd288de15ef05a3f4f577_720w.jpg)","source":"_posts/math-1.md","raw":"---\ntitle: 数学趣味题\ndate: 2022-08-17\ntags: [数学趣味题]\ncategories: 数学趣味题\n---\n收集一些数学趣味题\n<!-- more -->\n# <span style=\"color:#0366d6;\">求蓝色区域面积</span>\n![求蓝色区域面积](https://pic2.zhimg.com/80/v2-1fe4fd72b4a5d88a77fab658cb9c9ea5_720w.jpg)\n# <span style=\"color:#0366d6;\">求角度X</span>\n![求蓝色区域面积](https://pic3.zhimg.com/80/v2-a771b2ab4eb29161b26d338c1f4915ea_720w.jpg)\n# <span style=\"color:#0366d6;\">求灰色区域面积</span>\n![求蓝色区域面积](https://pic4.zhimg.com/80/v2-fa1bb7f8412dd288de15ef05a3f4f577_720w.jpg)","slug":"math-1","published":1,"updated":"2022-08-17T06:24:26.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl6x9g2pn00007ovqcm20fivw","content":"<p>收集一些数学趣味题</p>\n<a id=\"more\"></a>\n<h1 id=\"求蓝色区域面积\"><a href=\"#求蓝色区域面积\" class=\"headerlink\" title=\"求蓝色区域面积\"></a><span style=\"color:#0366d6;\">求蓝色区域面积</span></h1><p><img src=\"https://pic2.zhimg.com/80/v2-1fe4fd72b4a5d88a77fab658cb9c9ea5_720w.jpg\" alt=\"求蓝色区域面积\"></p>\n<h1 id=\"求角度X\"><a href=\"#求角度X\" class=\"headerlink\" title=\"求角度X\"></a><span style=\"color:#0366d6;\">求角度X</span></h1><p><img src=\"https://pic3.zhimg.com/80/v2-a771b2ab4eb29161b26d338c1f4915ea_720w.jpg\" alt=\"求蓝色区域面积\"></p>\n<h1 id=\"求灰色区域面积\"><a href=\"#求灰色区域面积\" class=\"headerlink\" title=\"求灰色区域面积\"></a><span style=\"color:#0366d6;\">求灰色区域面积</span></h1><p><img src=\"https://pic4.zhimg.com/80/v2-fa1bb7f8412dd288de15ef05a3f4f577_720w.jpg\" alt=\"求蓝色区域面积\"></p>\n","site":{"data":{}},"excerpt":"<p>收集一些数学趣味题</p>","more":"<h1 id=\"求蓝色区域面积\"><a href=\"#求蓝色区域面积\" class=\"headerlink\" title=\"求蓝色区域面积\"></a><span style=\"color:#0366d6;\">求蓝色区域面积</span></h1><p><img src=\"https://pic2.zhimg.com/80/v2-1fe4fd72b4a5d88a77fab658cb9c9ea5_720w.jpg\" alt=\"求蓝色区域面积\"></p>\n<h1 id=\"求角度X\"><a href=\"#求角度X\" class=\"headerlink\" title=\"求角度X\"></a><span style=\"color:#0366d6;\">求角度X</span></h1><p><img src=\"https://pic3.zhimg.com/80/v2-a771b2ab4eb29161b26d338c1f4915ea_720w.jpg\" alt=\"求蓝色区域面积\"></p>\n<h1 id=\"求灰色区域面积\"><a href=\"#求灰色区域面积\" class=\"headerlink\" title=\"求灰色区域面积\"></a><span style=\"color:#0366d6;\">求灰色区域面积</span></h1><p><img src=\"https://pic4.zhimg.com/80/v2-fa1bb7f8412dd288de15ef05a3f4f577_720w.jpg\" alt=\"求蓝色区域面积\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck6soqjzl0000qkrifj0f8ar4","category_id":"ck5t88gqa0001rwribu4g3scw","_id":"ck6soqjzv0002qkri9tr10anl"},{"post_id":"ck6t31wmr0003j0rickq2cqvb","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck6ufvnky001vqcri25n21ctu"},{"post_id":"ck6ugfar9001yqcrich0a556t","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck6xkp5me000fb8ri0l2pc93w"},{"post_id":"ck6xkgxtl0003b8ri494zae24","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck6z0irhz0003vwricfjr9hv6"},{"post_id":"ck6z2nlft0001rwriapbv1x3h","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck6zuue2500077gricdrngtz9"},{"post_id":"ck6z2nlfk0000rwrigsomgcna","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck6zwdqwp00097grign8ihcp8"},{"post_id":"ck70h2q63000078rigwrbar8z","category_id":"ck70h2q78000178ri4qhc2w4k","_id":"ck70h2q7l000478ri1dam4rtk"},{"post_id":"ck71xus7a0000v8ri7u234af5","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck71z9p570001zcridr11glie"},{"post_id":"ck71yi564000glcri8rwydl3n","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck72oc5j6000dusrifqi56fqn"},{"post_id":"ck71yk8bw000plcri011oafs7","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck75tak2s0003qkrieqdxfx40"},{"post_id":"ck6ugfc310021qcri8rg42c23","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck7a51aig000fe8tx9iba2du9"},{"post_id":"ck71ykdtd000slcrib48f7ifl","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck7d11syl000baktx8vzb48i3"},{"post_id":"ck94yu0di00007wtxcjpbcvlj","category_id":"ck94yu0ef00017wtxfa4q8usq","_id":"ck94yu0ev00047wtx5tuk31j4"},{"post_id":"ck95nqs6p00004otxg9vj1va1","category_id":"ck94yu0ef00017wtxfa4q8usq","_id":"ck95nqs7800024otx40kmg43o"},{"post_id":"ck8cogg490000dctxhglsbdol","category_id":"ck8cogg4v0001dctx577k8vz7","_id":"ck971pqgo0003a4tx5ouqelwg"},{"post_id":"ckct0lxc60000qstxej7odmt6","category_id":"ck94yu0ef00017wtxfa4q8usq","_id":"ckd0z4m2f000t94txhz4oeyz2"},{"post_id":"ckd1q02050000hotxcg4f6bpb","category_id":"ck94yu0ef00017wtxfa4q8usq","_id":"ckd1q020l0002hotx5ww96ndg"},{"post_id":"ckd31wi9d0000dgtx53m07di7","category_id":"ck94yu0ef00017wtxfa4q8usq","_id":"ckdcrsrxx0007lotx194rfkbi"},{"post_id":"cl6x9g2pn00007ovqcm20fivw","category_id":"cl6x9g2ql00017ovq9bjrdw4q","_id":"cl6x9g2qr00047ovqfetvgumf"}],"PostTag":[{"post_id":"ck6soqjzl0000qkrifj0f8ar4","tag_id":"ck5t88gqd0002rwricxat8mo9","_id":"ck6soqjzv0001qkrigovp5ke1"},{"post_id":"ck6t31wmr0003j0rickq2cqvb","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck6ufvnkx001uqcri4dv50kko"},{"post_id":"ck6ugfar9001yqcrich0a556t","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck6xkp5md000eb8riciyl26kk"},{"post_id":"ck6xkgxtl0003b8ri494zae24","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck6z0irhz0002vwri3jba5fwn"},{"post_id":"ck6z2nlft0001rwriapbv1x3h","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck6zuue2500067gri2rdoda6i"},{"post_id":"ck6z2nlfk0000rwrigsomgcna","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck6zwdqwo00087gric2vo7pzm"},{"post_id":"ck70h2q63000078rigwrbar8z","tag_id":"ck70h2q7f000278ri797y9hrh","_id":"ck70h2q7k000378rickbqgin9"},{"post_id":"ck71xus7a0000v8ri7u234af5","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck71z9p550000zcri70vxdi5j"},{"post_id":"ck71yi564000glcri8rwydl3n","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck72oc5j6000cusriey3f8n14"},{"post_id":"ck71yk8bw000plcri011oafs7","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck75tak2r0002qkri3d4mbm6z"},{"post_id":"ck6ugfc310021qcri8rg42c23","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck7a51aif000ee8txcyqp8erw"},{"post_id":"ck71ykdtd000slcrib48f7ifl","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck7d11syl000aaktxgplp0lef"},{"post_id":"ck94yu0di00007wtxcjpbcvlj","tag_id":"ck94yu0ep00027wtxhqk97mfy","_id":"ck94yu0eu00037wtxbt994s4f"},{"post_id":"ck95nqs6p00004otxg9vj1va1","tag_id":"ck94yu0ep00027wtxhqk97mfy","_id":"ck95nqs7700014otx1eohcnps"},{"post_id":"ck8cogg490000dctxhglsbdol","tag_id":"ck8cogg540002dctx17wrhcwo","_id":"ck971pqgo0002a4txfvbwhssz"},{"post_id":"ckct0lxc60000qstxej7odmt6","tag_id":"ck94yu0ep00027wtxhqk97mfy","_id":"ckd0z4m2e000s94tx2el45rp9"},{"post_id":"ckd1q02050000hotxcg4f6bpb","tag_id":"ck94yu0ep00027wtxhqk97mfy","_id":"ckd1q020l0001hotx668ehch8"},{"post_id":"ckd31wi9d0000dgtx53m07di7","tag_id":"ck94yu0ep00027wtxhqk97mfy","_id":"ckdcrsrxv0006lotx1gyz6w2b"},{"post_id":"cl6x9g2pn00007ovqcm20fivw","tag_id":"cl6x9g2qq00027ovqgf70hzfn","_id":"cl6x9g2qr00037ovq4zkje4lr"}],"Tag":[{"name":"开篇","_id":"ck5p34sm60000eovqah6x8whi"},{"name":"hahaha","_id":"ck5p36lt40000v8vq9rw75bjr"},{"name":"编程","_id":"ck5p3b9qf00017svqh2azesgf"},{"name":"感悟","_id":"ck5p3b9qf00027svq7j574y66"},{"name":"分享","_id":"ck5qt24f90002zcri41negmp5"},{"name":"小程序思维导图","_id":"ck5t88gqd0002rwricxat8mo9"},{"name":"程序设计语言","_id":"ck6soixn60003d0riahhihr07"},{"name":"程序设计语言，C#","_id":"ck6ta0kuw00078kri48zv4ilg"},{"name":"程序设计语言，csharp","_id":"ck6ta3wzc00013grig9fc1ba6"},{"name":"程序设计语言，C\\#","_id":"ck6ta4hwk00063griba3o5ymq"},{"name":"工具","_id":"ck70h2q7f000278ri797y9hrh"},{"name":"linux","_id":"ck8cogg540002dctx17wrhcwo"},{"name":"WPF","_id":"ck94yu0ep00027wtxhqk97mfy"},{"name":"数学趣味题","_id":"cl6x9g2qq00027ovqgf70hzfn"}]}}