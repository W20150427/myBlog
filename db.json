{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1579679632076},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1579679632077},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1579679632077},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1579679632077},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1579679632077},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1579679632086},{"_id":"source/_posts/hello-world.md","hash":"e6bcde22aba846b37ff2a881e8386a3e5eec2519","modified":1579934500587},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1579679632078},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1579679632078},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1579679632078},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1579679632079},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1579679632079},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1579679632079},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1579679632079},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1579679632080},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1579679632080},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1579679632080},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1579679632080},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1579679632081},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1579679632085},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1579679632085},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1579679632085},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1579679632085},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1579679632086},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1579679632086},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1579679632086},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1579679632114},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1579679632081},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1579679632081},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1579679632081},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1579679632082},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1579679632082},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1579679632082},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1579679632082},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1579679632082},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1579679632083},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1579679632083},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1579679632084},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1579679632084},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1579679632084},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1579679632085},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1579679632085},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1579679632085},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1579679632115},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1579679632118},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1579679632125},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1579679632126},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1579679632126},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1579679632126},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1579679632126},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1579679632127},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1579679632127},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1579679632129},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1579679632129},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1579679632130},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1579679632130},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1579679632083},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1579679632083},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1579679632084},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1579679632083},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1579679632084},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1579679632084},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1579679632115},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1579679632115},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1579679632116},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1579679632115},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1579679632116},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1579679632116},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1579679632117},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1579679632117},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1579679632117},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1579679632117},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1579679632118},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1579679632118},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1579679632119},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1579679632120},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1579679632123},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1579679632128},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1579679632128},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1579679632128},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1579679632128},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1579679632128},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1579679632129},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1579679632122},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1579679632121},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1579679632124},{"_id":"public/2020/01/22/hello-world/index.html","hash":"83258a107e04a80b894322f6d18b144e8a1d0cae","modified":1579684895259},{"_id":"public/archives/index.html","hash":"e405bd1a27b11f0f860186aaee9a3af7dddae666","modified":1582204513559},{"_id":"public/archives/2020/index.html","hash":"854b6c22d0b74f36b737bf6638545811f2f1e8d3","modified":1582204513559},{"_id":"public/archives/2020/01/index.html","hash":"873e966931cb479b5f0c49e4fbf7526f2c07e84b","modified":1582204513559},{"_id":"public/index.html","hash":"d3c9482803a1b9e4eab986537cfbe8bd3fff3c0c","modified":1582204513559},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1579680567281},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1579680567281},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1579680567281},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1579680567281},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1579680567281},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1579680567281},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1579680567281},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1579680567281},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1579680567281},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1579680567281},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1579680567281},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1579680567281},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1579680567281},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1579680567281},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1579680567281},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1579680567281},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1579680567281},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1579680567281},{"_id":"public/css/style.css","hash":"d4cfa90089c78a8b791252afae9fafa3b5658900","modified":1579680567281},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1579680567281},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1579680567281},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1579680567281},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1579680567281},{"_id":"source/_posts/index-html.md","hash":"1e9cfc501eed4321a25d0a589046f147cae28adc","modified":1579680836445},{"_id":"public/2020/01/22/index-html/index.html","hash":"330a485d7c10c07af252acccd2238a513befe11d","modified":1579681617928},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1579681604077},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1579681604077},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1579681604078},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1579681604078},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1579681604079},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1579681604079},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1579681604079},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1579681604079},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1579681604079},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1579681604079},{"_id":"themes/next/README.cn.md","hash":"b878b73f3fcdef47849453c94420871903d487b3","modified":1579681604079},{"_id":"themes/next/README.md","hash":"efcdc4b0ca791c3fc64afa28c8721e137f2d11ea","modified":1579681604080},{"_id":"themes/next/_config.yml","hash":"2f398e39322da8e382a33c99fb78ae7071e0826d","modified":1580992277788},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1579681604080},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1579681604080},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1579681604095},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1579681604078},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1579681604078},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1579681604078},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1579681604078},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1579681604083},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1579681604095},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1579681604095},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1579681604095},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1579681604095},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1579681604095},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1579681604095},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1579681604095},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1579681604080},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1579681604081},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1579681604081},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1579681604081},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1579681604081},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1579681604081},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1579681604082},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1579681604082},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1579681604082},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1579681604082},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1579681604082},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1579681604082},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1579681604082},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1579681604083},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1579681604083},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1579681604083},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1579681604095},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1579681604096},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1579681604158},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1579681604158},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1579681604158},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604115},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1579681604083},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1579681604083},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1579681604086},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1579681604086},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1579681604086},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1579681604086},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1579681604086},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1579681604087},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1579681604087},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1579681604083},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1579681604084},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1579681604084},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1579681604084},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1579681604084},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1579681604085},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1579681604092},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1579681604092},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1579681604092},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1579681604094},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1579681604094},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1579681604094},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1579681604094},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1579681604088},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1579681604088},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1579681604089},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1579681604096},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1579681604096},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1579681604096},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1579681604096},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1579681604097},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1579681604097},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1579681604097},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1579681604097},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1579681604098},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1579681604115},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579681604115},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1579681604115},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1579681604115},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1579681604115},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1579681604116},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1579681604116},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1579681604116},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1579681604117},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1579681604117},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1579681604117},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579681604117},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579681604117},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1579681604117},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1579681604117},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1579681604117},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1579681604117},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1579681604118},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1579681604118},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604089},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604089},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604114},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604115},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604111},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604111},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579681604111},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1579681604086},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1579681604086},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1579681604087},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1579681604088},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1579681604088},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1579681604088},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1579681604088},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1579681604088},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1579681604088},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1579681604089},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1579681604089},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1579681604089},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1579681604089},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1579681604090},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1579681604090},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1579681604091},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1579681604090},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1579681604091},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1579681604091},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1579681604091},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1579681604091},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1579681604091},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1579681604091},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1579681604091},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1579681604092},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1579681604092},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1579681604094},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1579681604094},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1579681604094},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1579681604094},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1579681604089},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1579681604089},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1579681604089},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1579681604110},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1579681604114},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1579681604114},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1579681604114},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1579681604114},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1579681604111},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1579681604111},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1579681604111},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1579681604118},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1579681604118},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1579681604118},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1579681604118},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1579681604118},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1579681604119},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1579681604121},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1579681604121},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1579681604121},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1579681604121},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1579681604121},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1579681604126},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1579681604126},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1579681604124},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1579681604126},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1579681604127},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1579681604132},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1579681604132},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1579681604132},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1579681604132},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1579681604133},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1579681604133},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1579681604133},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1579681604134},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1579681604134},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1579681604145},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1579681604146},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1579681604146},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1579681604146},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1579681604146},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1579681604146},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1579681604148},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1579681604148},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1579681604148},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1579681604149},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1579681604149},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1579681604149},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1579681604149},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1579681604149},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1579681604150},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1579681604151},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1579681604151},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1579681604151},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1579681604151},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1579681604151},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1579681604152},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1579681604152},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1579681604155},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1579681604155},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1579681604157},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1579681604157},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1579681604158},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1579681604146},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1579681604094},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1579681604094},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1579681604098},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1579681604098},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1579681604098},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1579681604098},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1579681604098},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1579681604105},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1579681604109},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1579681604110},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1579681604110},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1579681604110},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1579681604110},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1579681604110},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1579681604110},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1579681604111},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1579681604111},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1579681604111},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1579681604111},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1579681604112},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1579681604112},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1579681604112},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1579681604112},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1579681604114},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1579681604114},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1579681604114},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1579681604114},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1579681604114},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1579681604121},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1579681604123},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1579681604123},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1579681604127},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1579681604127},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1579681604127},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1579681604127},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1579681604127},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1579681604128},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1579681604131},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1579681604131},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1579681604132},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1579681604133},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1579681604133},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1579681604134},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1579681604135},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1579681604134},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1579681604155},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1579681604155},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1579681604122},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1579681604123},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579681604144},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579681604145},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1579681604157},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1579681604099},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1579681604099},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1579681604099},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1579681604099},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1579681604099},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1579681604100},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1579681604101},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1579681604103},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1579681604104},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1579681604104},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1579681604104},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1579681604104},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1579681604105},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1579681604106},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1579681604107},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1579681604109},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1579681604109},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1579681604109},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1579681604109},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1579681604109},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1579681604113},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1579681604112},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1579681604113},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1579681604121},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1579681604121},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1579681604121},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1579681604122},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1579681604122},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1579681604128},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1579681604129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1579681604129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1579681604129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1579681604129},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1579681604131},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1579681604137},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1579681604143},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579681604138},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1579681604126},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1579681604141},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1579681604155},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1582078894303},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1582078894303},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1582078894303},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1582078894303},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1582078894303},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1582078894303},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1582078894303},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1582078894303},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1582078894303},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1582078894303},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1582078894303},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1582078894303},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1582078894303},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1582078894303},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1582078894303},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1582078894303},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1582078894303},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1582078894303},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1582078894303},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1582078894303},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1582078894303},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1582078894303},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1582078894303},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1582078894303},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1582078894303},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1582078894303},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1582078894303},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1582078894303},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1582078894303},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1582078894303},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1582078894303},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1582078894303},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1582078894303},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1582078894303},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1582078894303},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1582078894303},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1582078894303},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1582078894303},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1582078894303},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1582078894303},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1582078894303},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1582078894303},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1582078894303},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1582078894303},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1582078894303},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1582078894303},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1582078894303},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1582078894303},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1582078894303},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1582078894303},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1582078894303},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1582078894303},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1582078894303},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1582078894303},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1582078894303},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1582078894303},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1582078894303},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1582078894303},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1582078894303},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1582078894303},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1582078894303},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1582078894303},{"_id":"public/lib/fastclick/README.html","hash":"b9e008af0866799103e596e2eda466a33d7dde18","modified":1582078894303},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"7eecc5e472416b9870580c53b7ed0c44474ed23a","modified":1582078894303},{"_id":"public/lib/jquery_lazyload/README.html","hash":"9c91bba4263a20004f2c10772d438cfa8312c308","modified":1582078894303},{"_id":"public/css/main.css","hash":"f39c0fad20190c8ce15b0cd212c5d319ea7ef1bf","modified":1582078894303},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1582078894303},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1582078894303},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1582078894303},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1582078894303},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1582078894303},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1582078894303},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1582078894303},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1582078894303},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1582078894303},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1582078894303},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1582078894303},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1582078894303},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1582078894303},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1582078894303},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1582078894303},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1582078894303},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1582078894303},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1582078894303},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1582078894303},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1582078894303},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1582078894303},{"_id":"source/categories/index.md","hash":"f040b3df9f0b5f37c5476d5fbefba7a174d4f6d5","modified":1579686449280},{"_id":"source/about/index.md","hash":"daab37c8c28a09269c63265e4a47023b2dcea6b4","modified":1579788394574},{"_id":"source/tags/index.md","hash":"edb22a2630a350e29c8dc2b0fc0289ce3ab20fb8","modified":1579686449280},{"_id":"public/categories/index.html","hash":"91a86cc07702af0018dc61960c07aac0558cc29e","modified":1582204513559},{"_id":"public/about/index.html","hash":"9066dabd21745ec0c1f9d3af1086800a43ac521e","modified":1582204513559},{"_id":"public/tags/index.html","hash":"b63494cd94df609aeaaf43b87ccf271221c29b35","modified":1582204513559},{"_id":"public/categories/技术/index.html","hash":"e50a1f55a65eb8e132ba7d91ab0af83d3e8008cc","modified":1579789225133},{"_id":"public/tags/编程/index.html","hash":"b25d5488bfb8952b7054e403aa8f489e0d96750a","modified":1579789225133},{"_id":"public/tags/感悟/index.html","hash":"44038dc8f87f87ec5e8930b0649b3d09b40077ff","modified":1579789225133},{"_id":"public/2020/01/23/hello-world/index.html","hash":"dbdcd2195276db87a5d6a98bb7c3c8e155aa084c","modified":1579789225133},{"_id":"public/tags/分享/index.html","hash":"06f6b1d6293d6cf51e7ea8dddae3f1a22ee30057","modified":1579789225133},{"_id":"source/_posts/miniprogrammanual.md","hash":"cb99f66b4dec96bf0bdb5ffcb8d3d7a3d00f51bd","modified":1582029929916},{"_id":"public/2020/01/25/miniprogrammanual/index.html","hash":"dc1d55065a2d2970ce323fcc440317b474daf932","modified":1582204513559},{"_id":"public/categories/小程序/index.html","hash":"18c583b4ea3ab8f2ccdc039da2230162885bc7e4","modified":1582204513559},{"_id":"public/tags/小程序思维导图/index.html","hash":"cb49f0fd753e26fdfda07bf7d45535c211f8dec6","modified":1582204513559},{"_id":"source/_posts/C#grammar.md","hash":"dfe3439a9f60281f1454e38868bcaebeb77117c1","modified":1582079010852},{"_id":"source/_posts/miniprogrammanual - 副本.md","hash":"cb99f66b4dec96bf0bdb5ffcb8d3d7a3d00f51bd","modified":1582029929916},{"_id":"public/2020/02/19/C#grammar/index.html","hash":"369a25070dc32a8a00b4b12493689782f2ae00b4","modified":1582079026123},{"_id":"public/archives/2020/02/index.html","hash":"c3bc456e0659ccb17fa77c948d01f014a375cf8b","modified":1582204513559},{"_id":"public/categories/程序设计语言/index.html","hash":"c6a472e5a7613360a60bccb66f41c2de190df9ac","modified":1582102794220},{"_id":"public/tags/程序设计语言/index.html","hash":"f0a1781e4c099241b5c19cdd761ab2e98bbe3518","modified":1582102794220},{"_id":"source/_posts/Cgrammar.md","hash":"dfe3439a9f60281f1454e38868bcaebeb77117c1","modified":1582079084005},{"_id":"public/2020/02/19/Cgrammar/index.html","hash":"3bf683df008ad4b5ea35988da955b53ffe35f60f","modified":1582079095403},{"_id":"source/_posts/csharpgrammar.md","hash":"e8828255c9bd358bf1790bce5c5a505ba2eb01af","modified":1582101838015},{"_id":"public/2020/02/19/csharpgrammar/index.html","hash":"f501b90c38aefd1bc0f31e817b6f44c0568a5b35","modified":1582101851515},{"_id":"source/_posts/csharpgrammar-2.md","hash":"b90e693fbe704bf2f888aaed0a4924f8d54b921c","modified":1582204607174},{"_id":"source/_posts/csharpgrammar-1.md","hash":"67551f064dbaca58b1c67febd4c92242334d6d9e","modified":1582184634022},{"_id":"public/2020/02/19/csharpgrammar-2/index.html","hash":"066846845516726c978ecc3885bbff2e748e1989","modified":1582204611194},{"_id":"public/2020/02/19/csharpgrammar-1/index.html","hash":"733878941a80c4482afa83c674b787ebcac8e94a","modified":1582120627744},{"_id":"public/tags/程序设计语言，C/index.html","hash":"2b66df74bd8bc91c95ca6798da1abc9ee5bfd57f","modified":1582204513559},{"_id":"public/categories/C-程序设计语言/index.html","hash":"6a879f63818c20191c6ae42291ceef5a45fb296c","modified":1582114423665},{"_id":"public/categories/csharp程序设计语言/index.html","hash":"3cf60e975041fe7abdc2e145f0ee66da68a67749","modified":1582204513559},{"_id":"public/tags/程序设计语言，csharp/index.html","hash":"f1cd4fd358f4904a7ac41dec9d03de8a1c6c4949","modified":1582114545352},{"_id":"source/_posts/csharpgrammar-3.md","hash":"ad169c63a934ab2467b53b2a9ff9ac00b92e90d2","modified":1582186712388},{"_id":"public/2020/02/20/csharpgrammar-3/index.html","hash":"e40c8562ccf7d34eb5e114bbd93be110b877cf02","modified":1582204513559},{"_id":"public/2020/02/18/csharpgrammar-1/index.html","hash":"e76b757021b75bf9632b900bf27bfb54d89b8f77","modified":1582204513559}],"Category":[{"name":"技术","_id":"ck5p3b9qe00007svq7fuzbk4x"},{"name":"技术1","_id":"ck5qt1l4i0000zcri6xdkebil"},{"name":"小程序","_id":"ck5t88gqa0001rwribu4g3scw"},{"name":"开篇","_id":"ck5t88gzd0005rwrihqgc0z79"},{"name":"程序设计语言","_id":"ck6soixn60002d0ri1rk54uzy"},{"name":"C#程序设计语言","_id":"ck6ta05dn00048kri1yui7u0b"},{"name":"csharp程序设计语言","_id":"ck6ta3wza00003griag6r8b8x"}],"Data":[],"Page":[{"title":"categories","date":"2020-01-22T08:54:04.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-01-22 16:54:04\ntype: \"categories\"\n---\n","updated":"2020-01-22T09:47:29.280Z","path":"categories/index.html","_id":"ck5p2mbvn00008cvq96h20t1a","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2020-01-22T09:01:17.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-01-22 17:01:17\ntype: \"about\"\n---\n","updated":"2020-01-23T14:06:34.574Z","path":"about/index.html","_id":"ck5p2w6mt0000y0vqgldp137i","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-01-22T09:01:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-01-22 17:01:25\ntype: \"tags\"\n---\n","updated":"2020-01-22T09:47:29.280Z","path":"tags/index.html","_id":"ck5p2w6my0001y0vqe18kfgn6","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"小程序思维导图","photos":["https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg"],"date":"2020-01-25T06:38:11.000Z","_content":"小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验\n主要介绍小程序开发的一些概念和基础知识，以思维导图的方式呈现。<!-- more -->\n## 起步\n![起步](https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg)\n## 组件\n![组件](https://pic1.zhimg.com/80/v2-dd875a506832356962356206bbca33fc_hd.jpg)\n## 模板和样式\n![模板和样式](https://pic4.zhimg.com/80/v2-a284f0e127881dfc99c4a812cd3455cb_hd.jpg)\n## 组件间通信与事件\n![组件间通信与事件](https://pic4.zhimg.com/80/v2-ef04fce11cac4efed60d7024c3eaf0ef_hd.jpg)\n## 组件生命周期\n![组件生命周期](https://pic1.zhimg.com/80/v2-4c0a75fbe17123068259613ee2decbc4_hd.jpg)\n## behaviors\n![behaviors](https://pic4.zhimg.com/80/v2-f41b0b47c609975d51b8afc888deb5c3_hd.jpg)\n## 组件间的关系\n![组件间的关系](https://pic2.zhimg.com/80/v2-a06d92b6e39b8ed74ef8fee0d6ff63e5_hd.jpg)\n## 数据监听器\n![数据监听器](https://pic1.zhimg.com/80/v2-11047cef626987a57aaaa4e51ab22ee8_hd.jpg)\n## 纯数据字段\n![纯数据字段](https://pic3.zhimg.com/80/v2-a455075b194d83ea80bc4193edc703b6_hd.jpg)\n## 抽象节点\n![纯数据字段](https://pic3.zhimg.com/80/v2-25fa42167805b7a6507250a43e8cdd9e_hd.jpg)\n## 组件扩展\n![组件扩展](https://pic4.zhimg.com/80/v2-b7d8f57aec1269fa233d02872ecf462f_hd.jpg)\n## 小技巧\n![小技巧](https://pic1.zhimg.com/80/v2-8bea8d746829de756bb5895ceb2a20ac_hd.jpg)\n## 插件\n![插件](https://pic1.zhimg.com/80/v2-6527291f3979667154bdd1100f77442c_hd.jpg)","source":"_posts/miniprogrammanual.md","raw":"---\ntitle: 小程序思维导图\nphotos: https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg\ndate: 2020-01-25 14:38:11\ntags: [小程序思维导图]\ncategories: 小程序\n---\n小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验\n主要介绍小程序开发的一些概念和基础知识，以思维导图的方式呈现。<!-- more -->\n## 起步\n![起步](https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg)\n## 组件\n![组件](https://pic1.zhimg.com/80/v2-dd875a506832356962356206bbca33fc_hd.jpg)\n## 模板和样式\n![模板和样式](https://pic4.zhimg.com/80/v2-a284f0e127881dfc99c4a812cd3455cb_hd.jpg)\n## 组件间通信与事件\n![组件间通信与事件](https://pic4.zhimg.com/80/v2-ef04fce11cac4efed60d7024c3eaf0ef_hd.jpg)\n## 组件生命周期\n![组件生命周期](https://pic1.zhimg.com/80/v2-4c0a75fbe17123068259613ee2decbc4_hd.jpg)\n## behaviors\n![behaviors](https://pic4.zhimg.com/80/v2-f41b0b47c609975d51b8afc888deb5c3_hd.jpg)\n## 组件间的关系\n![组件间的关系](https://pic2.zhimg.com/80/v2-a06d92b6e39b8ed74ef8fee0d6ff63e5_hd.jpg)\n## 数据监听器\n![数据监听器](https://pic1.zhimg.com/80/v2-11047cef626987a57aaaa4e51ab22ee8_hd.jpg)\n## 纯数据字段\n![纯数据字段](https://pic3.zhimg.com/80/v2-a455075b194d83ea80bc4193edc703b6_hd.jpg)\n## 抽象节点\n![纯数据字段](https://pic3.zhimg.com/80/v2-25fa42167805b7a6507250a43e8cdd9e_hd.jpg)\n## 组件扩展\n![组件扩展](https://pic4.zhimg.com/80/v2-b7d8f57aec1269fa233d02872ecf462f_hd.jpg)\n## 小技巧\n![小技巧](https://pic1.zhimg.com/80/v2-8bea8d746829de756bb5895ceb2a20ac_hd.jpg)\n## 插件\n![插件](https://pic1.zhimg.com/80/v2-6527291f3979667154bdd1100f77442c_hd.jpg)","slug":"miniprogrammanual","published":1,"updated":"2020-02-18T12:45:29.916Z","comments":1,"layout":"post","link":"","_id":"ck6soqjzl0000qkrifj0f8ar4","content":"<p>小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验<br>主要介绍小程序开发的一些概念和基础知识，以思维导图的方式呈现。<a id=\"more\"></a></p>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p><img src=\"https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg\" alt=\"起步\"></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p><img src=\"https://pic1.zhimg.com/80/v2-dd875a506832356962356206bbca33fc_hd.jpg\" alt=\"组件\"></p>\n<h2 id=\"模板和样式\"><a href=\"#模板和样式\" class=\"headerlink\" title=\"模板和样式\"></a>模板和样式</h2><p><img src=\"https://pic4.zhimg.com/80/v2-a284f0e127881dfc99c4a812cd3455cb_hd.jpg\" alt=\"模板和样式\"></p>\n<h2 id=\"组件间通信与事件\"><a href=\"#组件间通信与事件\" class=\"headerlink\" title=\"组件间通信与事件\"></a>组件间通信与事件</h2><p><img src=\"https://pic4.zhimg.com/80/v2-ef04fce11cac4efed60d7024c3eaf0ef_hd.jpg\" alt=\"组件间通信与事件\"></p>\n<h2 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h2><p><img src=\"https://pic1.zhimg.com/80/v2-4c0a75fbe17123068259613ee2decbc4_hd.jpg\" alt=\"组件生命周期\"></p>\n<h2 id=\"behaviors\"><a href=\"#behaviors\" class=\"headerlink\" title=\"behaviors\"></a>behaviors</h2><p><img src=\"https://pic4.zhimg.com/80/v2-f41b0b47c609975d51b8afc888deb5c3_hd.jpg\" alt=\"behaviors\"></p>\n<h2 id=\"组件间的关系\"><a href=\"#组件间的关系\" class=\"headerlink\" title=\"组件间的关系\"></a>组件间的关系</h2><p><img src=\"https://pic2.zhimg.com/80/v2-a06d92b6e39b8ed74ef8fee0d6ff63e5_hd.jpg\" alt=\"组件间的关系\"></p>\n<h2 id=\"数据监听器\"><a href=\"#数据监听器\" class=\"headerlink\" title=\"数据监听器\"></a>数据监听器</h2><p><img src=\"https://pic1.zhimg.com/80/v2-11047cef626987a57aaaa4e51ab22ee8_hd.jpg\" alt=\"数据监听器\"></p>\n<h2 id=\"纯数据字段\"><a href=\"#纯数据字段\" class=\"headerlink\" title=\"纯数据字段\"></a>纯数据字段</h2><p><img src=\"https://pic3.zhimg.com/80/v2-a455075b194d83ea80bc4193edc703b6_hd.jpg\" alt=\"纯数据字段\"></p>\n<h2 id=\"抽象节点\"><a href=\"#抽象节点\" class=\"headerlink\" title=\"抽象节点\"></a>抽象节点</h2><p><img src=\"https://pic3.zhimg.com/80/v2-25fa42167805b7a6507250a43e8cdd9e_hd.jpg\" alt=\"纯数据字段\"></p>\n<h2 id=\"组件扩展\"><a href=\"#组件扩展\" class=\"headerlink\" title=\"组件扩展\"></a>组件扩展</h2><p><img src=\"https://pic4.zhimg.com/80/v2-b7d8f57aec1269fa233d02872ecf462f_hd.jpg\" alt=\"组件扩展\"></p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><p><img src=\"https://pic1.zhimg.com/80/v2-8bea8d746829de756bb5895ceb2a20ac_hd.jpg\" alt=\"小技巧\"></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p><img src=\"https://pic1.zhimg.com/80/v2-6527291f3979667154bdd1100f77442c_hd.jpg\" alt=\"插件\"></p>\n","site":{"data":{}},"excerpt":"<p>小程序是一种全新的连接用户与服务的方式，它可以在微信内被便捷地获取和传播，同时具有出色的使用体验<br>主要介绍小程序开发的一些概念和基础知识，以思维导图的方式呈现。","more":"</p>\n<h2 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h2><p><img src=\"https://pic2.zhimg.com/v2-40fcc138398143f0b8e3036241c162d1_r.jpg\" alt=\"起步\"></p>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p><img src=\"https://pic1.zhimg.com/80/v2-dd875a506832356962356206bbca33fc_hd.jpg\" alt=\"组件\"></p>\n<h2 id=\"模板和样式\"><a href=\"#模板和样式\" class=\"headerlink\" title=\"模板和样式\"></a>模板和样式</h2><p><img src=\"https://pic4.zhimg.com/80/v2-a284f0e127881dfc99c4a812cd3455cb_hd.jpg\" alt=\"模板和样式\"></p>\n<h2 id=\"组件间通信与事件\"><a href=\"#组件间通信与事件\" class=\"headerlink\" title=\"组件间通信与事件\"></a>组件间通信与事件</h2><p><img src=\"https://pic4.zhimg.com/80/v2-ef04fce11cac4efed60d7024c3eaf0ef_hd.jpg\" alt=\"组件间通信与事件\"></p>\n<h2 id=\"组件生命周期\"><a href=\"#组件生命周期\" class=\"headerlink\" title=\"组件生命周期\"></a>组件生命周期</h2><p><img src=\"https://pic1.zhimg.com/80/v2-4c0a75fbe17123068259613ee2decbc4_hd.jpg\" alt=\"组件生命周期\"></p>\n<h2 id=\"behaviors\"><a href=\"#behaviors\" class=\"headerlink\" title=\"behaviors\"></a>behaviors</h2><p><img src=\"https://pic4.zhimg.com/80/v2-f41b0b47c609975d51b8afc888deb5c3_hd.jpg\" alt=\"behaviors\"></p>\n<h2 id=\"组件间的关系\"><a href=\"#组件间的关系\" class=\"headerlink\" title=\"组件间的关系\"></a>组件间的关系</h2><p><img src=\"https://pic2.zhimg.com/80/v2-a06d92b6e39b8ed74ef8fee0d6ff63e5_hd.jpg\" alt=\"组件间的关系\"></p>\n<h2 id=\"数据监听器\"><a href=\"#数据监听器\" class=\"headerlink\" title=\"数据监听器\"></a>数据监听器</h2><p><img src=\"https://pic1.zhimg.com/80/v2-11047cef626987a57aaaa4e51ab22ee8_hd.jpg\" alt=\"数据监听器\"></p>\n<h2 id=\"纯数据字段\"><a href=\"#纯数据字段\" class=\"headerlink\" title=\"纯数据字段\"></a>纯数据字段</h2><p><img src=\"https://pic3.zhimg.com/80/v2-a455075b194d83ea80bc4193edc703b6_hd.jpg\" alt=\"纯数据字段\"></p>\n<h2 id=\"抽象节点\"><a href=\"#抽象节点\" class=\"headerlink\" title=\"抽象节点\"></a>抽象节点</h2><p><img src=\"https://pic3.zhimg.com/80/v2-25fa42167805b7a6507250a43e8cdd9e_hd.jpg\" alt=\"纯数据字段\"></p>\n<h2 id=\"组件扩展\"><a href=\"#组件扩展\" class=\"headerlink\" title=\"组件扩展\"></a>组件扩展</h2><p><img src=\"https://pic4.zhimg.com/80/v2-b7d8f57aec1269fa233d02872ecf462f_hd.jpg\" alt=\"组件扩展\"></p>\n<h2 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h2><p><img src=\"https://pic1.zhimg.com/80/v2-8bea8d746829de756bb5895ceb2a20ac_hd.jpg\" alt=\"小技巧\"></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p><img src=\"https://pic1.zhimg.com/80/v2-6527291f3979667154bdd1100f77442c_hd.jpg\" alt=\"插件\"></p>"},{"title":"C#关键字","date":"2020-02-17T16:00:00.000Z","_content":"参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\nC#发布于2000年6月，（读作“See Sharp”）是一种简单易用的新式编程语言，不仅面向对象，还类型安全。 C#源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。<!-- more -->\n## 基本\n\n### 关键字\n\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">abstract</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">as</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">bool</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">break</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">byte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">case</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">catch</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">checked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">const</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">continue</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">decimal</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">default</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">delegate</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">do</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">double</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">else</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">enum</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">event</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">explicit</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">extern</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">finally</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">fixed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">float</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">for</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">foreach</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">goto</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">if</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">implicit</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">in</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">int</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">internal</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">is</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">lock</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">long</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">namespace</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">new</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">null</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">object</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">operator</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">out</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">override</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">params</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">private</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">readonly</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ref</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">return</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sbyte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sealed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">short</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sizeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">stackalloc</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">string</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">switch</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">this</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">throw</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">true</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">try</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">typeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">uint</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ulong</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unchecked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unsafe</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ushort</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">virtual</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">void</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">volatile</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">while</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n### 上下文关键字\n \n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">add</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">ascending</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">async</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">await</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">by</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">descending</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">dynamic</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">equals</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">from</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">get</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">global</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">group</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">into</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">join</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">let</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">nameof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">on</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">orderby</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">partial（类型）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">partial（方法）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">remove</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">select</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">set</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">unmanaged（泛型类型约束）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">value</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">var</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">when（筛选条件）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">where（泛型类型约束）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">\twhere（查询子句）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">yield</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n### 运算符\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">运算符</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别或名称</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x.y、x?.y、x?[y]、f(x)、a[i]、x++、x--、new、typeof、checked、unchecked、default、nameof、delegate、sizeof、stackalloc、x->y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">基本</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">+x、-x、!x、~x、++x、--x、^x、(T)x、await、&x、*x、true 和 false</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">一元</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x..y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">范围</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x * y、x / y、x % y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">乘法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x + y、x – y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">加法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x < y、x > y、x <= y、x >= y、is、as</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">关系和类型测试</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x == y、x != y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">相等</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x & y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 AND 或按位逻辑 AND</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x ^ y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 XOR 或按位逻辑 XOR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x | y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 OR 或按位逻辑 OR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x && y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“与”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x || y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“或”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">c ? t : f/td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件运算符</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x = y、x += y、x -= y、x *= y、x /= y、x %= y、x &= y、x |= y、x ^= y、x <<= y、x >>= y、x ??= y、=></td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">赋值和 lambda 声明</td>\n</tr>\n</table>\n\n### 语句\n\n>程序执行的操作采用语句表达。 常见操作包括声明变量、赋值、调用方法、循环访问集合，以及根据给定条件分支到一个或另一个代码块。 语句在程序中的执行顺序称为“控制流”或“执行流”。 根据程序对运行时所收到的输入的响应，在程序每次运行时控制流可能有所不同。\n语句可以是以分号结尾的单行代码，也可以是语句块中的一系列单行语句。 语句块括在括号 {} 中，并且可以包含嵌套块。\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">C# 关键字/说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">声明语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">声明语句引入新的变量或常量。 变量声明可以选择为变量赋值。 在常量声明中必须赋值。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">表达式语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">用于计算值的表达式语句必须在变量中存储该值。 有关详细信息，请参阅表达式语句。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">选择语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">选择语句用于根据一个或多个指定条件分支到不同的代码段。 有关详细信息，请参阅下列主题：if else switch case</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">迭代语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代语句用于遍历集合（如数组），或重复执行同一组语句直到满足指定的条件。 有关详细信息，请参阅下列主题：do for foreach in while</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">跳转语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">跳转语句将控制转移给另一代码段。 有关详细信息，请参阅下列主题：break continue default goto return yield</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">异常处理语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">异常处理语句用于从运行时发生的异常情况正常恢复。 有关详细信息，请参阅下列主题：throw try-catch try-finally try-catch-finally</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">Checked 和 unchecked</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">Checked 和 unchecked 语句用于指定将结果存储在变量中、但该变量过小而不能容纳结果值时，是否允许数值运算导致溢出。 有关详细信息，请参阅 checked 和 unchecked。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">await 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">如果用 async 修饰符标记方法，则可以使用该方法中的 await 运算符。 在控制到达异步方法的 await 表达式时，控制将返回到调用方，该方法中的进程将挂起，直到等待的任务完成为止。 任务完成后，可以在方法中恢复执行。\n\n有关简单示例，请参阅方法的“异步方法”一节。 有关详细信息，请参阅 async 和 await 的异步编程</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">yield return 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代器对集合执行自定义迭代，如列表或数组。 迭代器使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器时，将从该位置重新开始执行。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">fixed 语句\t</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">fixed 语句禁止垃圾回收器重定位可移动的变量。 有关详细信息，请参阅 fixed。/td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">lock 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">lock 语句用于限制一次仅允许一个线程访问代码块。 有关详细信息，请参阅 lock。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">带标签的语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">可以为语句指定一个标签，然后使用 goto 关键字跳转到该带标签的语句。 （参见下一行中的示例。）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">空语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">空语句只含一个分号。 不执行任何操作，可以在需要语句但不需要执行任何操作的地方使用。</td>\n</tr>\n</table>\n<details>\n<summary>展开查看</summary>\n<pre><code>\n局部变量声明\n```csharp\nstatic void Declarations(string[] args)\n{\n    int a;\n    int b = 2, c = 3;\n    a = 1;\n    Console.WriteLine(a + b + c);\n}\n```\n局部常量声明\n```csharp\nstatic void ConstantDeclarations(string[] args)\n{\n    const float pi = 3.1415927f;\n    const int r = 25;\n    Console.WriteLine(pi * r * r);\n}\n```\n表达式语句\n```csharp\nstatic void IfStatement(string[] args)\n{\n    if (args.Length == 0)\n    {\n        Console.WriteLine(\"No arguments\");\n    }\n    else \n    {\n        Console.WriteLine(\"One or more arguments\");\n    }\n}\n```\nif 语句\n```csharp\nstatic void ConstantDeclarations(string[] args)\n{\n    const float pi = 3.1415927f;\n    const int r = 25;\n    Console.WriteLine(pi * r * r);\n}\n```\nswitch 语句\n```csharp\nstatic void SwitchStatement(string[] args)\n{\n    int n = args.Length;\n    switch (n) \n    {\n        case 0:\n            Console.WriteLine(\"No arguments\");\n            break;\n        case 1:\n            Console.WriteLine(\"One argument\");\n            break;\n        default:\n            Console.WriteLine($\"{n} arguments\");\n            break;\n    }\n}\n```\nwhile 语句\n```csharp\nstatic void WhileStatement(string[] args)\n{\n    int i = 0;\n    while (i < args.Length) \n    {\n        Console.WriteLine(args[i]);\n        i++;\n    }\n}\n```\ndo 语句\n```csharp\nstatic void DoStatement(string[] args)\n{\n    string s;\n    do \n    {\n        s = Console.ReadLine();\n        Console.WriteLine(s);\n    } while (!string.IsNullOrEmpty(s));\n}\n```\nfor 语句\n```csharp\nstatic void ForStatement(string[] args)\n{\n    for (int i = 0; i < args.Length; i++) \n    {\n        Console.WriteLine(args[i]);\n    }\n}\n```\nforeach 语句\n```csharp\nstatic void ForEachStatement(string[] args)\n{\n    foreach (string s in args) \n    {\n        Console.WriteLine(s);\n    }\n}\n```\ncontinue 语句\n```csharp\nstatic void ContinueStatement(string[] args)\n{\n    for (int i = 0; i < args.Length; i++) \n    {\n        if (args[i].StartsWith(\"/\")) \n            continue;\n        Console.WriteLine(args[i]);\n    }\n}\n```\ngoto 语句\n```csharp\nstatic void GoToStatement(string[] args)\n{\n    int i = 0;\n    goto check;\n    loop:\n    Console.WriteLine(args[i++]);\n    check:\n    if (i < args.Length) \n        goto loop;\n}\n```\nreturn 语句\n```csharp\nstatic int Add(int a, int b) \n{\n    return a + b;\n}\nstatic void ReturnStatement(string[] args)\n{\n   Console.WriteLine(Add(1, 2));\n   return;\n}\n```\nyield 语句\n```csharp\nstatic System.Collections.Generic.IEnumerable<int> Range(int start, int end) \n{\n    for (int i = start; i < end; i++) \n    {\n        yield return i;\n    }\n    yield break;\n}\nstatic void YieldStatement(string[] args)\n{\n    foreach (int i in Range(-10,10)) \n    {\n        Console.WriteLine(i);\n    }\n}\n```\nthrow 和 try 语句\n```csharp\nstatic double Divide(double x, double y) \n{\n    if (y == 0) \n        throw new DivideByZeroException();\n    return x / y;\n}\nstatic void TryCatch(string[] args) \n{\n    try \n    {\n        if (args.Length != 2) \n        {\n            throw new InvalidOperationException(\"Two numbers required\");\n        }\n        double x = double.Parse(args[0]);\n        double y = double.Parse(args[1]);\n        Console.WriteLine(Divide(x, y));\n    }\n    catch (InvalidOperationException e) \n    {\n        Console.WriteLine(e.Message);\n    }\n    finally \n    {\n        Console.WriteLine(\"Good bye!\");\n    }\n}\n```\nchecked 和 unchecked 语句\n```csharp\nstatic void CheckedUnchecked(string[] args) \n{\n    int x = int.MaxValue;\n    unchecked \n    {\n        Console.WriteLine(x + 1);  // Overflow\n    }\n    checked \n    {\n        Console.WriteLine(x + 1);  // Exception\n    }     \n}\n```\nlock 语句\n```csharp\nclass Account\n{\n    decimal balance;\n    private readonly object sync = new object();\n    public void Withdraw(decimal amount) \n    {\n        lock (sync) \n        {\n            if (amount > balance) \n            {\n                throw new Exception(\n                    \"Insufficient funds\");\n            }\n            balance -= amount;\n        }\n    }\n}\n```\nusing 语句\n```csharp\nstatic void UsingStatement(string[] args) \n{\n    using (TextWriter w = File.CreateText(\"test.txt\")) \n    {\n        w.WriteLine(\"Line one\");\n        w.WriteLine(\"Line two\");\n        w.WriteLine(\"Line three\");\n    }\n}\n```\n</code></pre>\n</details>\n","source":"_posts/csharpgrammar-1.md","raw":"---\ntitle: C#关键字\ndate: 2020-02-18\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\nC#发布于2000年6月，（读作“See Sharp”）是一种简单易用的新式编程语言，不仅面向对象，还类型安全。 C#源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。<!-- more -->\n## 基本\n\n### 关键字\n\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">abstract</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">as</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">bool</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">break</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">byte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">case</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">catch</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">checked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">const</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">continue</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">decimal</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">default</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">delegate</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">do</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">double</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">else</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">enum</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">event</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">explicit</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">extern</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">finally</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">fixed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">float</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">for</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">foreach</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">goto</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">if</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">implicit</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">in</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">int</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">internal</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">is</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">lock</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">long</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">namespace</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">new</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">null</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">object</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">operator</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">out</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">override</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">params</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">private</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">readonly</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ref</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">return</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sbyte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sealed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">short</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sizeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">stackalloc</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">string</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">switch</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">this</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">throw</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">true</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">try</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">typeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">uint</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ulong</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unchecked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unsafe</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ushort</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">virtual</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">void</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">volatile</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">while</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n### 上下文关键字\n \n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">add</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">ascending</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">async</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">await</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">by</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">descending</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">dynamic</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">equals</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">from</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">get</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">global</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">group</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">into</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">join</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">let</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">nameof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">on</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">orderby</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">partial（类型）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">partial（方法）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">remove</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">select</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">set</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">unmanaged（泛型类型约束）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">value</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">var</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">when（筛选条件）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">where（泛型类型约束）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">\twhere（查询子句）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">yield</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n### 运算符\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">运算符</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别或名称</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x.y、x?.y、x?[y]、f(x)、a[i]、x++、x--、new、typeof、checked、unchecked、default、nameof、delegate、sizeof、stackalloc、x->y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">基本</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">+x、-x、!x、~x、++x、--x、^x、(T)x、await、&x、*x、true 和 false</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">一元</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x..y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">范围</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x * y、x / y、x % y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">乘法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x + y、x – y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">加法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x < y、x > y、x <= y、x >= y、is、as</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">关系和类型测试</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x == y、x != y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">相等</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x & y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 AND 或按位逻辑 AND</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x ^ y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 XOR 或按位逻辑 XOR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x | y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 OR 或按位逻辑 OR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x && y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“与”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x || y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“或”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">c ? t : f/td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件运算符</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x = y、x += y、x -= y、x *= y、x /= y、x %= y、x &= y、x |= y、x ^= y、x <<= y、x >>= y、x ??= y、=></td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">赋值和 lambda 声明</td>\n</tr>\n</table>\n\n### 语句\n\n>程序执行的操作采用语句表达。 常见操作包括声明变量、赋值、调用方法、循环访问集合，以及根据给定条件分支到一个或另一个代码块。 语句在程序中的执行顺序称为“控制流”或“执行流”。 根据程序对运行时所收到的输入的响应，在程序每次运行时控制流可能有所不同。\n语句可以是以分号结尾的单行代码，也可以是语句块中的一系列单行语句。 语句块括在括号 {} 中，并且可以包含嵌套块。\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">C# 关键字/说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">声明语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">声明语句引入新的变量或常量。 变量声明可以选择为变量赋值。 在常量声明中必须赋值。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">表达式语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">用于计算值的表达式语句必须在变量中存储该值。 有关详细信息，请参阅表达式语句。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">选择语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">选择语句用于根据一个或多个指定条件分支到不同的代码段。 有关详细信息，请参阅下列主题：if else switch case</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">迭代语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代语句用于遍历集合（如数组），或重复执行同一组语句直到满足指定的条件。 有关详细信息，请参阅下列主题：do for foreach in while</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">跳转语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">跳转语句将控制转移给另一代码段。 有关详细信息，请参阅下列主题：break continue default goto return yield</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">异常处理语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">异常处理语句用于从运行时发生的异常情况正常恢复。 有关详细信息，请参阅下列主题：throw try-catch try-finally try-catch-finally</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">Checked 和 unchecked</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">Checked 和 unchecked 语句用于指定将结果存储在变量中、但该变量过小而不能容纳结果值时，是否允许数值运算导致溢出。 有关详细信息，请参阅 checked 和 unchecked。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">await 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">如果用 async 修饰符标记方法，则可以使用该方法中的 await 运算符。 在控制到达异步方法的 await 表达式时，控制将返回到调用方，该方法中的进程将挂起，直到等待的任务完成为止。 任务完成后，可以在方法中恢复执行。\n\n有关简单示例，请参阅方法的“异步方法”一节。 有关详细信息，请参阅 async 和 await 的异步编程</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">yield return 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代器对集合执行自定义迭代，如列表或数组。 迭代器使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器时，将从该位置重新开始执行。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">fixed 语句\t</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">fixed 语句禁止垃圾回收器重定位可移动的变量。 有关详细信息，请参阅 fixed。/td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">lock 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">lock 语句用于限制一次仅允许一个线程访问代码块。 有关详细信息，请参阅 lock。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">带标签的语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">可以为语句指定一个标签，然后使用 goto 关键字跳转到该带标签的语句。 （参见下一行中的示例。）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">空语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">空语句只含一个分号。 不执行任何操作，可以在需要语句但不需要执行任何操作的地方使用。</td>\n</tr>\n</table>\n<details>\n<summary>展开查看</summary>\n<pre><code>\n局部变量声明\n```csharp\nstatic void Declarations(string[] args)\n{\n    int a;\n    int b = 2, c = 3;\n    a = 1;\n    Console.WriteLine(a + b + c);\n}\n```\n局部常量声明\n```csharp\nstatic void ConstantDeclarations(string[] args)\n{\n    const float pi = 3.1415927f;\n    const int r = 25;\n    Console.WriteLine(pi * r * r);\n}\n```\n表达式语句\n```csharp\nstatic void IfStatement(string[] args)\n{\n    if (args.Length == 0)\n    {\n        Console.WriteLine(\"No arguments\");\n    }\n    else \n    {\n        Console.WriteLine(\"One or more arguments\");\n    }\n}\n```\nif 语句\n```csharp\nstatic void ConstantDeclarations(string[] args)\n{\n    const float pi = 3.1415927f;\n    const int r = 25;\n    Console.WriteLine(pi * r * r);\n}\n```\nswitch 语句\n```csharp\nstatic void SwitchStatement(string[] args)\n{\n    int n = args.Length;\n    switch (n) \n    {\n        case 0:\n            Console.WriteLine(\"No arguments\");\n            break;\n        case 1:\n            Console.WriteLine(\"One argument\");\n            break;\n        default:\n            Console.WriteLine($\"{n} arguments\");\n            break;\n    }\n}\n```\nwhile 语句\n```csharp\nstatic void WhileStatement(string[] args)\n{\n    int i = 0;\n    while (i < args.Length) \n    {\n        Console.WriteLine(args[i]);\n        i++;\n    }\n}\n```\ndo 语句\n```csharp\nstatic void DoStatement(string[] args)\n{\n    string s;\n    do \n    {\n        s = Console.ReadLine();\n        Console.WriteLine(s);\n    } while (!string.IsNullOrEmpty(s));\n}\n```\nfor 语句\n```csharp\nstatic void ForStatement(string[] args)\n{\n    for (int i = 0; i < args.Length; i++) \n    {\n        Console.WriteLine(args[i]);\n    }\n}\n```\nforeach 语句\n```csharp\nstatic void ForEachStatement(string[] args)\n{\n    foreach (string s in args) \n    {\n        Console.WriteLine(s);\n    }\n}\n```\ncontinue 语句\n```csharp\nstatic void ContinueStatement(string[] args)\n{\n    for (int i = 0; i < args.Length; i++) \n    {\n        if (args[i].StartsWith(\"/\")) \n            continue;\n        Console.WriteLine(args[i]);\n    }\n}\n```\ngoto 语句\n```csharp\nstatic void GoToStatement(string[] args)\n{\n    int i = 0;\n    goto check;\n    loop:\n    Console.WriteLine(args[i++]);\n    check:\n    if (i < args.Length) \n        goto loop;\n}\n```\nreturn 语句\n```csharp\nstatic int Add(int a, int b) \n{\n    return a + b;\n}\nstatic void ReturnStatement(string[] args)\n{\n   Console.WriteLine(Add(1, 2));\n   return;\n}\n```\nyield 语句\n```csharp\nstatic System.Collections.Generic.IEnumerable<int> Range(int start, int end) \n{\n    for (int i = start; i < end; i++) \n    {\n        yield return i;\n    }\n    yield break;\n}\nstatic void YieldStatement(string[] args)\n{\n    foreach (int i in Range(-10,10)) \n    {\n        Console.WriteLine(i);\n    }\n}\n```\nthrow 和 try 语句\n```csharp\nstatic double Divide(double x, double y) \n{\n    if (y == 0) \n        throw new DivideByZeroException();\n    return x / y;\n}\nstatic void TryCatch(string[] args) \n{\n    try \n    {\n        if (args.Length != 2) \n        {\n            throw new InvalidOperationException(\"Two numbers required\");\n        }\n        double x = double.Parse(args[0]);\n        double y = double.Parse(args[1]);\n        Console.WriteLine(Divide(x, y));\n    }\n    catch (InvalidOperationException e) \n    {\n        Console.WriteLine(e.Message);\n    }\n    finally \n    {\n        Console.WriteLine(\"Good bye!\");\n    }\n}\n```\nchecked 和 unchecked 语句\n```csharp\nstatic void CheckedUnchecked(string[] args) \n{\n    int x = int.MaxValue;\n    unchecked \n    {\n        Console.WriteLine(x + 1);  // Overflow\n    }\n    checked \n    {\n        Console.WriteLine(x + 1);  // Exception\n    }     \n}\n```\nlock 语句\n```csharp\nclass Account\n{\n    decimal balance;\n    private readonly object sync = new object();\n    public void Withdraw(decimal amount) \n    {\n        lock (sync) \n        {\n            if (amount > balance) \n            {\n                throw new Exception(\n                    \"Insufficient funds\");\n            }\n            balance -= amount;\n        }\n    }\n}\n```\nusing 语句\n```csharp\nstatic void UsingStatement(string[] args) \n{\n    using (TextWriter w = File.CreateText(\"test.txt\")) \n    {\n        w.WriteLine(\"Line one\");\n        w.WriteLine(\"Line two\");\n        w.WriteLine(\"Line three\");\n    }\n}\n```\n</code></pre>\n</details>\n","slug":"csharpgrammar-1","published":1,"updated":"2020-02-20T07:43:54.022Z","_id":"ck6t31wmr0003j0rickq2cqvb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a><br>C#发布于2000年6月，（读作“See Sharp”）是一种简单易用的新式编程语言，不仅面向对象，还类型安全。 C#源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。<a id=\"more\"></a></p>\n<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">abstract</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">as</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">bool</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">break</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">byte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">case</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">catch</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">checked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">const</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">continue</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">decimal</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">default</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">delegate</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">do</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">double</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">else</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">enum</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">event</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">explicit</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">extern</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">finally</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">fixed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">float</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">for</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">foreach</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">goto</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">if</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">implicit</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">in</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">int</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">internal</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">is</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">lock</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">long</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">namespace</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">new</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">null</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">object</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">operator</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">out</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">override</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">params</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">private</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">readonly</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ref</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">return</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sbyte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sealed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">short</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sizeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">stackalloc</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">string</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">switch</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">this</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">throw</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">true</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">try</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">typeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">uint</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ulong</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unchecked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unsafe</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ushort</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">virtual</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">void</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">volatile</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">while</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n<h3 id=\"上下文关键字\"><a href=\"#上下文关键字\" class=\"headerlink\" title=\"上下文关键字\"></a>上下文关键字</h3><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">add</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">ascending</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">async</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">await</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">by</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">descending</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">dynamic</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">equals</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">from</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">get</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">global</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">group</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">into</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">join</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">let</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">nameof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">on</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">orderby</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">partial（类型）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">partial（方法）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">remove</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">select</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">set</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">unmanaged（泛型类型约束）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">value</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">var</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">when（筛选条件）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">where（泛型类型约束）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">    where（查询子句）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">yield</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">运算符</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别或名称</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x.y、x?.y、x?[y]、f(x)、a[i]、x++、x--、new、typeof、checked、unchecked、default、nameof、delegate、sizeof、stackalloc、x->y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">基本</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">+x、-x、!x、~x、++x、--x、^x、(T)x、await、&x、*x、true 和 false</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">一元</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x..y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">范围</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x * y、x / y、x % y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">乘法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x + y、x – y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">加法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x < y、x > y、x <= y、x >= y、is、as</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">关系和类型测试</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x == y、x != y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">相等</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x & y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 AND 或按位逻辑 AND</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x ^ y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 XOR 或按位逻辑 XOR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x | y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 OR 或按位逻辑 OR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x && y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“与”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x || y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“或”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">c ? t : f/td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件运算符</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x = y、x += y、x -= y、x *= y、x /= y、x %= y、x &= y、x |= y、x ^= y、x <<= y、x >>= y、x ??= y、=></td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">赋值和 lambda 声明</td>\n</tr>\n</table>\n\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><blockquote>\n<p>程序执行的操作采用语句表达。 常见操作包括声明变量、赋值、调用方法、循环访问集合，以及根据给定条件分支到一个或另一个代码块。 语句在程序中的执行顺序称为“控制流”或“执行流”。 根据程序对运行时所收到的输入的响应，在程序每次运行时控制流可能有所不同。<br>语句可以是以分号结尾的单行代码，也可以是语句块中的一系列单行语句。 语句块括在括号 {} 中，并且可以包含嵌套块。</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">C# 关键字/说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">声明语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">声明语句引入新的变量或常量。 变量声明可以选择为变量赋值。 在常量声明中必须赋值。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">表达式语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">用于计算值的表达式语句必须在变量中存储该值。 有关详细信息，请参阅表达式语句。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">选择语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">选择语句用于根据一个或多个指定条件分支到不同的代码段。 有关详细信息，请参阅下列主题：if else switch case</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">迭代语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代语句用于遍历集合（如数组），或重复执行同一组语句直到满足指定的条件。 有关详细信息，请参阅下列主题：do for foreach in while</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">跳转语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">跳转语句将控制转移给另一代码段。 有关详细信息，请参阅下列主题：break continue default goto return yield</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">异常处理语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">异常处理语句用于从运行时发生的异常情况正常恢复。 有关详细信息，请参阅下列主题：throw try-catch try-finally try-catch-finally</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">Checked 和 unchecked</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">Checked 和 unchecked 语句用于指定将结果存储在变量中、但该变量过小而不能容纳结果值时，是否允许数值运算导致溢出。 有关详细信息，请参阅 checked 和 unchecked。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">await 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">如果用 async 修饰符标记方法，则可以使用该方法中的 await 运算符。 在控制到达异步方法的 await 表达式时，控制将返回到调用方，该方法中的进程将挂起，直到等待的任务完成为止。 任务完成后，可以在方法中恢复执行。\n\n<p>有关简单示例，请参阅方法的“异步方法”一节。 有关详细信息，请参阅 async 和 await 的异步编程</td></p>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">yield return 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代器对集合执行自定义迭代，如列表或数组。 迭代器使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器时，将从该位置重新开始执行。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">fixed 语句    </td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">fixed 语句禁止垃圾回收器重定位可移动的变量。 有关详细信息，请参阅 fixed。/td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">lock 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">lock 语句用于限制一次仅允许一个线程访问代码块。 有关详细信息，请参阅 lock。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">带标签的语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">可以为语句指定一个标签，然后使用 goto 关键字跳转到该带标签的语句。 （参见下一行中的示例。）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">空语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">空语句只含一个分号。 不执行任何操作，可以在需要语句但不需要执行任何操作的地方使用。</td>\n</tr>\n</table>\n<details>\n<summary>展开查看</summary>\n<pre><code>\n局部变量声明\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Declarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br><span class=\"line\">    a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Console.WriteLine(a + b + c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n局部常量声明\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConstantDeclarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> pi = <span class=\"number\">3.1415927f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r = <span class=\"number\">25</span>;</span><br><span class=\"line\">    Console.WriteLine(pi * r * r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n表达式语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">IfStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"No arguments\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"One or more arguments\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nif 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConstantDeclarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> pi = <span class=\"number\">3.1415927f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r = <span class=\"number\">25</span>;</span><br><span class=\"line\">    Console.WriteLine(pi * r * r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nswitch 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SwitchStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = args.Length;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (n) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"No arguments\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"One argument\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;n&#125;</span> arguments\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nwhile 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WhileStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; args.Length) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\ndo 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DoStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s = Console.ReadLine();</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(s));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nfor 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ForStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.Length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nforeach 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ForEachStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> s <span class=\"keyword\">in</span> args) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\ncontinue 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ContinueStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.Length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args[i].StartsWith(<span class=\"string\">\"/\"</span>)) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\ngoto 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">GoToStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> check;</span><br><span class=\"line\">    loop:</span><br><span class=\"line\">    Console.WriteLine(args[i++]);</span><br><span class=\"line\">    check:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; args.Length) </span><br><span class=\"line\">        <span class=\"keyword\">goto</span> loop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nreturn 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ReturnStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   Console.WriteLine(Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nyield 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> System.Collections.Generic.<span class=\"function\">IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">Range</span>(<span class=\"params\"><span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">YieldStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> <span class=\"title\">Range</span>(<span class=\"params\"><span class=\"number\">-10</span>,<span class=\"number\">10</span></span>)) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Console.WriteLine(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nthrow 和 try 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">Divide</span>(<span class=\"params\"><span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y == <span class=\"number\">0</span>) </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DivideByZeroException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TryCatch</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.Length != <span class=\"number\">2</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">\"Two numbers required\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> x = <span class=\"keyword\">double</span>.Parse(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">double</span> y = <span class=\"keyword\">double</span>.Parse(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        Console.WriteLine(Divide(x, y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (InvalidOperationException e) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(e.Message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"Good bye!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nchecked 和 unchecked 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CheckedUnchecked</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"keyword\">int</span>.MaxValue;</span><br><span class=\"line\">    <span class=\"keyword\">unchecked</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(x + <span class=\"number\">1</span>);  <span class=\"comment\">// Overflow</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">checked</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(x + <span class=\"number\">1</span>);  <span class=\"comment\">// Exception</span></span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nlock 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">decimal</span> balance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> sync = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Withdraw</span>(<span class=\"params\"><span class=\"keyword\">decimal</span> amount</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (sync) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (amount &gt; balance) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(</span><br><span class=\"line\">                    <span class=\"string\">\"Insufficient funds\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            balance -= amount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nusing 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UsingStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (TextWriter w = File.CreateText(<span class=\"string\">\"test.txt\"</span>)) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line one\"</span>);</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line two\"</span>);</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line three\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</details>\n","site":{"data":{}},"excerpt":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a><br>C#发布于2000年6月，（读作“See Sharp”）是一种简单易用的新式编程语言，不仅面向对象，还类型安全。 C#源于 C 语言系列，C、C++、Java 和 JavaScript 程序员很快就可以上手使用。","more":"</p>\n<h2 id=\"基本\"><a href=\"#基本\" class=\"headerlink\" title=\"基本\"></a>基本</h2><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">abstract</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">as</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">bool</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">break</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">byte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">case</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">catch</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">checked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">class</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">const</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">continue</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">decimal</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">default</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">delegate</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">do</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">double</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">else</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">enum</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">event</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">explicit</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">extern</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">finally</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">fixed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">float</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">for</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">foreach</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">goto</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">if</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">implicit</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">in</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">int</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">interface</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">internal</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">is</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">lock</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">long</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">namespace</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">new</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">null</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">object</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">operator</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">out</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">override</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">params</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">private</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">protected</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">public</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">readonly</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ref</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">return</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sbyte</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sealed</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">short</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">sizeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">stackalloc</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">string</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">struct</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">switch</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">this</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">throw</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">true</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">try</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">typeof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">uint</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ulong</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unchecked</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">unsafe</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">ushort</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">using static</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">virtual</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">void</td>\n</tr>\n<tr>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">volatile</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">while</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n<h3 id=\"上下文关键字\"><a href=\"#上下文关键字\" class=\"headerlink\" title=\"上下文关键字\"></a>上下文关键字</h3><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">add</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">ascending</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">base</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">async</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">await</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">by</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">descending</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">dynamic</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">equals</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">from</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">get</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">global</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">group</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">into</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">join</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">let</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">nameof</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">on</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">orderby</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">partial（类型）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">partial（方法）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">remove</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">select</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">set</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">unmanaged（泛型类型约束）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">value</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">var</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">when（筛选条件）</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\">where（泛型类型约束）</td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\">    where（查询子句）</td>\n</tr>\n<tr>\n<td style=\"width:35%;border-left:0px;border-right:0px;\">yield</td>\n<td style=\"width:40%;border-left:0px;border-right:0px;\"></td>\n<td style=\"width:25%;border-left:0px;border-right:0px;\"></td>\n</tr>\n</table>\n\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">运算符</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别或名称</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x.y、x?.y、x?[y]、f(x)、a[i]、x++、x--、new、typeof、checked、unchecked、default、nameof、delegate、sizeof、stackalloc、x->y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">基本</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">+x、-x、!x、~x、++x、--x、^x、(T)x、await、&x、*x、true 和 false</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">一元</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x..y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">范围</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x * y、x / y、x % y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">乘法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x + y、x – y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">加法</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x < y、x > y、x <= y、x >= y、is、as</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">关系和类型测试</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x == y、x != y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">相等</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x & y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 AND 或按位逻辑 AND</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x ^ y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 XOR 或按位逻辑 XOR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x | y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">布尔逻辑 OR 或按位逻辑 OR</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x && y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“与”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x || y</td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件“或”</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">c ? t : f/td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">条件运算符</td>\n</tr>\n<tr>\n<td style=\"width:80%;border-left:0px;border-right:0px;\">x = y、x += y、x -= y、x *= y、x /= y、x %= y、x &= y、x |= y、x ^= y、x <<= y、x >>= y、x ??= y、=></td>\n<td style=\"width:20%;border-left:0px;border-right:0px;\">赋值和 lambda 声明</td>\n</tr>\n</table>\n\n<h3 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h3><blockquote>\n<p>程序执行的操作采用语句表达。 常见操作包括声明变量、赋值、调用方法、循环访问集合，以及根据给定条件分支到一个或另一个代码块。 语句在程序中的执行顺序称为“控制流”或“执行流”。 根据程序对运行时所收到的输入的响应，在程序每次运行时控制流可能有所不同。<br>语句可以是以分号结尾的单行代码，也可以是语句块中的一系列单行语句。 语句块括在括号 {} 中，并且可以包含嵌套块。</p>\n</blockquote>\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类别</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">C# 关键字/说明</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">声明语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">声明语句引入新的变量或常量。 变量声明可以选择为变量赋值。 在常量声明中必须赋值。\n</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">表达式语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">用于计算值的表达式语句必须在变量中存储该值。 有关详细信息，请参阅表达式语句。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">选择语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">选择语句用于根据一个或多个指定条件分支到不同的代码段。 有关详细信息，请参阅下列主题：if else switch case</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">迭代语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代语句用于遍历集合（如数组），或重复执行同一组语句直到满足指定的条件。 有关详细信息，请参阅下列主题：do for foreach in while</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">跳转语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">跳转语句将控制转移给另一代码段。 有关详细信息，请参阅下列主题：break continue default goto return yield</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">异常处理语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">异常处理语句用于从运行时发生的异常情况正常恢复。 有关详细信息，请参阅下列主题：throw try-catch try-finally try-catch-finally</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">Checked 和 unchecked</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">Checked 和 unchecked 语句用于指定将结果存储在变量中、但该变量过小而不能容纳结果值时，是否允许数值运算导致溢出。 有关详细信息，请参阅 checked 和 unchecked。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">await 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">如果用 async 修饰符标记方法，则可以使用该方法中的 await 运算符。 在控制到达异步方法的 await 表达式时，控制将返回到调用方，该方法中的进程将挂起，直到等待的任务完成为止。 任务完成后，可以在方法中恢复执行。\n\n<p>有关简单示例，请参阅方法的“异步方法”一节。 有关详细信息，请参阅 async 和 await 的异步编程</td></p>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">yield return 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">迭代器对集合执行自定义迭代，如列表或数组。 迭代器使用 yield return 语句返回元素，每次返回一个。 到达 yield return 语句时，会记住当前在代码中的位置。 下次调用迭代器时，将从该位置重新开始执行。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">fixed 语句    </td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">fixed 语句禁止垃圾回收器重定位可移动的变量。 有关详细信息，请参阅 fixed。/td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">lock 语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">lock 语句用于限制一次仅允许一个线程访问代码块。 有关详细信息，请参阅 lock。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">带标签的语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">可以为语句指定一个标签，然后使用 goto 关键字跳转到该带标签的语句。 （参见下一行中的示例。）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">空语句</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">空语句只含一个分号。 不执行任何操作，可以在需要语句但不需要执行任何操作的地方使用。</td>\n</tr>\n</table>\n<details>\n<summary>展开查看</summary>\n<pre><code>\n局部变量声明\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Declarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>, c = <span class=\"number\">3</span>;</span><br><span class=\"line\">    a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    Console.WriteLine(a + b + c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n局部常量声明\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConstantDeclarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> pi = <span class=\"number\">3.1415927f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r = <span class=\"number\">25</span>;</span><br><span class=\"line\">    Console.WriteLine(pi * r * r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n表达式语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">IfStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.Length == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"No arguments\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"One or more arguments\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nif 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConstantDeclarations</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">float</span> pi = <span class=\"number\">3.1415927f</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> r = <span class=\"number\">25</span>;</span><br><span class=\"line\">    Console.WriteLine(pi * r * r);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nswitch 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">SwitchStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = args.Length;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (n) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"No arguments\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">\"One argument\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            Console.WriteLine(<span class=\"string\">$\"<span class=\"subst\">&#123;n&#125;</span> arguments\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nwhile 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">WhileStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; args.Length) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\ndo 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DoStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">string</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        s = Console.ReadLine();</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (!<span class=\"keyword\">string</span>.IsNullOrEmpty(s));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nfor 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ForStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.Length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nforeach 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ForEachStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">string</span> s <span class=\"keyword\">in</span> args) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\ncontinue 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ContinueStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; args.Length; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args[i].StartsWith(<span class=\"string\">\"/\"</span>)) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        Console.WriteLine(args[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\ngoto 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">GoToStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> check;</span><br><span class=\"line\">    loop:</span><br><span class=\"line\">    Console.WriteLine(args[i++]);</span><br><span class=\"line\">    check:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; args.Length) </span><br><span class=\"line\">        <span class=\"keyword\">goto</span> loop;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nreturn 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ReturnStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   Console.WriteLine(Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">   <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nyield 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> System.Collections.Generic.<span class=\"function\">IEnumerable&lt;<span class=\"keyword\">int</span>&gt; <span class=\"title\">Range</span>(<span class=\"params\"><span class=\"keyword\">int</span> start, <span class=\"keyword\">int</span> end</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = start; i &lt; end; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">YieldStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">int</span> i <span class=\"keyword\">in</span> <span class=\"title\">Range</span>(<span class=\"params\"><span class=\"number\">-10</span>,<span class=\"number\">10</span></span>)) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        Console.WriteLine(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nthrow 和 try 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">Divide</span>(<span class=\"params\"><span class=\"keyword\">double</span> x, <span class=\"keyword\">double</span> y</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (y == <span class=\"number\">0</span>) </span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> DivideByZeroException();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x / y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">TryCatch</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args.Length != <span class=\"number\">2</span>) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">\"Two numbers required\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">double</span> x = <span class=\"keyword\">double</span>.Parse(args[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">double</span> y = <span class=\"keyword\">double</span>.Parse(args[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        Console.WriteLine(Divide(x, y));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (InvalidOperationException e) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(e.Message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">\"Good bye!\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nchecked 和 unchecked 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CheckedUnchecked</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"keyword\">int</span>.MaxValue;</span><br><span class=\"line\">    <span class=\"keyword\">unchecked</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(x + <span class=\"number\">1</span>);  <span class=\"comment\">// Overflow</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">checked</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(x + <span class=\"number\">1</span>);  <span class=\"comment\">// Exception</span></span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nlock 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">decimal</span> balance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">object</span> sync = <span class=\"keyword\">new</span> <span class=\"keyword\">object</span>();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Withdraw</span>(<span class=\"params\"><span class=\"keyword\">decimal</span> amount</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">lock</span> (sync) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (amount &gt; balance) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(</span><br><span class=\"line\">                    <span class=\"string\">\"Insufficient funds\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            balance -= amount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\nusing 语句\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UsingStatement</span>(<span class=\"params\"><span class=\"keyword\">string</span>[] args</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (TextWriter w = File.CreateText(<span class=\"string\">\"test.txt\"</span>)) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line one\"</span>);</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line two\"</span>);</span><br><span class=\"line\">        w.WriteLine(<span class=\"string\">\"Line three\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</details>"},{"title":"C#1.0语法","date":"2020-02-19T16:00:00.000Z","_content":"C#1.0语法\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n## <span style=\"color:#0366d6;\">C# 1.0</span>\n## <span style=\"color:#0366d6;\">数据类型</span>\n\n<details>\n<summary>展开查看</summary>\n\n* 值类型\n  * 简单类型\n    * 有符号的整型：sbyte、short、int、long\n    * 无符号的整型：byte、ushort、uint、ulong\n    * Unicode 字符：char\n    * IEEE 二进制浮点：float、double\n    * 高精度十进制浮点数：decimal\n    * 布尔：bool\n  * 枚举类型\n    * 格式为 enum E {...} 的用户定义类型\n  * 结构类型\n    * 格式为 struct S {...} 的用户定义类型\n  * 可以为 null 的值类型\n    * 值为 null 的其他所有值类型的扩展\n* 引用类型\n  * 类类型\n    * 其他所有类型的最终基类：object\n    * Unicode 字符串：string\n    * 格式为 class C {...} 的用户定义类型\n  * 接口类型\n    * 格式为 interface I {...} 的用户定义类型\n* 数组类型\n  * 一维和多维，例如 int[] 和 int[,]\n* 委托类型\n  * 格式为 delegate int D(...) 的用户定义类型\n</details> \n\n## <span style=\"color:#0366d6;\">语言元素</span>\n<details>\n<summary>展开查看</summary>\n\n* 程序结构\n  * 了解 C# 语言中的关键组织概念：程序、命名空间、类型、成员和程序集。\n* 类型和变量\n  * 了解 C# 语言中的值类型、引用类型和变量。\n* 表达式\n  * 表达式是在操作数和运算符的基础之上构造而成。 表达式生成的是值。\n* 语句\n  * 语句用于表示程序的操作。\n* 类和对象\n  * 类是最基本的 C# 类型。 对象是类实例。 类是使用成员生成的，此主题也对此进行了介绍。\n* 结构\n  * 与类不同，结构是属于值类型的数据结构。\n* 数组\n  * 数组是一种数据结构，其中包含许多通过计算索引访问的变量。\n* 接口\n  * 接口定义了可由类和结构实现的协定。 接口可以包含方法、属性、事件和索引器。 接口不提供所定义的成员的实现代码，仅指定必须由实现接口的类或结构提供的成员。\n* 委托\n  * 委托类型表示对具有特定参数列表和返回类型的方法的引用。 通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。 委托类似于其他一些语言中的函数指针概念，但与函数指针不同的是，委托不仅面向对象，还类型安全。\n* 特性\n  * 使用特性，程序可以指定关于类型、成员和其他实体的附加声明性信息。\n</details> \n\n## <span style=\"color:#0366d6;\">访问修饰符</span>\n<details>\n<summary>展开查看</summary>\n\n* public\n  * 访问不受限\n* protected\n  * 只能访问此类或派生自此类的类\n* internal\n  * 访问限于当前程序集（.exe、.dll 等）\n* protected internal\n  * 访问限于包含类、派生自包含类的类或同一程序集中的类\n* private\n  * 只能访问此类\n* private protected\n  * 访问限于同一程序集中的包含类或派生自包含类的类\n</details> \n\n## <span style=\"color:#0366d6;\">namespace</span>\n>namespace 关键字用于声明包含一组相关对象的作用域。 可以使用命名空间来组织代码元素并创建全局唯一类型。\n可包含：另一个命名空间，class，interface，struct，enum，delegate\n## <span style=\"color:#0366d6;\">using</span>\n>using 语句定义一个范围，在此范围的末尾将释放对象\n```csharp\nusing (var font1 = new Font(\"Arial\", 10.0f)) \n{\n    byte charset = font1.GdiCharSet;\n}\n```\n>using允许在命名空间中使用类型，这样无需在该命名空间中限定某个类型的使用\n```csharp\nusing System.Text;\n```\n>允许访问类型的静态成员和嵌套类型，而无需限定使用类型名称进行访问\n```csharp\nusing static System.Math;\n```\n>为命名空间或类型创建别名。 这称为 using 别名指令\n```csharp\nusing Project = PC.MyCompany.Project;\n```\n## <span style=\"color:#0366d6;\">方法相关</span>\n\n### 方法声明\n```csharp\n//public 访问修饰符\n//virtual 虚方法修饰符\n//int 返回值类型\n//Drive 方法名称\n//int miles, int speed 形参列表\n//{  return 1; } 方法体 \npublic virtual int Drive(int miles, int speed) {  return 1; }\n```\n### 无方法体\n```csharp\npublic abstract double GetTopSpeed();\n```\n### 参数修饰符\n```csharp\n* params 指定此参数采用可变数量的参数。\n  //params 关键字之后不允许有任何其他参数，并且在方法声明中只允许有一个\n  public static void UseParams(params int[] list){}\n```\n```csharp\n* ref 指定此参数由引用传递，可能由调用方法读取或写入。\n  //修饰在值类型前\n  //调用前必须赋值\n  public void SampleMethod(ref int i) { }\n\n  ```\n<details>\n<summary>ref 修饰在引用类型前</summary>\n\n```csharp\nclass Product\n{\n    public Product(string name, int newID)\n    {\n        ItemName = name;\n        ItemID = newID;\n    }\n\n    public string ItemName { get; set; }\n    public int ItemID { get; set; }\n}\n\nprivate static void ChangeByReference(ref Product itemRef)\n{\n    // Change the address that is stored in the itemRef parameter.   \n    itemRef = new Product(\"Stapler\", 99999);\n\n    // You can change the value of one of the properties of\n    // itemRef. The change happens to item in Main as well.\n    itemRef.ItemID = 12345;\n}\n\nprivate static void ModifyProductsByReference()\n{\n    // Declare an instance of Product and display its initial values.\n    Product item = new Product(\"Fasteners\", 54321);\n    System.Console.WriteLine(\"Original values in Main.  Name: {0}, ID: {1}\\n\",\n        item.ItemName, item.ItemID);\n\n    // Pass the product instance to ChangeByReference.\n    ChangeByReference(ref item);\n    System.Console.WriteLine(\"Back in Main.  Name: {0}, ID: {1}\\n\",\n        item.ItemName, item.ItemID);\n}\n\n// This method displays the following output:\n// Original values in Main.  Name: Fasteners, ID: 54321\n// Back in Main.  Name: Stapler, ID: 12345 \n\n```\n</details>   \n\n```csharp\n* out 指定此参数由引用传递，由调用方法写入。\n//调用返回前必须赋值\npublic void SampleMethod(out int i) {i=0; }\n```\n\n### 方法重载\n>方法重载指的就是方法名称相同，但是参数不同\n签名指的是方法名和参数列表\n```csharp\npublic static int AddNumber(int num1,int num2)\n{\n    return num1 + num2;\n}\n       \npublic static double AddNumber(int num1, int num2,int num3)\n{\n    return num1 + num2;\n}\n\npublic static double AddNumber(double num1, int num2)\n{\n    return num1 + num2;\n}\n\n```\n### 方法重写\n>重写基方法必须具有与 override 方法相同的签名,override 声明不能更改 virtual 方法的可访问性。 override 方法和 virtual 方法必须具有相同级别访问修饰符。\n```csharp\npublic class BaseC\n{\n    public int x;\n    public virtual void Invoke() { }\n}\npublic class DerivedC : BaseC\n{\n    override public void Invoke() { }\n}\n```\n### 覆盖方法\n>在用作声明修饰符时，new 关键字可以显式隐藏从基类继承的成员。 隐藏继承的成员时，该成员的派生版本将替换基类版本。 虽然可以不使用 new 修饰符来隐藏成员，但将收到编译器警告。 如果使用 new 来显式隐藏成员，将禁止此警告。\n```csharp\npublic class BaseC\n{\n    public int x;\n    public virtual void Invoke() { }\n}\npublic class DerivedC : BaseC\n{\n    new public void Invoke() { }\n}\n```\n### 扩展方法\n>扩展方法被定义为静态方法，但它们是通过实例方法语法进行调用的。 它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。 仅当你使用 using 指令将命名空间显式导入到源代码中之后，扩展方法才位于范围中。\n```csharp\nnamespace ExtensionMethods\n{\n    public static class MyExtensions\n    {\n        public static int WordCount(this String str)\n        {\n            return str.Split(new char[] { ' ', '.', '?' }, \n                             StringSplitOptions.RemoveEmptyEntries).Length;\n        }\n    }   \n}\n```\n```csharp\nusing ExtensionMethods; \nstring s = \"Hello Extension Methods\";  \nint i = s.WordCount();\n```\n### 可选参数\n>常量，例如文本字符串或数字。\nnew ValType() 形式的表达式，其中 ValType 是值类型。 请注意，这会调用该值类型的隐式无参数构造函数，该函数不是类型的实际成员。\ndefault(ValType) 形式的表达式，其中 ValType 是值类型。\n\n```csharp\npublic void ExampleMethod(int required, int optionalInt = default(int),\n                             string description = \"Optional Description\")\n   {\n      Console.WriteLine(\"{0}: {1} + {2} = {3}\", description, required, \n                        optionalInt, required + optionalInt);\n   }\n```\n>前两个方法调用使用位置自变量。 第一个方法同时省略了两个可选自变量，而第二个省略了最后一个自变量。 第三个方法调用向必需的参数提供位置自变量，但使用命名的自变量向 description 参数提供值，同时省略 optionalInt 自变量\n```csharp\nvar opt = new Options();\n      opt.ExampleMethod(10);\n      opt.ExampleMethod(10, 2);\n      opt.ExampleMethod(12, description: \"Addition with zero:\");\n```\n## <span style=\"color:#0366d6;\">类</span>\n类的成员有：<span style=\"color:#0366d6;\">字段，常量，属性，方法，事件，运算符，索引器，构造函数，终结器，嵌套类型</span>\n```csharp\n    //委托\n    public delegate void MyEventHandler();\n```\n\n<details>\n<summary>展开查看</summary>\n\n```csharp\n    public class Customer\n    {\n        //构造函数\n        public Customer()\n        {\n            SomeEvent += Handler;\n        }       \n\n        //终结器\n        ~Customer()\n        {\n            SomeEvent -= Handler;\n        }\n\n        //字段\n        private string username;\n\n        //数组\n        string[] days = { \"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\" };\n\n        //事件\n        public event MyEventHandler SomeEvent;\n\n        //常量\n        public const string COUNTRYNAME = \"china\";\n\n        //属性\n        public string UserName\n        {\n            get { return username; }\n            set { username = value; }\n        }\n\n        //方法\n        public void Handler()\n        {\n\n        }\n\n        //方法\n        private int GetDay(string testDay)\n        {\n\n            for (int j = 0; j < days.Length; j++)\n            {\n                if (days[j] == testDay)\n                {\n                    return j;\n                }\n            }\n\n            throw new System.ArgumentOutOfRangeException(testDay, \"testDay must be in the form \\\"Sun\\\", \\\"Mon\\\", etc\");\n        }\n        \n        //方法\n        public void OnSomeEvent()\n        {\n            if (SomeEvent != null)\n            {\n                SomeEvent();\n            }\n        }\n\n        //索引\n        public int this[string day]\n        {\n            get\n            {\n                return (GetDay(day));\n            }\n        }\n    }\n```\n</details>\n\n### 创建对象\n```csharp\nCustomer object1 = new Customer();\n```\n### 类继承\n```csharp\npublic class Manager : Employee\n{\n    // Employee fields, properties, methods and events are inherited\n    // New Manager fields, properties, methods and events go here...\n}\n```\n### 抽象类\n```csharp\n//至少包含一个抽象方法\nabstract class Motorcycle\n{\n   // Anyone can call this.\n   public void StartEngine() {/* Method statements here */ }\n\n   // Only derived classes can call this.\n   protected void AddGas(int gallons) { /* Method statements here */ }\n\n   // Derived classes can override the base class implementation.\n   public virtual int Drive(int miles, int speed) { /* Method statements here */ return 1; }\n\n   // Derived classes can override the base class implementation.\n   public virtual int Drive(TimeSpan time, int speed) { /* Method statements here */ return 0; }\n\n   // Derived classes must implement this.\n   public abstract double GetTopSpeed(); \n}\n```\n\n```csharp\npublic class Constant: Expression\n{\n    double value;\n    public Constant(double value) \n    {\n        this.value = value;\n    }\n    public override double Evaluate(Dictionary<string,object> vars) \n    {\n        return value;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">结构</span>\n```csharp\npublic struct PostalAddress\n{\n    // Fields, properties, methods and events go here...\n}\n```\n## <span style=\"color:#0366d6;\">接口</span>\n### 定义\n```csharp\ninterface IEquatable<T>\n{\n    bool Equals(T obj);\n}\n```\n### 实现\n```csharp\ninterface IEquatable<T>\npublic class Car : IEquatable<Car>\n{\n    public string Make {get; set;}\n    public string Model { get; set; }\n    public string Year { get; set; }\n\n    // Implementation of IEquatable<T> interface\n    public bool Equals(Car car)\n    {\n        return this.Make == car.Make &&\n               this.Model == car.Model &&\n               this.Year == car.Year;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">委托</span>\n>如类Customer中的委托\n\n## <span style=\"color:#0366d6;\">事件</span>\n>如类Customer中的事件\n\n## <span style=\"color:#0366d6;\">特性</span>\n### 使用\n```csharp\n[Serializable]\npublic class SampleClass\n{\n    // Objects of this type can be serialized.\n}\n```\n\n### 创建\n```csharp\n[System.AttributeUsage(System.AttributeTargets.Class |  \n                       System.AttributeTargets.Struct)  \n]  \npublic class Author : System.Attribute  \n{  \n    private string name;  \n    public double version;  \n  \n    public Author(string name)  \n    {  \n        this.name = name;  \n        version = 1.0;  \n    }  \n} \n```\n```csharp\n[Author(\"P. Ackerman\", version = 1.1)]  \nclass SampleClass  \n{  \n    // P. Ackerman's code goes here...  \n}\n```\n\n","source":"_posts/csharpgrammar-3.md","raw":"---\ntitle: C#1.0语法\ndate: 2020-02-20\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#1.0语法\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n## <span style=\"color:#0366d6;\">C# 1.0</span>\n## <span style=\"color:#0366d6;\">数据类型</span>\n\n<details>\n<summary>展开查看</summary>\n\n* 值类型\n  * 简单类型\n    * 有符号的整型：sbyte、short、int、long\n    * 无符号的整型：byte、ushort、uint、ulong\n    * Unicode 字符：char\n    * IEEE 二进制浮点：float、double\n    * 高精度十进制浮点数：decimal\n    * 布尔：bool\n  * 枚举类型\n    * 格式为 enum E {...} 的用户定义类型\n  * 结构类型\n    * 格式为 struct S {...} 的用户定义类型\n  * 可以为 null 的值类型\n    * 值为 null 的其他所有值类型的扩展\n* 引用类型\n  * 类类型\n    * 其他所有类型的最终基类：object\n    * Unicode 字符串：string\n    * 格式为 class C {...} 的用户定义类型\n  * 接口类型\n    * 格式为 interface I {...} 的用户定义类型\n* 数组类型\n  * 一维和多维，例如 int[] 和 int[,]\n* 委托类型\n  * 格式为 delegate int D(...) 的用户定义类型\n</details> \n\n## <span style=\"color:#0366d6;\">语言元素</span>\n<details>\n<summary>展开查看</summary>\n\n* 程序结构\n  * 了解 C# 语言中的关键组织概念：程序、命名空间、类型、成员和程序集。\n* 类型和变量\n  * 了解 C# 语言中的值类型、引用类型和变量。\n* 表达式\n  * 表达式是在操作数和运算符的基础之上构造而成。 表达式生成的是值。\n* 语句\n  * 语句用于表示程序的操作。\n* 类和对象\n  * 类是最基本的 C# 类型。 对象是类实例。 类是使用成员生成的，此主题也对此进行了介绍。\n* 结构\n  * 与类不同，结构是属于值类型的数据结构。\n* 数组\n  * 数组是一种数据结构，其中包含许多通过计算索引访问的变量。\n* 接口\n  * 接口定义了可由类和结构实现的协定。 接口可以包含方法、属性、事件和索引器。 接口不提供所定义的成员的实现代码，仅指定必须由实现接口的类或结构提供的成员。\n* 委托\n  * 委托类型表示对具有特定参数列表和返回类型的方法的引用。 通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。 委托类似于其他一些语言中的函数指针概念，但与函数指针不同的是，委托不仅面向对象，还类型安全。\n* 特性\n  * 使用特性，程序可以指定关于类型、成员和其他实体的附加声明性信息。\n</details> \n\n## <span style=\"color:#0366d6;\">访问修饰符</span>\n<details>\n<summary>展开查看</summary>\n\n* public\n  * 访问不受限\n* protected\n  * 只能访问此类或派生自此类的类\n* internal\n  * 访问限于当前程序集（.exe、.dll 等）\n* protected internal\n  * 访问限于包含类、派生自包含类的类或同一程序集中的类\n* private\n  * 只能访问此类\n* private protected\n  * 访问限于同一程序集中的包含类或派生自包含类的类\n</details> \n\n## <span style=\"color:#0366d6;\">namespace</span>\n>namespace 关键字用于声明包含一组相关对象的作用域。 可以使用命名空间来组织代码元素并创建全局唯一类型。\n可包含：另一个命名空间，class，interface，struct，enum，delegate\n## <span style=\"color:#0366d6;\">using</span>\n>using 语句定义一个范围，在此范围的末尾将释放对象\n```csharp\nusing (var font1 = new Font(\"Arial\", 10.0f)) \n{\n    byte charset = font1.GdiCharSet;\n}\n```\n>using允许在命名空间中使用类型，这样无需在该命名空间中限定某个类型的使用\n```csharp\nusing System.Text;\n```\n>允许访问类型的静态成员和嵌套类型，而无需限定使用类型名称进行访问\n```csharp\nusing static System.Math;\n```\n>为命名空间或类型创建别名。 这称为 using 别名指令\n```csharp\nusing Project = PC.MyCompany.Project;\n```\n## <span style=\"color:#0366d6;\">方法相关</span>\n\n### 方法声明\n```csharp\n//public 访问修饰符\n//virtual 虚方法修饰符\n//int 返回值类型\n//Drive 方法名称\n//int miles, int speed 形参列表\n//{  return 1; } 方法体 \npublic virtual int Drive(int miles, int speed) {  return 1; }\n```\n### 无方法体\n```csharp\npublic abstract double GetTopSpeed();\n```\n### 参数修饰符\n```csharp\n* params 指定此参数采用可变数量的参数。\n  //params 关键字之后不允许有任何其他参数，并且在方法声明中只允许有一个\n  public static void UseParams(params int[] list){}\n```\n```csharp\n* ref 指定此参数由引用传递，可能由调用方法读取或写入。\n  //修饰在值类型前\n  //调用前必须赋值\n  public void SampleMethod(ref int i) { }\n\n  ```\n<details>\n<summary>ref 修饰在引用类型前</summary>\n\n```csharp\nclass Product\n{\n    public Product(string name, int newID)\n    {\n        ItemName = name;\n        ItemID = newID;\n    }\n\n    public string ItemName { get; set; }\n    public int ItemID { get; set; }\n}\n\nprivate static void ChangeByReference(ref Product itemRef)\n{\n    // Change the address that is stored in the itemRef parameter.   \n    itemRef = new Product(\"Stapler\", 99999);\n\n    // You can change the value of one of the properties of\n    // itemRef. The change happens to item in Main as well.\n    itemRef.ItemID = 12345;\n}\n\nprivate static void ModifyProductsByReference()\n{\n    // Declare an instance of Product and display its initial values.\n    Product item = new Product(\"Fasteners\", 54321);\n    System.Console.WriteLine(\"Original values in Main.  Name: {0}, ID: {1}\\n\",\n        item.ItemName, item.ItemID);\n\n    // Pass the product instance to ChangeByReference.\n    ChangeByReference(ref item);\n    System.Console.WriteLine(\"Back in Main.  Name: {0}, ID: {1}\\n\",\n        item.ItemName, item.ItemID);\n}\n\n// This method displays the following output:\n// Original values in Main.  Name: Fasteners, ID: 54321\n// Back in Main.  Name: Stapler, ID: 12345 \n\n```\n</details>   \n\n```csharp\n* out 指定此参数由引用传递，由调用方法写入。\n//调用返回前必须赋值\npublic void SampleMethod(out int i) {i=0; }\n```\n\n### 方法重载\n>方法重载指的就是方法名称相同，但是参数不同\n签名指的是方法名和参数列表\n```csharp\npublic static int AddNumber(int num1,int num2)\n{\n    return num1 + num2;\n}\n       \npublic static double AddNumber(int num1, int num2,int num3)\n{\n    return num1 + num2;\n}\n\npublic static double AddNumber(double num1, int num2)\n{\n    return num1 + num2;\n}\n\n```\n### 方法重写\n>重写基方法必须具有与 override 方法相同的签名,override 声明不能更改 virtual 方法的可访问性。 override 方法和 virtual 方法必须具有相同级别访问修饰符。\n```csharp\npublic class BaseC\n{\n    public int x;\n    public virtual void Invoke() { }\n}\npublic class DerivedC : BaseC\n{\n    override public void Invoke() { }\n}\n```\n### 覆盖方法\n>在用作声明修饰符时，new 关键字可以显式隐藏从基类继承的成员。 隐藏继承的成员时，该成员的派生版本将替换基类版本。 虽然可以不使用 new 修饰符来隐藏成员，但将收到编译器警告。 如果使用 new 来显式隐藏成员，将禁止此警告。\n```csharp\npublic class BaseC\n{\n    public int x;\n    public virtual void Invoke() { }\n}\npublic class DerivedC : BaseC\n{\n    new public void Invoke() { }\n}\n```\n### 扩展方法\n>扩展方法被定义为静态方法，但它们是通过实例方法语法进行调用的。 它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。 仅当你使用 using 指令将命名空间显式导入到源代码中之后，扩展方法才位于范围中。\n```csharp\nnamespace ExtensionMethods\n{\n    public static class MyExtensions\n    {\n        public static int WordCount(this String str)\n        {\n            return str.Split(new char[] { ' ', '.', '?' }, \n                             StringSplitOptions.RemoveEmptyEntries).Length;\n        }\n    }   \n}\n```\n```csharp\nusing ExtensionMethods; \nstring s = \"Hello Extension Methods\";  \nint i = s.WordCount();\n```\n### 可选参数\n>常量，例如文本字符串或数字。\nnew ValType() 形式的表达式，其中 ValType 是值类型。 请注意，这会调用该值类型的隐式无参数构造函数，该函数不是类型的实际成员。\ndefault(ValType) 形式的表达式，其中 ValType 是值类型。\n\n```csharp\npublic void ExampleMethod(int required, int optionalInt = default(int),\n                             string description = \"Optional Description\")\n   {\n      Console.WriteLine(\"{0}: {1} + {2} = {3}\", description, required, \n                        optionalInt, required + optionalInt);\n   }\n```\n>前两个方法调用使用位置自变量。 第一个方法同时省略了两个可选自变量，而第二个省略了最后一个自变量。 第三个方法调用向必需的参数提供位置自变量，但使用命名的自变量向 description 参数提供值，同时省略 optionalInt 自变量\n```csharp\nvar opt = new Options();\n      opt.ExampleMethod(10);\n      opt.ExampleMethod(10, 2);\n      opt.ExampleMethod(12, description: \"Addition with zero:\");\n```\n## <span style=\"color:#0366d6;\">类</span>\n类的成员有：<span style=\"color:#0366d6;\">字段，常量，属性，方法，事件，运算符，索引器，构造函数，终结器，嵌套类型</span>\n```csharp\n    //委托\n    public delegate void MyEventHandler();\n```\n\n<details>\n<summary>展开查看</summary>\n\n```csharp\n    public class Customer\n    {\n        //构造函数\n        public Customer()\n        {\n            SomeEvent += Handler;\n        }       \n\n        //终结器\n        ~Customer()\n        {\n            SomeEvent -= Handler;\n        }\n\n        //字段\n        private string username;\n\n        //数组\n        string[] days = { \"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\" };\n\n        //事件\n        public event MyEventHandler SomeEvent;\n\n        //常量\n        public const string COUNTRYNAME = \"china\";\n\n        //属性\n        public string UserName\n        {\n            get { return username; }\n            set { username = value; }\n        }\n\n        //方法\n        public void Handler()\n        {\n\n        }\n\n        //方法\n        private int GetDay(string testDay)\n        {\n\n            for (int j = 0; j < days.Length; j++)\n            {\n                if (days[j] == testDay)\n                {\n                    return j;\n                }\n            }\n\n            throw new System.ArgumentOutOfRangeException(testDay, \"testDay must be in the form \\\"Sun\\\", \\\"Mon\\\", etc\");\n        }\n        \n        //方法\n        public void OnSomeEvent()\n        {\n            if (SomeEvent != null)\n            {\n                SomeEvent();\n            }\n        }\n\n        //索引\n        public int this[string day]\n        {\n            get\n            {\n                return (GetDay(day));\n            }\n        }\n    }\n```\n</details>\n\n### 创建对象\n```csharp\nCustomer object1 = new Customer();\n```\n### 类继承\n```csharp\npublic class Manager : Employee\n{\n    // Employee fields, properties, methods and events are inherited\n    // New Manager fields, properties, methods and events go here...\n}\n```\n### 抽象类\n```csharp\n//至少包含一个抽象方法\nabstract class Motorcycle\n{\n   // Anyone can call this.\n   public void StartEngine() {/* Method statements here */ }\n\n   // Only derived classes can call this.\n   protected void AddGas(int gallons) { /* Method statements here */ }\n\n   // Derived classes can override the base class implementation.\n   public virtual int Drive(int miles, int speed) { /* Method statements here */ return 1; }\n\n   // Derived classes can override the base class implementation.\n   public virtual int Drive(TimeSpan time, int speed) { /* Method statements here */ return 0; }\n\n   // Derived classes must implement this.\n   public abstract double GetTopSpeed(); \n}\n```\n\n```csharp\npublic class Constant: Expression\n{\n    double value;\n    public Constant(double value) \n    {\n        this.value = value;\n    }\n    public override double Evaluate(Dictionary<string,object> vars) \n    {\n        return value;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">结构</span>\n```csharp\npublic struct PostalAddress\n{\n    // Fields, properties, methods and events go here...\n}\n```\n## <span style=\"color:#0366d6;\">接口</span>\n### 定义\n```csharp\ninterface IEquatable<T>\n{\n    bool Equals(T obj);\n}\n```\n### 实现\n```csharp\ninterface IEquatable<T>\npublic class Car : IEquatable<Car>\n{\n    public string Make {get; set;}\n    public string Model { get; set; }\n    public string Year { get; set; }\n\n    // Implementation of IEquatable<T> interface\n    public bool Equals(Car car)\n    {\n        return this.Make == car.Make &&\n               this.Model == car.Model &&\n               this.Year == car.Year;\n    }\n}\n```\n## <span style=\"color:#0366d6;\">委托</span>\n>如类Customer中的委托\n\n## <span style=\"color:#0366d6;\">事件</span>\n>如类Customer中的事件\n\n## <span style=\"color:#0366d6;\">特性</span>\n### 使用\n```csharp\n[Serializable]\npublic class SampleClass\n{\n    // Objects of this type can be serialized.\n}\n```\n\n### 创建\n```csharp\n[System.AttributeUsage(System.AttributeTargets.Class |  \n                       System.AttributeTargets.Struct)  \n]  \npublic class Author : System.Attribute  \n{  \n    private string name;  \n    public double version;  \n  \n    public Author(string name)  \n    {  \n        this.name = name;  \n        version = 1.0;  \n    }  \n} \n```\n```csharp\n[Author(\"P. Ackerman\", version = 1.1)]  \nclass SampleClass  \n{  \n    // P. Ackerman's code goes here...  \n}\n```\n\n","slug":"csharpgrammar-3","published":1,"updated":"2020-02-20T08:18:32.388Z","_id":"ck6ugfar9001yqcrich0a556t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#1.0语法</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h2 id=\"C-1-0\"><a href=\"#C-1-0\" class=\"headerlink\" title=\"C# 1.0\"></a><span style=\"color:#0366d6;\">C# 1.0</span></h2><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a><span style=\"color:#0366d6;\">数据类型</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>值类型<ul>\n<li>简单类型<ul>\n<li>有符号的整型：sbyte、short、int、long</li>\n<li>无符号的整型：byte、ushort、uint、ulong</li>\n<li>Unicode 字符：char</li>\n<li>IEEE 二进制浮点：float、double</li>\n<li>高精度十进制浮点数：decimal</li>\n<li>布尔：bool</li>\n</ul>\n</li>\n<li>枚举类型<ul>\n<li>格式为 enum E {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>结构类型<ul>\n<li>格式为 struct S {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>可以为 null 的值类型<ul>\n<li>值为 null 的其他所有值类型的扩展</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>引用类型<ul>\n<li>类类型<ul>\n<li>其他所有类型的最终基类：object</li>\n<li>Unicode 字符串：string</li>\n<li>格式为 class C {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>接口类型<ul>\n<li>格式为 interface I {…} 的用户定义类型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数组类型<ul>\n<li>一维和多维，例如 int[] 和 int[,]</li>\n</ul>\n</li>\n<li>委托类型<ul>\n<li>格式为 delegate int D(…) 的用户定义类型</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语言元素\"><a href=\"#语言元素\" class=\"headerlink\" title=\"语言元素\"></a><span style=\"color:#0366d6;\">语言元素</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>程序结构<ul>\n<li>了解 C# 语言中的关键组织概念：程序、命名空间、类型、成员和程序集。</li>\n</ul>\n</li>\n<li>类型和变量<ul>\n<li>了解 C# 语言中的值类型、引用类型和变量。</li>\n</ul>\n</li>\n<li>表达式<ul>\n<li>表达式是在操作数和运算符的基础之上构造而成。 表达式生成的是值。</li>\n</ul>\n</li>\n<li>语句<ul>\n<li>语句用于表示程序的操作。</li>\n</ul>\n</li>\n<li>类和对象<ul>\n<li>类是最基本的 C# 类型。 对象是类实例。 类是使用成员生成的，此主题也对此进行了介绍。</li>\n</ul>\n</li>\n<li>结构<ul>\n<li>与类不同，结构是属于值类型的数据结构。</li>\n</ul>\n</li>\n<li>数组<ul>\n<li>数组是一种数据结构，其中包含许多通过计算索引访问的变量。</li>\n</ul>\n</li>\n<li>接口<ul>\n<li>接口定义了可由类和结构实现的协定。 接口可以包含方法、属性、事件和索引器。 接口不提供所定义的成员的实现代码，仅指定必须由实现接口的类或结构提供的成员。</li>\n</ul>\n</li>\n<li>委托<ul>\n<li>委托类型表示对具有特定参数列表和返回类型的方法的引用。 通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。 委托类似于其他一些语言中的函数指针概念，但与函数指针不同的是，委托不仅面向对象，还类型安全。</li>\n</ul>\n</li>\n<li>特性<ul>\n<li>使用特性，程序可以指定关于类型、成员和其他实体的附加声明性信息。</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a><span style=\"color:#0366d6;\">访问修饰符</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>public<ul>\n<li>访问不受限</li>\n</ul>\n</li>\n<li>protected<ul>\n<li>只能访问此类或派生自此类的类</li>\n</ul>\n</li>\n<li>internal<ul>\n<li>访问限于当前程序集（.exe、.dll 等）</li>\n</ul>\n</li>\n<li>protected internal<ul>\n<li>访问限于包含类、派生自包含类的类或同一程序集中的类</li>\n</ul>\n</li>\n<li>private<ul>\n<li>只能访问此类</li>\n</ul>\n</li>\n<li>private protected<ul>\n<li>访问限于同一程序集中的包含类或派生自包含类的类</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"namespace\"><a href=\"#namespace\" class=\"headerlink\" title=\"namespace\"></a><span style=\"color:#0366d6;\">namespace</span></h2><blockquote>\n<p>namespace 关键字用于声明包含一组相关对象的作用域。 可以使用命名空间来组织代码元素并创建全局唯一类型。<br>可包含：另一个命名空间，class，interface，struct，enum，delegate</p>\n</blockquote>\n<h2 id=\"using\"><a href=\"#using\" class=\"headerlink\" title=\"using\"></a><span style=\"color:#0366d6;\">using</span></h2><blockquote>\n<p>using 语句定义一个范围，在此范围的末尾将释放对象</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> font1 = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"Arial\"</span>, <span class=\"number\">10.0f</span>)) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span> charset = font1.GdiCharSet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>using允许在命名空间中使用类型，这样无需在该命名空间中限定某个类型的使用</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>允许访问类型的静态成员和嵌套类型，而无需限定使用类型名称进行访问</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.Math;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为命名空间或类型创建别名。 这称为 using 别名指令</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Project = PC.MyCompany.Project;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法相关\"><a href=\"#方法相关\" class=\"headerlink\" title=\"方法相关\"></a><span style=\"color:#0366d6;\">方法相关</span></h2><h3 id=\"方法声明\"><a href=\"#方法声明\" class=\"headerlink\" title=\"方法声明\"></a>方法声明</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//public 访问修饰符</span></span><br><span class=\"line\"><span class=\"comment\">//virtual 虚方法修饰符</span></span><br><span class=\"line\"><span class=\"comment\">//int 返回值类型</span></span><br><span class=\"line\"><span class=\"comment\">//Drive 方法名称</span></span><br><span class=\"line\"><span class=\"comment\">//int miles, int speed 形参列表</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;  return 1; &#125; 方法体 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\"><span class=\"keyword\">int</span> miles, <span class=\"keyword\">int</span> speed</span>)</span> &#123;  <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"无方法体\"><a href=\"#无方法体\" class=\"headerlink\" title=\"无方法体\"></a>无方法体</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">GetTopSpeed</span>(<span class=\"params\"></span>)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数修饰符\"><a href=\"#参数修饰符\" class=\"headerlink\" title=\"参数修饰符\"></a>参数修饰符</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">params</span> 指定此参数采用可变数量的参数。</span><br><span class=\"line\">  <span class=\"comment\">//params 关键字之后不允许有任何其他参数，并且在方法声明中只允许有一个</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UseParams</span>(<span class=\"params\"><span class=\"keyword\">params</span> <span class=\"keyword\">int</span>[] list</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">ref</span> 指定此参数由引用传递，可能由调用方法读取或写入。</span><br><span class=\"line\">  <span class=\"comment\">//修饰在值类型前</span></span><br><span class=\"line\">  <span class=\"comment\">//调用前必须赋值</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SampleMethod</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"keyword\">int</span> i</span>)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<details>\n<summary>ref 修饰在引用类型前</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Product</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, <span class=\"keyword\">int</span> newID</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ItemName = name;</span><br><span class=\"line\">        ItemID = newID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ItemName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ItemID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ChangeByReference</span>(<span class=\"params\"><span class=\"keyword\">ref</span> Product itemRef</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Change the address that is stored in the itemRef parameter.   </span></span><br><span class=\"line\">    itemRef = <span class=\"keyword\">new</span> Product(<span class=\"string\">\"Stapler\"</span>, <span class=\"number\">99999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// You can change the value of one of the properties of</span></span><br><span class=\"line\">    <span class=\"comment\">// itemRef. The change happens to item in Main as well.</span></span><br><span class=\"line\">    itemRef.ItemID = <span class=\"number\">12345</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ModifyProductsByReference</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Declare an instance of Product and display its initial values.</span></span><br><span class=\"line\">    Product item = <span class=\"keyword\">new</span> Product(<span class=\"string\">\"Fasteners\"</span>, <span class=\"number\">54321</span>);</span><br><span class=\"line\">    System.Console.WriteLine(<span class=\"string\">\"Original values in Main.  Name: &#123;0&#125;, ID: &#123;1&#125;\\n\"</span>,</span><br><span class=\"line\">        item.ItemName, item.ItemID);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Pass the product instance to ChangeByReference.</span></span><br><span class=\"line\">    ChangeByReference(<span class=\"keyword\">ref</span> item);</span><br><span class=\"line\">    System.Console.WriteLine(<span class=\"string\">\"Back in Main.  Name: &#123;0&#125;, ID: &#123;1&#125;\\n\"</span>,</span><br><span class=\"line\">        item.ItemName, item.ItemID);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This method displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">// Original values in Main.  Name: Fasteners, ID: 54321</span></span><br><span class=\"line\"><span class=\"comment\">// Back in Main.  Name: Stapler, ID: 12345</span></span><br></pre></td></tr></table></figure>\n</details>   \n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">out</span> 指定此参数由引用传递，由调用方法写入。</span><br><span class=\"line\"><span class=\"comment\">//调用返回前必须赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SampleMethod</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">int</span> i</span>)</span> &#123;i=<span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h3><blockquote>\n<p>方法重载指的就是方法名称相同，但是参数不同<br>签名指的是方法名和参数列表</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2,<span class=\"keyword\">int</span> num3</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">double</span> num1, <span class=\"keyword\">int</span> num2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><blockquote>\n<p>重写基方法必须具有与 override 方法相同的签名,override 声明不能更改 virtual 方法的可访问性。 override 方法和 virtual 方法必须具有相同级别访问修饰符。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedC</span> : <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">override</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"覆盖方法\"><a href=\"#覆盖方法\" class=\"headerlink\" title=\"覆盖方法\"></a>覆盖方法</h3><blockquote>\n<p>在用作声明修饰符时，new 关键字可以显式隐藏从基类继承的成员。 隐藏继承的成员时，该成员的派生版本将替换基类版本。 虽然可以不使用 new 修饰符来隐藏成员，但将收到编译器警告。 如果使用 new 来显式隐藏成员，将禁止此警告。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedC</span> : <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展方法\"><a href=\"#扩展方法\" class=\"headerlink\" title=\"扩展方法\"></a>扩展方法</h3><blockquote>\n<p>扩展方法被定义为静态方法，但它们是通过实例方法语法进行调用的。 它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。 仅当你使用 using 指令将命名空间显式导入到源代码中之后，扩展方法才位于范围中。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ExtensionMethods</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MyExtensions</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">WordCount</span>(<span class=\"params\"><span class=\"keyword\">this</span> String str</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str.Split(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'?'</span> &#125;, </span><br><span class=\"line\">                             StringSplitOptions.RemoveEmptyEntries).Length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> ExtensionMethods; </span><br><span class=\"line\"><span class=\"keyword\">string</span> s = <span class=\"string\">\"Hello Extension Methods\"</span>;  </span><br><span class=\"line\"><span class=\"keyword\">int</span> i = s.WordCount();</span><br></pre></td></tr></table></figure>\n<h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><blockquote>\n<p>常量，例如文本字符串或数字。<br>new ValType() 形式的表达式，其中 ValType 是值类型。 请注意，这会调用该值类型的隐式无参数构造函数，该函数不是类型的实际成员。<br>default(ValType) 形式的表达式，其中 ValType 是值类型。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ExampleMethod</span>(<span class=\"params\"><span class=\"keyword\">int</span> required, <span class=\"keyword\">int</span> optionalInt = <span class=\"keyword\">default</span>(<span class=\"keyword\">int</span></span>),</span></span><br><span class=\"line\"><span class=\"function\">                             <span class=\"keyword\">string</span> description</span> = <span class=\"string\">\"Optional Description\"</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">\"&#123;0&#125;: &#123;1&#125; + &#123;2&#125; = &#123;3&#125;\"</span>, description, required, </span><br><span class=\"line\">                        optionalInt, required + optionalInt);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>前两个方法调用使用位置自变量。 第一个方法同时省略了两个可选自变量，而第二个省略了最后一个自变量。 第三个方法调用向必需的参数提供位置自变量，但使用命名的自变量向 description 参数提供值，同时省略 optionalInt 自变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> opt = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">      opt.ExampleMethod(<span class=\"number\">10</span>);</span><br><span class=\"line\">      opt.ExampleMethod(<span class=\"number\">10</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">      opt.ExampleMethod(<span class=\"number\">12</span>, description: <span class=\"string\">\"Addition with zero:\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a><span style=\"color:#0366d6;\">类</span></h2><p>类的成员有：<span style=\"color:#0366d6;\">字段，常量，属性，方法，事件，运算符，索引器，构造函数，终结器，嵌套类型</span></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//委托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">MyEventHandler</span>(<span class=\"params\"></span>)</span>;</span><br></pre></td></tr></table></figure>\n\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Customer</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        SomeEvent += Handler;</span><br><span class=\"line\">    &#125;       </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//终结器</span></span><br><span class=\"line\">    ~Customer()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SomeEvent -= Handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数组</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span>[] days = &#123; <span class=\"string\">\"Sun\"</span>, <span class=\"string\">\"Mon\"</span>, <span class=\"string\">\"Tues\"</span>, <span class=\"string\">\"Wed\"</span>, <span class=\"string\">\"Thurs\"</span>, <span class=\"string\">\"Fri\"</span>, <span class=\"string\">\"Sat\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//事件</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> MyEventHandler SomeEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//常量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">string</span> COUNTRYNAME = <span class=\"string\">\"china\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//属性</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> username; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123; username = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Handler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">GetDay</span>(<span class=\"params\"><span class=\"keyword\">string</span> testDay</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; days.Length; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (days[j] == testDay)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.ArgumentOutOfRangeException(testDay, <span class=\"string\">\"testDay must be in the form \\\"Sun\\\", \\\"Mon\\\", etc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnSomeEvent</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SomeEvent != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SomeEvent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//索引</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"keyword\">this</span>[<span class=\"keyword\">string</span> day]</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (GetDay(day));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer object1 = <span class=\"keyword\">new</span> Customer();</span><br></pre></td></tr></table></figure>\n<h3 id=\"类继承\"><a href=\"#类继承\" class=\"headerlink\" title=\"类继承\"></a>类继承</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Manager</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Employee fields, properties, methods and events are inherited</span></span><br><span class=\"line\">    <span class=\"comment\">// New Manager fields, properties, methods and events go here...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//至少包含一个抽象方法</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Motorcycle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// Anyone can call this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">StartEngine</span>(<span class=\"params\"></span>)</span> &#123;<span class=\"comment\">/* Method statements here */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Only derived classes can call this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">AddGas</span>(<span class=\"params\"><span class=\"keyword\">int</span> gallons</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes can override the base class implementation.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\"><span class=\"keyword\">int</span> miles, <span class=\"keyword\">int</span> speed</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes can override the base class implementation.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\">TimeSpan time, <span class=\"keyword\">int</span> speed</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes must implement this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">GetTopSpeed</span>(<span class=\"params\"></span>)</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Constant</span>: <span class=\"title\">Expression</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Constant</span>(<span class=\"params\"><span class=\"keyword\">double</span> <span class=\"keyword\">value</span></span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">value</span> = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> <span class=\"title\">Evaluate</span>(<span class=\"params\">Dictionary&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">object</span>&gt; vars</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a><span style=\"color:#0366d6;\">结构</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> PostalAddress</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Fields, properties, methods and events go here...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a><span style=\"color:#0366d6;\">接口</span></h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IEquatable&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">T obj</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IEquatable&lt;T&gt;</span><br><span class=\"line\">public class Car : IEquatable&lt;Car&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Make &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Model &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Year &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Implementation of IEquatable&lt;T&gt; interface</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">Car car</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Make == car.Make &amp;&amp;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.Model == car.Model &amp;&amp;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.Year == car.Year;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a><span style=\"color:#0366d6;\">委托</span></h2><blockquote>\n<p>如类Customer中的委托</p>\n</blockquote>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a><span style=\"color:#0366d6;\">事件</span></h2><blockquote>\n<p>如类Customer中的事件</p>\n</blockquote>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a><span style=\"color:#0366d6;\">特性</span></h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Serializable</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Objects of this type can be serialized.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">System.AttributeUsage(System.AttributeTargets.Class |  </span></span><br><span class=\"line\"><span class=\"meta\">                       System.AttributeTargets.Struct)  </span></span><br><span class=\"line\"><span class=\"meta\"></span>]  </span><br><span class=\"line\">public class Author : System.Attribute  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> name;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> version;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Author</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">        version = <span class=\"number\">1.0</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Author(<span class=\"meta-string\">\"P. Ackerman\"</span>, version = 1.1)</span>]  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// P. Ackerman's code goes here...  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>C#1.0语法</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h2 id=\"C-1-0\"><a href=\"#C-1-0\" class=\"headerlink\" title=\"C# 1.0\"></a><span style=\"color:#0366d6;\">C# 1.0</span></h2><h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a><span style=\"color:#0366d6;\">数据类型</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>值类型<ul>\n<li>简单类型<ul>\n<li>有符号的整型：sbyte、short、int、long</li>\n<li>无符号的整型：byte、ushort、uint、ulong</li>\n<li>Unicode 字符：char</li>\n<li>IEEE 二进制浮点：float、double</li>\n<li>高精度十进制浮点数：decimal</li>\n<li>布尔：bool</li>\n</ul>\n</li>\n<li>枚举类型<ul>\n<li>格式为 enum E {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>结构类型<ul>\n<li>格式为 struct S {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>可以为 null 的值类型<ul>\n<li>值为 null 的其他所有值类型的扩展</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>引用类型<ul>\n<li>类类型<ul>\n<li>其他所有类型的最终基类：object</li>\n<li>Unicode 字符串：string</li>\n<li>格式为 class C {…} 的用户定义类型</li>\n</ul>\n</li>\n<li>接口类型<ul>\n<li>格式为 interface I {…} 的用户定义类型</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数组类型<ul>\n<li>一维和多维，例如 int[] 和 int[,]</li>\n</ul>\n</li>\n<li>委托类型<ul>\n<li>格式为 delegate int D(…) 的用户定义类型</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"语言元素\"><a href=\"#语言元素\" class=\"headerlink\" title=\"语言元素\"></a><span style=\"color:#0366d6;\">语言元素</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>程序结构<ul>\n<li>了解 C# 语言中的关键组织概念：程序、命名空间、类型、成员和程序集。</li>\n</ul>\n</li>\n<li>类型和变量<ul>\n<li>了解 C# 语言中的值类型、引用类型和变量。</li>\n</ul>\n</li>\n<li>表达式<ul>\n<li>表达式是在操作数和运算符的基础之上构造而成。 表达式生成的是值。</li>\n</ul>\n</li>\n<li>语句<ul>\n<li>语句用于表示程序的操作。</li>\n</ul>\n</li>\n<li>类和对象<ul>\n<li>类是最基本的 C# 类型。 对象是类实例。 类是使用成员生成的，此主题也对此进行了介绍。</li>\n</ul>\n</li>\n<li>结构<ul>\n<li>与类不同，结构是属于值类型的数据结构。</li>\n</ul>\n</li>\n<li>数组<ul>\n<li>数组是一种数据结构，其中包含许多通过计算索引访问的变量。</li>\n</ul>\n</li>\n<li>接口<ul>\n<li>接口定义了可由类和结构实现的协定。 接口可以包含方法、属性、事件和索引器。 接口不提供所定义的成员的实现代码，仅指定必须由实现接口的类或结构提供的成员。</li>\n</ul>\n</li>\n<li>委托<ul>\n<li>委托类型表示对具有特定参数列表和返回类型的方法的引用。 通过委托，可以将方法视为可分配给变量并可作为参数传递的实体。 委托类似于其他一些语言中的函数指针概念，但与函数指针不同的是，委托不仅面向对象，还类型安全。</li>\n</ul>\n</li>\n<li>特性<ul>\n<li>使用特性，程序可以指定关于类型、成员和其他实体的附加声明性信息。</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a><span style=\"color:#0366d6;\">访问修饰符</span></h2><details>\n<summary>展开查看</summary>\n\n<ul>\n<li>public<ul>\n<li>访问不受限</li>\n</ul>\n</li>\n<li>protected<ul>\n<li>只能访问此类或派生自此类的类</li>\n</ul>\n</li>\n<li>internal<ul>\n<li>访问限于当前程序集（.exe、.dll 等）</li>\n</ul>\n</li>\n<li>protected internal<ul>\n<li>访问限于包含类、派生自包含类的类或同一程序集中的类</li>\n</ul>\n</li>\n<li>private<ul>\n<li>只能访问此类</li>\n</ul>\n</li>\n<li>private protected<ul>\n<li>访问限于同一程序集中的包含类或派生自包含类的类</details> \n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"namespace\"><a href=\"#namespace\" class=\"headerlink\" title=\"namespace\"></a><span style=\"color:#0366d6;\">namespace</span></h2><blockquote>\n<p>namespace 关键字用于声明包含一组相关对象的作用域。 可以使用命名空间来组织代码元素并创建全局唯一类型。<br>可包含：另一个命名空间，class，interface，struct，enum，delegate</p>\n</blockquote>\n<h2 id=\"using\"><a href=\"#using\" class=\"headerlink\" title=\"using\"></a><span style=\"color:#0366d6;\">using</span></h2><blockquote>\n<p>using 语句定义一个范围，在此范围的末尾将释放对象</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> font1 = <span class=\"keyword\">new</span> Font(<span class=\"string\">\"Arial\"</span>, <span class=\"number\">10.0f</span>)) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span> charset = font1.GdiCharSet;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>using允许在命名空间中使用类型，这样无需在该命名空间中限定某个类型的使用</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Text;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>允许访问类型的静态成员和嵌套类型，而无需限定使用类型名称进行访问</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">static</span> System.Math;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为命名空间或类型创建别名。 这称为 using 别名指令</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Project = PC.MyCompany.Project;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法相关\"><a href=\"#方法相关\" class=\"headerlink\" title=\"方法相关\"></a><span style=\"color:#0366d6;\">方法相关</span></h2><h3 id=\"方法声明\"><a href=\"#方法声明\" class=\"headerlink\" title=\"方法声明\"></a>方法声明</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//public 访问修饰符</span></span><br><span class=\"line\"><span class=\"comment\">//virtual 虚方法修饰符</span></span><br><span class=\"line\"><span class=\"comment\">//int 返回值类型</span></span><br><span class=\"line\"><span class=\"comment\">//Drive 方法名称</span></span><br><span class=\"line\"><span class=\"comment\">//int miles, int speed 形参列表</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;  return 1; &#125; 方法体 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\"><span class=\"keyword\">int</span> miles, <span class=\"keyword\">int</span> speed</span>)</span> &#123;  <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"无方法体\"><a href=\"#无方法体\" class=\"headerlink\" title=\"无方法体\"></a>无方法体</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">GetTopSpeed</span>(<span class=\"params\"></span>)</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参数修饰符\"><a href=\"#参数修饰符\" class=\"headerlink\" title=\"参数修饰符\"></a>参数修饰符</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">params</span> 指定此参数采用可变数量的参数。</span><br><span class=\"line\">  <span class=\"comment\">//params 关键字之后不允许有任何其他参数，并且在方法声明中只允许有一个</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">UseParams</span>(<span class=\"params\"><span class=\"keyword\">params</span> <span class=\"keyword\">int</span>[] list</span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">ref</span> 指定此参数由引用传递，可能由调用方法读取或写入。</span><br><span class=\"line\">  <span class=\"comment\">//修饰在值类型前</span></span><br><span class=\"line\">  <span class=\"comment\">//调用前必须赋值</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SampleMethod</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"keyword\">int</span> i</span>)</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n<details>\n<summary>ref 修饰在引用类型前</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Product</span>(<span class=\"params\"><span class=\"keyword\">string</span> name, <span class=\"keyword\">int</span> newID</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        ItemName = name;</span><br><span class=\"line\">        ItemID = newID;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> ItemName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> ItemID &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ChangeByReference</span>(<span class=\"params\"><span class=\"keyword\">ref</span> Product itemRef</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Change the address that is stored in the itemRef parameter.   </span></span><br><span class=\"line\">    itemRef = <span class=\"keyword\">new</span> Product(<span class=\"string\">\"Stapler\"</span>, <span class=\"number\">99999</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// You can change the value of one of the properties of</span></span><br><span class=\"line\">    <span class=\"comment\">// itemRef. The change happens to item in Main as well.</span></span><br><span class=\"line\">    itemRef.ItemID = <span class=\"number\">12345</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ModifyProductsByReference</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Declare an instance of Product and display its initial values.</span></span><br><span class=\"line\">    Product item = <span class=\"keyword\">new</span> Product(<span class=\"string\">\"Fasteners\"</span>, <span class=\"number\">54321</span>);</span><br><span class=\"line\">    System.Console.WriteLine(<span class=\"string\">\"Original values in Main.  Name: &#123;0&#125;, ID: &#123;1&#125;\\n\"</span>,</span><br><span class=\"line\">        item.ItemName, item.ItemID);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Pass the product instance to ChangeByReference.</span></span><br><span class=\"line\">    ChangeByReference(<span class=\"keyword\">ref</span> item);</span><br><span class=\"line\">    System.Console.WriteLine(<span class=\"string\">\"Back in Main.  Name: &#123;0&#125;, ID: &#123;1&#125;\\n\"</span>,</span><br><span class=\"line\">        item.ItemName, item.ItemID);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This method displays the following output:</span></span><br><span class=\"line\"><span class=\"comment\">// Original values in Main.  Name: Fasteners, ID: 54321</span></span><br><span class=\"line\"><span class=\"comment\">// Back in Main.  Name: Stapler, ID: 12345</span></span><br></pre></td></tr></table></figure>\n</details>   \n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* <span class=\"keyword\">out</span> 指定此参数由引用传递，由调用方法写入。</span><br><span class=\"line\"><span class=\"comment\">//调用返回前必须赋值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SampleMethod</span>(<span class=\"params\"><span class=\"keyword\">out</span> <span class=\"keyword\">int</span> i</span>)</span> &#123;i=<span class=\"number\">0</span>; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h3><blockquote>\n<p>方法重载指的就是方法名称相同，但是参数不同<br>签名指的是方法名和参数列表</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">int</span> num1,<span class=\"keyword\">int</span> num2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">       </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">int</span> num1, <span class=\"keyword\">int</span> num2,<span class=\"keyword\">int</span> num3</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">AddNumber</span>(<span class=\"params\"><span class=\"keyword\">double</span> num1, <span class=\"keyword\">int</span> num2</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><blockquote>\n<p>重写基方法必须具有与 override 方法相同的签名,override 声明不能更改 virtual 方法的可访问性。 override 方法和 virtual 方法必须具有相同级别访问修饰符。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedC</span> : <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">override</span> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"覆盖方法\"><a href=\"#覆盖方法\" class=\"headerlink\" title=\"覆盖方法\"></a>覆盖方法</h3><blockquote>\n<p>在用作声明修饰符时，new 关键字可以显式隐藏从基类继承的成员。 隐藏继承的成员时，该成员的派生版本将替换基类版本。 虽然可以不使用 new 修饰符来隐藏成员，但将收到编译器警告。 如果使用 new 来显式隐藏成员，将禁止此警告。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DerivedC</span> : <span class=\"title\">BaseC</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Invoke</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"扩展方法\"><a href=\"#扩展方法\" class=\"headerlink\" title=\"扩展方法\"></a>扩展方法</h3><blockquote>\n<p>扩展方法被定义为静态方法，但它们是通过实例方法语法进行调用的。 它们的第一个参数指定该方法作用于哪个类型，并且该参数以 this 修饰符为前缀。 仅当你使用 using 指令将命名空间显式导入到源代码中之后，扩展方法才位于范围中。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">ExtensionMethods</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MyExtensions</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">WordCount</span>(<span class=\"params\"><span class=\"keyword\">this</span> String str</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> str.Split(<span class=\"keyword\">new</span> <span class=\"keyword\">char</span>[] &#123; <span class=\"string\">' '</span>, <span class=\"string\">'.'</span>, <span class=\"string\">'?'</span> &#125;, </span><br><span class=\"line\">                             StringSplitOptions.RemoveEmptyEntries).Length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> ExtensionMethods; </span><br><span class=\"line\"><span class=\"keyword\">string</span> s = <span class=\"string\">\"Hello Extension Methods\"</span>;  </span><br><span class=\"line\"><span class=\"keyword\">int</span> i = s.WordCount();</span><br></pre></td></tr></table></figure>\n<h3 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h3><blockquote>\n<p>常量，例如文本字符串或数字。<br>new ValType() 形式的表达式，其中 ValType 是值类型。 请注意，这会调用该值类型的隐式无参数构造函数，该函数不是类型的实际成员。<br>default(ValType) 形式的表达式，其中 ValType 是值类型。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ExampleMethod</span>(<span class=\"params\"><span class=\"keyword\">int</span> required, <span class=\"keyword\">int</span> optionalInt = <span class=\"keyword\">default</span>(<span class=\"keyword\">int</span></span>),</span></span><br><span class=\"line\"><span class=\"function\">                             <span class=\"keyword\">string</span> description</span> = <span class=\"string\">\"Optional Description\"</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      Console.WriteLine(<span class=\"string\">\"&#123;0&#125;: &#123;1&#125; + &#123;2&#125; = &#123;3&#125;\"</span>, description, required, </span><br><span class=\"line\">                        optionalInt, required + optionalInt);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>前两个方法调用使用位置自变量。 第一个方法同时省略了两个可选自变量，而第二个省略了最后一个自变量。 第三个方法调用向必需的参数提供位置自变量，但使用命名的自变量向 description 参数提供值，同时省略 optionalInt 自变量</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> opt = <span class=\"keyword\">new</span> Options();</span><br><span class=\"line\">      opt.ExampleMethod(<span class=\"number\">10</span>);</span><br><span class=\"line\">      opt.ExampleMethod(<span class=\"number\">10</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">      opt.ExampleMethod(<span class=\"number\">12</span>, description: <span class=\"string\">\"Addition with zero:\"</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a><span style=\"color:#0366d6;\">类</span></h2><p>类的成员有：<span style=\"color:#0366d6;\">字段，常量，属性，方法，事件，运算符，索引器，构造函数，终结器，嵌套类型</span></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//委托</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">delegate</span> <span class=\"keyword\">void</span> <span class=\"title\">MyEventHandler</span>(<span class=\"params\"></span>)</span>;</span><br></pre></td></tr></table></figure>\n\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Customer</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        SomeEvent += Handler;</span><br><span class=\"line\">    &#125;       </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//终结器</span></span><br><span class=\"line\">    ~Customer()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SomeEvent -= Handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//字段</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数组</span></span><br><span class=\"line\">    <span class=\"keyword\">string</span>[] days = &#123; <span class=\"string\">\"Sun\"</span>, <span class=\"string\">\"Mon\"</span>, <span class=\"string\">\"Tues\"</span>, <span class=\"string\">\"Wed\"</span>, <span class=\"string\">\"Thurs\"</span>, <span class=\"string\">\"Fri\"</span>, <span class=\"string\">\"Sat\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//事件</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">event</span> MyEventHandler SomeEvent;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//常量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">const</span> <span class=\"keyword\">string</span> COUNTRYNAME = <span class=\"string\">\"china\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//属性</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> UserName</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> username; &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123; username = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Handler</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">GetDay</span>(<span class=\"params\"><span class=\"keyword\">string</span> testDay</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; days.Length; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (days[j] == testDay)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> System.ArgumentOutOfRangeException(testDay, <span class=\"string\">\"testDay must be in the form \\\"Sun\\\", \\\"Mon\\\", etc\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//方法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnSomeEvent</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SomeEvent != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            SomeEvent();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//索引</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"keyword\">this</span>[<span class=\"keyword\">string</span> day]</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (GetDay(day));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Customer object1 = <span class=\"keyword\">new</span> Customer();</span><br></pre></td></tr></table></figure>\n<h3 id=\"类继承\"><a href=\"#类继承\" class=\"headerlink\" title=\"类继承\"></a>类继承</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Manager</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Employee fields, properties, methods and events are inherited</span></span><br><span class=\"line\">    <span class=\"comment\">// New Manager fields, properties, methods and events go here...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//至少包含一个抽象方法</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title\">Motorcycle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// Anyone can call this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">StartEngine</span>(<span class=\"params\"></span>)</span> &#123;<span class=\"comment\">/* Method statements here */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Only derived classes can call this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">AddGas</span>(<span class=\"params\"><span class=\"keyword\">int</span> gallons</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes can override the base class implementation.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\"><span class=\"keyword\">int</span> miles, <span class=\"keyword\">int</span> speed</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes can override the base class implementation.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">Drive</span>(<span class=\"params\">TimeSpan time, <span class=\"keyword\">int</span> speed</span>)</span> &#123; <span class=\"comment\">/* Method statements here */</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// Derived classes must implement this.</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">double</span> <span class=\"title\">GetTopSpeed</span>(<span class=\"params\"></span>)</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Constant</span>: <span class=\"title\">Expression</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Constant</span>(<span class=\"params\"><span class=\"keyword\">double</span> <span class=\"keyword\">value</span></span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"keyword\">value</span> = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">double</span> <span class=\"title\">Evaluate</span>(<span class=\"params\">Dictionary&lt;<span class=\"keyword\">string</span>,<span class=\"keyword\">object</span>&gt; vars</span>) </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a><span style=\"color:#0366d6;\">结构</span></h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">struct</span> PostalAddress</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Fields, properties, methods and events go here...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a><span style=\"color:#0366d6;\">接口</span></h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IEquatable&lt;T&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">T obj</span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface IEquatable&lt;T&gt;</span><br><span class=\"line\">public class Car : IEquatable&lt;Car&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Make &#123;<span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Model &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Year &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Implementation of IEquatable&lt;T&gt; interface</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">Car car</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.Make == car.Make &amp;&amp;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.Model == car.Model &amp;&amp;</span><br><span class=\"line\">               <span class=\"keyword\">this</span>.Year == car.Year;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a><span style=\"color:#0366d6;\">委托</span></h2><blockquote>\n<p>如类Customer中的委托</p>\n</blockquote>\n<h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a><span style=\"color:#0366d6;\">事件</span></h2><blockquote>\n<p>如类Customer中的事件</p>\n</blockquote>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a><span style=\"color:#0366d6;\">特性</span></h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Serializable</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Objects of this type can be serialized.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">System.AttributeUsage(System.AttributeTargets.Class |  </span></span><br><span class=\"line\"><span class=\"meta\">                       System.AttributeTargets.Struct)  </span></span><br><span class=\"line\"><span class=\"meta\"></span>]  </span><br><span class=\"line\">public class Author : System.Attribute  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">string</span> name;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> version;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Author</span>(<span class=\"params\"><span class=\"keyword\">string</span> name</span>)  </span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;  </span><br><span class=\"line\">        version = <span class=\"number\">1.0</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Author(<span class=\"meta-string\">\"P. Ackerman\"</span>, version = 1.1)</span>]  </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">SampleClass</span>  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">    <span class=\"comment\">// P. Ackerman's code goes here...  </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"C#拾遗","date":"2020-02-18T16:00:00.000Z","_content":"C#常见知识点整理\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n\n## <span style=\"color:#0366d6;\">类型的默认值</span>\n\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认值</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何引用类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">null</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置整数数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置浮点型数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">bool</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">'\\0' (U + 0000)</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">表达式 (E)0 生成的值，其中 E 是枚举标识符。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct/td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">通过如下设置生成的值：将所有值类型的字段设置为其默认值，将所有引用类型的字段设置为 null。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何可以为 null 的值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">HasValue 属性为 false 且 Value 属性未定义的实例。 该默认值也称为可以为 null 的值类型的“null” 值。</td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">强制转换和类型转换</span>\n### 隐式转换\n>对于内置数值类型，如果要存储的值无需截断或四舍五入即可适应变量，则可以进行隐式转换。 对于整型类型，这意味着源类型的范围是目标类型范围的正确子集。例如，long 类型的变量（64 位整数）能够存储 int（32 位整数）可存储的任何值。 在下面的示例中，编译器先将右侧的 num 值隐式转换为 long 类型，再将它赋给 bigNum。\n```csharp\n// Implicit conversion. A long can\n// hold any value an int can hold, and more!\nint num = 2147483647;\nlong bigNum = num;\n```\n### 隐式转换\n>但是，如果进行转换可能会导致信息丢失，则编译器会要求执行显式转换，显式转换也称为强制转换。强制转换是显式告知编译器你打算进行转换且你知道可能会发生数据丢失的一种方式。若要执行强制转换，请在要转换的值或变量前面的括号中指定要强制转换到的类型。下面的程序将 double 强制转换为 int。如不强制转换则该程序不会进行编译。\n```csharp\n double x = 1234.7;\n int a;\n // Cast double to int.\n a = (int)x;\n```\n### 用户定义转换运算符\n>operator和implicit(隐式)或explicit(显示)关键字分别用于定义隐式转换或显式转换。定义转换的类型必须是该转换的源类型或目标类型。可用两种类型中的任何一种类型来定义两种用户定义类型之间的转换。\n<details>\n<summary>展开查看</summary>\n\n```csharp\nusing System;\n\npublic readonly struct Digit\n{\n    private readonly byte digit;\n\n    public Digit(byte digit)\n    {\n        if (digit > 9)\n        {\n            throw new ArgumentOutOfRangeException(nameof(digit), \"Digit cannot be greater than nine.\");\n        }\n        this.digit = digit;\n    }\n\n    public static implicit operator byte(Digit d) => d.digit;\n    public static explicit operator Digit(byte b) => new Digit(b);\n\n    public override string ToString() => $\"{digit}\";\n}\n\npublic static class UserDefinedConversions\n{\n    public static void Main()\n    {\n        var d = new Digit(7);\n        \n        byte number = d;\n        Console.WriteLine(number);  // output: 7\n\n        Digit digit = (Digit)number;\n        Console.WriteLine(digit);  // output: 7\n    }\n}\n```\n</details>\n\n### 使用帮助程序类进行转换\n\n```csharp\n System.BitConverter,System.Convert,Int32.Parse\n ```\n\n ## <span style=\"color:#0366d6;\">装箱和取消装箱</span>\n\n ### 装箱\n >装箱是值类型到 object 类型或到此值类型所实现的任何接口类型的隐式转换。对值类型装箱会在堆中分配一个对象实例，并将该值复制到新的对象中。\n ```csharp\n int i = 123;\n // Boxing copies the value of i into object o.\nobject o = i; \n ```\n ### 拆箱\n >取消装箱是从 object 类型到值类型或从接口类型到实现该接口的值类型的显式转换。取消装箱操作包括：\n1.检查对象实例，以确保它是给定值类型的装箱值。\n2.将该值从实例复制到值类型变量中。\n```csharp\nint i = 123;      // a value type\nobject o = i;     // boxing\nint j = (int)o;   // unboxing\n```\n","source":"_posts/csharpgrammar-2.md","raw":"---\ntitle: C#拾遗\ndate: 2020-02-19\ntags: [程序设计语言，C#]\ncategories: csharp程序设计语言\n---\nC#常见知识点整理\n<!-- more -->\n参考：<https://docs.microsoft.com/zh-cn/dotnet/csharp/>\n\n## <span style=\"color:#0366d6;\">类型的默认值</span>\n\n<table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认值</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何引用类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">null</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置整数数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置浮点型数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">bool</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">'\\0' (U + 0000)</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">表达式 (E)0 生成的值，其中 E 是枚举标识符。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct/td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">通过如下设置生成的值：将所有值类型的字段设置为其默认值，将所有引用类型的字段设置为 null。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何可以为 null 的值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">HasValue 属性为 false 且 Value 属性未定义的实例。 该默认值也称为可以为 null 的值类型的“null” 值。</td>\n</tr>\n</table>\n\n## <span style=\"color:#0366d6;\">强制转换和类型转换</span>\n### 隐式转换\n>对于内置数值类型，如果要存储的值无需截断或四舍五入即可适应变量，则可以进行隐式转换。 对于整型类型，这意味着源类型的范围是目标类型范围的正确子集。例如，long 类型的变量（64 位整数）能够存储 int（32 位整数）可存储的任何值。 在下面的示例中，编译器先将右侧的 num 值隐式转换为 long 类型，再将它赋给 bigNum。\n```csharp\n// Implicit conversion. A long can\n// hold any value an int can hold, and more!\nint num = 2147483647;\nlong bigNum = num;\n```\n### 隐式转换\n>但是，如果进行转换可能会导致信息丢失，则编译器会要求执行显式转换，显式转换也称为强制转换。强制转换是显式告知编译器你打算进行转换且你知道可能会发生数据丢失的一种方式。若要执行强制转换，请在要转换的值或变量前面的括号中指定要强制转换到的类型。下面的程序将 double 强制转换为 int。如不强制转换则该程序不会进行编译。\n```csharp\n double x = 1234.7;\n int a;\n // Cast double to int.\n a = (int)x;\n```\n### 用户定义转换运算符\n>operator和implicit(隐式)或explicit(显示)关键字分别用于定义隐式转换或显式转换。定义转换的类型必须是该转换的源类型或目标类型。可用两种类型中的任何一种类型来定义两种用户定义类型之间的转换。\n<details>\n<summary>展开查看</summary>\n\n```csharp\nusing System;\n\npublic readonly struct Digit\n{\n    private readonly byte digit;\n\n    public Digit(byte digit)\n    {\n        if (digit > 9)\n        {\n            throw new ArgumentOutOfRangeException(nameof(digit), \"Digit cannot be greater than nine.\");\n        }\n        this.digit = digit;\n    }\n\n    public static implicit operator byte(Digit d) => d.digit;\n    public static explicit operator Digit(byte b) => new Digit(b);\n\n    public override string ToString() => $\"{digit}\";\n}\n\npublic static class UserDefinedConversions\n{\n    public static void Main()\n    {\n        var d = new Digit(7);\n        \n        byte number = d;\n        Console.WriteLine(number);  // output: 7\n\n        Digit digit = (Digit)number;\n        Console.WriteLine(digit);  // output: 7\n    }\n}\n```\n</details>\n\n### 使用帮助程序类进行转换\n\n```csharp\n System.BitConverter,System.Convert,Int32.Parse\n ```\n\n ## <span style=\"color:#0366d6;\">装箱和取消装箱</span>\n\n ### 装箱\n >装箱是值类型到 object 类型或到此值类型所实现的任何接口类型的隐式转换。对值类型装箱会在堆中分配一个对象实例，并将该值复制到新的对象中。\n ```csharp\n int i = 123;\n // Boxing copies the value of i into object o.\nobject o = i; \n ```\n ### 拆箱\n >取消装箱是从 object 类型到值类型或从接口类型到实现该接口的值类型的显式转换。取消装箱操作包括：\n1.检查对象实例，以确保它是给定值类型的装箱值。\n2.将该值从实例复制到值类型变量中。\n```csharp\nint i = 123;      // a value type\nobject o = i;     // boxing\nint j = (int)o;   // unboxing\n```\n","slug":"csharpgrammar-2","published":1,"updated":"2020-02-20T13:16:47.174Z","_id":"ck6ugfc310021qcri8rg42c23","comments":1,"layout":"post","photos":[],"link":"","content":"<p>C#常见知识点整理</p>\n<a id=\"more\"></a>\n<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h2 id=\"类型的默认值\"><a href=\"#类型的默认值\" class=\"headerlink\" title=\"类型的默认值\"></a><span style=\"color:#0366d6;\">类型的默认值</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认值</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何引用类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">null</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置整数数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置浮点型数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">bool</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">'\\0' (U + 0000)</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">表达式 (E)0 生成的值，其中 E 是枚举标识符。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct/td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">通过如下设置生成的值：将所有值类型的字段设置为其默认值，将所有引用类型的字段设置为 null。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何可以为 null 的值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">HasValue 属性为 false 且 Value 属性未定义的实例。 该默认值也称为可以为 null 的值类型的“null” 值。</td>\n</tr>\n</table>\n\n<h2 id=\"强制转换和类型转换\"><a href=\"#强制转换和类型转换\" class=\"headerlink\" title=\"强制转换和类型转换\"></a><span style=\"color:#0366d6;\">强制转换和类型转换</span></h2><h3 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h3><blockquote>\n<p>对于内置数值类型，如果要存储的值无需截断或四舍五入即可适应变量，则可以进行隐式转换。 对于整型类型，这意味着源类型的范围是目标类型范围的正确子集。例如，long 类型的变量（64 位整数）能够存储 int（32 位整数）可存储的任何值。 在下面的示例中，编译器先将右侧的 num 值隐式转换为 long 类型，再将它赋给 bigNum。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Implicit conversion. A long can</span></span><br><span class=\"line\"><span class=\"comment\">// hold any value an int can hold, and more!</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> bigNum = num;</span><br></pre></td></tr></table></figure>\n<h3 id=\"隐式转换-1\"><a href=\"#隐式转换-1\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h3><blockquote>\n<p>但是，如果进行转换可能会导致信息丢失，则编译器会要求执行显式转换，显式转换也称为强制转换。强制转换是显式告知编译器你打算进行转换且你知道可能会发生数据丢失的一种方式。若要执行强制转换，请在要转换的值或变量前面的括号中指定要强制转换到的类型。下面的程序将 double 强制转换为 int。如不强制转换则该程序不会进行编译。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> x = <span class=\"number\">1234.7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"comment\">// Cast double to int.</span></span><br><span class=\"line\">a = (<span class=\"keyword\">int</span>)x;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户定义转换运算符\"><a href=\"#用户定义转换运算符\" class=\"headerlink\" title=\"用户定义转换运算符\"></a>用户定义转换运算符</h3><blockquote>\n<p>operator和implicit(隐式)或explicit(显示)关键字分别用于定义隐式转换或显式转换。定义转换的类型必须是该转换的源类型或目标类型。可用两种类型中的任何一种类型来定义两种用户定义类型之间的转换。</p>\n</blockquote>\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">struct</span> Digit</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">byte</span> digit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Digit</span>(<span class=\"params\"><span class=\"keyword\">byte</span> digit</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (digit &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(digit), <span class=\"string\">\"Digit cannot be greater than nine.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.digit = digit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">implicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">byte</span>(<span class=\"params\">Digit d</span>)</span> =&gt; d.digit;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">Digit</span>(<span class=\"params\"><span class=\"keyword\">byte</span> b</span>)</span> =&gt; <span class=\"keyword\">new</span> Digit(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span> =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;digit&#125;</span>\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">UserDefinedConversions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Digit(<span class=\"number\">7</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">byte</span> number = d;</span><br><span class=\"line\">        Console.WriteLine(number);  <span class=\"comment\">// output: 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Digit digit = (Digit)number;</span><br><span class=\"line\">        Console.WriteLine(digit);  <span class=\"comment\">// output: 7</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"使用帮助程序类进行转换\"><a href=\"#使用帮助程序类进行转换\" class=\"headerlink\" title=\"使用帮助程序类进行转换\"></a>使用帮助程序类进行转换</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.BitConverter,System.Convert,Int32.Parse</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"装箱和取消装箱\"><a href=\"#装箱和取消装箱\" class=\"headerlink\" title=\"装箱和取消装箱\"></a><span style=\"color:#0366d6;\">装箱和取消装箱</span></h2><h3 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h3><blockquote>\n<p>装箱是值类型到 object 类型或到此值类型所实现的任何接口类型的隐式转换。对值类型装箱会在堆中分配一个对象实例，并将该值复制到新的对象中。<br> <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">int</span> i = <span class=\"number\">123</span>;</span><br><span class=\"line\"> <span class=\"comment\">// Boxing copies the value of i into object o.</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> o = i;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h3><blockquote>\n<p>取消装箱是从 object 类型到值类型或从接口类型到实现该接口的值类型的显式转换。取消装箱操作包括：<br>1.检查对象实例，以确保它是给定值类型的装箱值。<br>2.将该值从实例复制到值类型变量中。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">123</span>;      <span class=\"comment\">// a value type</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> o = i;     <span class=\"comment\">// boxing</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> j = (<span class=\"keyword\">int</span>)o;   <span class=\"comment\">// unboxing</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>C#常见知识点整理</p>","more":"<p>参考：<a href=\"https://docs.microsoft.com/zh-cn/dotnet/csharp/\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/zh-cn/dotnet/csharp/</a></p>\n<h2 id=\"类型的默认值\"><a href=\"#类型的默认值\" class=\"headerlink\" title=\"类型的默认值\"></a><span style=\"color:#0366d6;\">类型的默认值</span></h2><table style=\"color:#0065b3;width:100%;border:0px;\" >\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;color:black;font-weight:bold;\">默认值</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何引用类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">null</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置整数数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何内置浮点型数值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">0（零）</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">bool</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">false</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">char</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">'\\0' (U + 0000)</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">enum</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">表达式 (E)0 生成的值，其中 E 是枚举标识符。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">struct/td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">通过如下设置生成的值：将所有值类型的字段设置为其默认值，将所有引用类型的字段设置为 null。</td>\n</tr>\n<tr>\n<td style=\"width:15%;border-left:0px;border-right:0px;\">任何可以为 null 的值类型</td>\n<td style=\"width:85%;border-left:0px;border-right:0px;\">HasValue 属性为 false 且 Value 属性未定义的实例。 该默认值也称为可以为 null 的值类型的“null” 值。</td>\n</tr>\n</table>\n\n<h2 id=\"强制转换和类型转换\"><a href=\"#强制转换和类型转换\" class=\"headerlink\" title=\"强制转换和类型转换\"></a><span style=\"color:#0366d6;\">强制转换和类型转换</span></h2><h3 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h3><blockquote>\n<p>对于内置数值类型，如果要存储的值无需截断或四舍五入即可适应变量，则可以进行隐式转换。 对于整型类型，这意味着源类型的范围是目标类型范围的正确子集。例如，long 类型的变量（64 位整数）能够存储 int（32 位整数）可存储的任何值。 在下面的示例中，编译器先将右侧的 num 值隐式转换为 long 类型，再将它赋给 bigNum。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Implicit conversion. A long can</span></span><br><span class=\"line\"><span class=\"comment\">// hold any value an int can hold, and more!</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">2147483647</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> bigNum = num;</span><br></pre></td></tr></table></figure>\n<h3 id=\"隐式转换-1\"><a href=\"#隐式转换-1\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h3><blockquote>\n<p>但是，如果进行转换可能会导致信息丢失，则编译器会要求执行显式转换，显式转换也称为强制转换。强制转换是显式告知编译器你打算进行转换且你知道可能会发生数据丢失的一种方式。若要执行强制转换，请在要转换的值或变量前面的括号中指定要强制转换到的类型。下面的程序将 double 强制转换为 int。如不强制转换则该程序不会进行编译。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> x = <span class=\"number\">1234.7</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"comment\">// Cast double to int.</span></span><br><span class=\"line\">a = (<span class=\"keyword\">int</span>)x;</span><br></pre></td></tr></table></figure>\n<h3 id=\"用户定义转换运算符\"><a href=\"#用户定义转换运算符\" class=\"headerlink\" title=\"用户定义转换运算符\"></a>用户定义转换运算符</h3><blockquote>\n<p>operator和implicit(隐式)或explicit(显示)关键字分别用于定义隐式转换或显式转换。定义转换的类型必须是该转换的源类型或目标类型。可用两种类型中的任何一种类型来定义两种用户定义类型之间的转换。</p>\n</blockquote>\n<details>\n<summary>展开查看</summary>\n\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">struct</span> Digit</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">byte</span> digit;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Digit</span>(<span class=\"params\"><span class=\"keyword\">byte</span> digit</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (digit &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(digit), <span class=\"string\">\"Digit cannot be greater than nine.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.digit = digit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">implicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">byte</span>(<span class=\"params\">Digit d</span>)</span> =&gt; d.digit;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">explicit</span> <span class=\"keyword\">operator</span> <span class=\"title\">Digit</span>(<span class=\"params\"><span class=\"keyword\">byte</span> b</span>)</span> =&gt; <span class=\"keyword\">new</span> Digit(b);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">string</span> <span class=\"title\">ToString</span>(<span class=\"params\"></span>)</span> =&gt; <span class=\"string\">$\"<span class=\"subst\">&#123;digit&#125;</span>\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">UserDefinedConversions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"></span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> Digit(<span class=\"number\">7</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">byte</span> number = d;</span><br><span class=\"line\">        Console.WriteLine(number);  <span class=\"comment\">// output: 7</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Digit digit = (Digit)number;</span><br><span class=\"line\">        Console.WriteLine(digit);  <span class=\"comment\">// output: 7</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</details>\n\n<h3 id=\"使用帮助程序类进行转换\"><a href=\"#使用帮助程序类进行转换\" class=\"headerlink\" title=\"使用帮助程序类进行转换\"></a>使用帮助程序类进行转换</h3><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.BitConverter,System.Convert,Int32.Parse</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"装箱和取消装箱\"><a href=\"#装箱和取消装箱\" class=\"headerlink\" title=\"装箱和取消装箱\"></a><span style=\"color:#0366d6;\">装箱和取消装箱</span></h2><h3 id=\"装箱\"><a href=\"#装箱\" class=\"headerlink\" title=\"装箱\"></a>装箱</h3><blockquote>\n<p>装箱是值类型到 object 类型或到此值类型所实现的任何接口类型的隐式转换。对值类型装箱会在堆中分配一个对象实例，并将该值复制到新的对象中。<br> <figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">int</span> i = <span class=\"number\">123</span>;</span><br><span class=\"line\"> <span class=\"comment\">// Boxing copies the value of i into object o.</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> o = i;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"拆箱\"><a href=\"#拆箱\" class=\"headerlink\" title=\"拆箱\"></a>拆箱</h3><blockquote>\n<p>取消装箱是从 object 类型到值类型或从接口类型到实现该接口的值类型的显式转换。取消装箱操作包括：<br>1.检查对象实例，以确保它是给定值类型的装箱值。<br>2.将该值从实例复制到值类型变量中。</p>\n</blockquote>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i = <span class=\"number\">123</span>;      <span class=\"comment\">// a value type</span></span><br><span class=\"line\"><span class=\"keyword\">object</span> o = i;     <span class=\"comment\">// boxing</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> j = (<span class=\"keyword\">int</span>)o;   <span class=\"comment\">// unboxing</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ck6soqjzl0000qkrifj0f8ar4","category_id":"ck5t88gqa0001rwribu4g3scw","_id":"ck6soqjzv0002qkri9tr10anl"},{"post_id":"ck6t31wmr0003j0rickq2cqvb","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck6ufvnky001vqcri25n21ctu"},{"post_id":"ck6ugfar9001yqcrich0a556t","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck6uh1xqb0029qcri537l6s3q"},{"post_id":"ck6ugfc310021qcri8rg42c23","category_id":"ck6ta3wza00003griag6r8b8x","_id":"ck6urp4l8002hqcria48td6sd"}],"PostTag":[{"post_id":"ck6soqjzl0000qkrifj0f8ar4","tag_id":"ck5t88gqd0002rwricxat8mo9","_id":"ck6soqjzv0001qkrigovp5ke1"},{"post_id":"ck6t31wmr0003j0rickq2cqvb","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck6ufvnkx001uqcri4dv50kko"},{"post_id":"ck6ugfar9001yqcrich0a556t","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck6uh1xqa0028qcri3p4g1y2l"},{"post_id":"ck6ugfc310021qcri8rg42c23","tag_id":"ck6ta0kuw00078kri48zv4ilg","_id":"ck6urp4l8002gqcri8at7g6jf"}],"Tag":[{"name":"开篇","_id":"ck5p34sm60000eovqah6x8whi"},{"name":"hahaha","_id":"ck5p36lt40000v8vq9rw75bjr"},{"name":"编程","_id":"ck5p3b9qf00017svqh2azesgf"},{"name":"感悟","_id":"ck5p3b9qf00027svq7j574y66"},{"name":"分享","_id":"ck5qt24f90002zcri41negmp5"},{"name":"小程序思维导图","_id":"ck5t88gqd0002rwricxat8mo9"},{"name":"程序设计语言","_id":"ck6soixn60003d0riahhihr07"},{"name":"程序设计语言，C#","_id":"ck6ta0kuw00078kri48zv4ilg"},{"name":"程序设计语言，csharp","_id":"ck6ta3wzc00013grig9fc1ba6"},{"name":"程序设计语言，C\\#","_id":"ck6ta4hwk00063griba3o5ymq"}]}}